
F407-EFALCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800ff60  0800ff60  0001ff60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105b0  080105b0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080105b0  080105b0  000205b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105b8  080105b8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105b8  080105b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105bc  080105bc  000205bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080105c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d50  200001e0  080107a0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f30  080107a0  00030f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164fa  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ae3  00000000  00000000  0004670a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  000491f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0004a520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022db6  00000000  00000000  0004b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ece4  00000000  00000000  0006e4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3179  00000000  00000000  0007d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015033b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d8  00000000  00000000  001503b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff44 	.word	0x0800ff44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ff44 	.word	0x0800ff44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HMC5883L_initialize+0x28>)
 800102e:	221e      	movs	r2, #30
 8001030:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HMC5883L_initialize+0x28>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2270      	movs	r2, #112	; 0x70
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8a8 	bl	8001190 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 f831 	bl	80010a8 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f842 	bl	80010d0 <HMC5883L_setMode>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001fc 	.word	0x200001fc

08001054 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HMC5883L_testConnection+0x4c>)
 800105c:	7818      	ldrb	r0, [r3, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HMC5883L_testConnection+0x50>)
 8001064:	2203      	movs	r2, #3
 8001066:	210a      	movs	r1, #10
 8001068:	f000 f85a 	bl	8001120 <I2Cdev_readBytes>
 800106c:	4603      	mov	r3, r0
 800106e:	2b03      	cmp	r3, #3
 8001070:	d112      	bne.n	8001098 <HMC5883L_testConnection+0x44>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HMC5883L_testConnection+0x50>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b48      	cmp	r3, #72	; 0x48
 8001078:	d109      	bne.n	800108e <HMC5883L_testConnection+0x3a>
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HMC5883L_testConnection+0x50>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	2b34      	cmp	r3, #52	; 0x34
 8001080:	d105      	bne.n	800108e <HMC5883L_testConnection+0x3a>
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HMC5883L_testConnection+0x50>)
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	2b33      	cmp	r3, #51	; 0x33
 8001088:	d101      	bne.n	800108e <HMC5883L_testConnection+0x3a>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HMC5883L_testConnection+0x3c>
 800108e:	2300      	movs	r3, #0
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	e000      	b.n	800109a <HMC5883L_testConnection+0x46>
    }
    return false;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001fc 	.word	0x200001fc
 80010a4:	20000200 	.word	0x20000200

080010a8 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HMC5883L_setGain+0x24>)
 80010b4:	7818      	ldrb	r0, [r3, #0]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2101      	movs	r1, #1
 80010c0:	f000 f866 	bl	8001190 <I2Cdev_writeByte>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001fc 	.word	0x200001fc

080010d0 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HMC5883L_setMode+0x28>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f854 	bl	8001190 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HMC5883L_setMode+0x2c>)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	7013      	strb	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001fc 	.word	0x200001fc
 80010fc:	20000206 	.word	0x20000206

08001100 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <I2Cdev_init+0x1c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000208 	.word	0x20000208

08001120 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af02      	add	r7, sp, #8
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	460b      	mov	r3, r1
 800112e:	71bb      	strb	r3, [r7, #6]
 8001130:	4613      	mov	r3, r2
 8001132:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8001134:	8b3b      	ldrh	r3, [r7, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <I2Cdev_readBytes+0x1e>
 800113a:	8b3b      	ldrh	r3, [r7, #24]
 800113c:	e001      	b.n	8001142 <I2Cdev_readBytes+0x22>
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <I2Cdev_readBytes+0x6c>)
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	b29b      	uxth	r3, r3
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	b299      	uxth	r1, r3
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	1dba      	adds	r2, r7, #6
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	f006 fac6 	bl	80076e8 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <I2Cdev_readBytes+0x6c>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	b29b      	uxth	r3, r3
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b299      	uxth	r1, r3
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	b29a      	uxth	r2, r3
 800116c:	89fb      	ldrh	r3, [r7, #14]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	f006 fbb6 	bl	80078e4 <HAL_I2C_Master_Receive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <I2Cdev_readBytes+0x62>
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	e000      	b.n	8001184 <I2Cdev_readBytes+0x64>
    return -1;
 8001182:	23ff      	movs	r3, #255	; 0xff
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000208 	.word	0x20000208

08001190 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	460b      	mov	r3, r1
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 80011a2:	1d7b      	adds	r3, r7, #5
 80011a4:	79b9      	ldrb	r1, [r7, #6]
 80011a6:	79f8      	ldrb	r0, [r7, #7]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f000 f805 	bl	80011b8 <I2Cdev_writeBytes>
 80011ae:	4603      	mov	r3, r0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af04      	add	r7, sp, #16
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	460b      	mov	r3, r1
 80011c6:	71bb      	strb	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <I2Cdev_writeBytes+0x58>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	b299      	uxth	r1, r3
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	b29c      	uxth	r4, r3
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e4:	9202      	str	r2, [sp, #8]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	4622      	mov	r2, r4
 80011f0:	f006 fd9e 	bl	8007d30 <HAL_I2C_Mem_Write>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	b29b      	uxth	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	20000208 	.word	0x20000208

08001214 <kalman_init>:
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001220:	edc7 0a01 	vstr	s1, [r7, #4]
 8001224:	ed87 1a00 	vstr	s2, [r7]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2203      	movs	r2, #3
 8001252:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_HIGH_RES;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2204      	movs	r2, #4
 800125e:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_SKIPPED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	715a      	strb	r2, [r3, #5]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800127e:	b580      	push	{r7, lr}
 8001280:	b08a      	sub	sp, #40	; 0x28
 8001282:	af04      	add	r7, sp, #16
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	460b      	mov	r3, r1
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	b29a      	uxth	r2, r3
 800129c:	8af9      	ldrh	r1, [r7, #22]
 800129e:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	f006 fe38 	bl	8007f24 <HAL_I2C_Mem_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10b      	bne.n	80012d2 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80012ba:	7d7b      	ldrb	r3, [r7, #21]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7d3b      	ldrb	r3, [r7, #20]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	801a      	strh	r2, [r3, #0]
		return true;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <read_register16+0x56>
	} else
		return false;
 80012d2:	2300      	movs	r3, #0

}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	461a      	mov	r2, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	72fb      	strb	r3, [r7, #11]
 80012ec:	4613      	mov	r3, r2
 80012ee:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	b29c      	uxth	r4, r3
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	b29b      	uxth	r3, r3
 8001304:	8af9      	ldrh	r1, [r7, #22]
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	9202      	str	r2, [sp, #8]
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	4622      	mov	r2, r4
 8001316:	f006 fe05 	bl	8007f24 <HAL_I2C_Mem_Read>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <read_data+0x48>
		return 0;
 8001320:	2300      	movs	r3, #0
 8001322:	e000      	b.n	8001326 <read_data+0x4a>
	else
		return 1;
 8001324:	2301      	movs	r3, #1

}
 8001326:	4618      	mov	r0, r3
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}

0800132e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	461a      	mov	r2, r3
 800133a:	2188      	movs	r1, #136	; 0x88
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff9e 	bl	800127e <read_register16>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d06f      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3302      	adds	r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	218a      	movs	r1, #138	; 0x8a
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff94 	bl	800127e <read_register16>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d065      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3304      	adds	r3, #4
 8001360:	461a      	mov	r2, r3
 8001362:	218c      	movs	r1, #140	; 0x8c
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff8a 	bl	800127e <read_register16>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d05b      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3306      	adds	r3, #6
 8001374:	461a      	mov	r2, r3
 8001376:	218e      	movs	r1, #142	; 0x8e
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff80 	bl	800127e <read_register16>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d051      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3308      	adds	r3, #8
 8001388:	461a      	mov	r2, r3
 800138a:	2190      	movs	r1, #144	; 0x90
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff76 	bl	800127e <read_register16>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d047      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	330a      	adds	r3, #10
 800139c:	461a      	mov	r2, r3
 800139e:	2192      	movs	r1, #146	; 0x92
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff6c 	bl	800127e <read_register16>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d03d      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	330c      	adds	r3, #12
 80013b0:	461a      	mov	r2, r3
 80013b2:	2194      	movs	r1, #148	; 0x94
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff62 	bl	800127e <read_register16>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d033      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	330e      	adds	r3, #14
 80013c4:	461a      	mov	r2, r3
 80013c6:	2196      	movs	r1, #150	; 0x96
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff58 	bl	800127e <read_register16>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d029      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3310      	adds	r3, #16
 80013d8:	461a      	mov	r2, r3
 80013da:	2198      	movs	r1, #152	; 0x98
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff4e 	bl	800127e <read_register16>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01f      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3312      	adds	r3, #18
 80013ec:	461a      	mov	r2, r3
 80013ee:	219a      	movs	r1, #154	; 0x9a
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff44 	bl	800127e <read_register16>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d015      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3314      	adds	r3, #20
 8001400:	461a      	mov	r2, r3
 8001402:	219c      	movs	r1, #156	; 0x9c
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff3a 	bl	800127e <read_register16>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001414:	461a      	mov	r2, r3
 8001416:	219e      	movs	r1, #158	; 0x9e
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff30 	bl	800127e <read_register16>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <read_calibration_data+0xfa>

		return true;
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <read_calibration_data+0xfc>
	}

	return false;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f103 0218 	add.w	r2, r3, #24
 8001440:	2301      	movs	r3, #1
 8001442:	21a1      	movs	r1, #161	; 0xa1
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff49 	bl	80012dc <read_data>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d14b      	bne.n	80014e8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	331a      	adds	r3, #26
 8001454:	461a      	mov	r2, r3
 8001456:	21e1      	movs	r1, #225	; 0xe1
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff10 	bl	800127e <read_register16>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d041      	beq.n	80014e8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f103 021c 	add.w	r2, r3, #28
 800146a:	2301      	movs	r3, #1
 800146c:	21e3      	movs	r1, #227	; 0xe3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff34 	bl	80012dc <read_data>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d136      	bne.n	80014e8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800147a:	f107 030e 	add.w	r3, r7, #14
 800147e:	461a      	mov	r2, r3
 8001480:	21e4      	movs	r1, #228	; 0xe4
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fefb 	bl	800127e <read_register16>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d02c      	beq.n	80014e8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	461a      	mov	r2, r3
 8001494:	21e5      	movs	r1, #229	; 0xe5
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fef1 	bl	800127e <read_register16>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d022      	beq.n	80014e8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80014a8:	2301      	movs	r3, #1
 80014aa:	21e7      	movs	r1, #231	; 0xe7
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff15 	bl	80012dc <read_data>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d117      	bne.n	80014e8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	b21b      	sxth	r3, r3
 80014be:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	121b      	asrs	r3, r3, #8
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80014d8:	89bb      	ldrh	r3, [r7, #12]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	841a      	strh	r2, [r3, #32]

		return true;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <read_hum_calibration_data+0xb8>
	}

	return false;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af04      	add	r7, sp, #16
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
 80014fe:	4613      	mov	r3, r2
 8001500:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	b29a      	uxth	r2, r3
 8001512:	89f9      	ldrh	r1, [r7, #14]
 8001514:	f242 7310 	movw	r3, #10000	; 0x2710
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2301      	movs	r3, #1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	1cbb      	adds	r3, r7, #2
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2301      	movs	r3, #1
 8001524:	f006 fc04 	bl	8007d30 <HAL_I2C_Mem_Write>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <write_register8+0x40>
		return false;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <write_register8+0x42>
	else
		return true;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800154a:	2b76      	cmp	r3, #118	; 0x76
 800154c:	d005      	beq.n	800155a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001552:	2b77      	cmp	r3, #119	; 0x77
 8001554:	d001      	beq.n	800155a <bmp280_init+0x1e>

		return false;
 8001556:	2300      	movs	r3, #0
 8001558:	e099      	b.n	800168e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001560:	2301      	movs	r3, #1
 8001562:	21d0      	movs	r1, #208	; 0xd0
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff feb9 	bl	80012dc <read_data>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <bmp280_init+0x38>
		return false;
 8001570:	2300      	movs	r3, #0
 8001572:	e08c      	b.n	800168e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800157a:	2b58      	cmp	r3, #88	; 0x58
 800157c:	d006      	beq.n	800158c <bmp280_init+0x50>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001584:	2b60      	cmp	r3, #96	; 0x60
 8001586:	d001      	beq.n	800158c <bmp280_init+0x50>

		return false;
 8001588:	2300      	movs	r3, #0
 800158a:	e080      	b.n	800168e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800158c:	22b6      	movs	r2, #182	; 0xb6
 800158e:	21e0      	movs	r1, #224	; 0xe0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ffae 	bl	80014f2 <write_register8>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <bmp280_init+0x64>
		return false;
 800159c:	2300      	movs	r3, #0
 800159e:	e076      	b.n	800168e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80015a0:	f107 020c 	add.w	r2, r7, #12
 80015a4:	2301      	movs	r3, #1
 80015a6:	21f3      	movs	r1, #243	; 0xf3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fe97 	bl	80012dc <read_data>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f5      	bne.n	80015a0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80015b4:	7b3b      	ldrb	r3, [r7, #12]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff feb5 	bl	800132e <read_calibration_data>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f083 0301 	eor.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <bmp280_init+0x96>
 80015d0:	e001      	b.n	80015d6 <bmp280_init+0x9a>
		return false;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e05b      	b.n	800168e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015dc:	2b60      	cmp	r3, #96	; 0x60
 80015de:	d10a      	bne.n	80015f6 <bmp280_init+0xba>
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff26 	bl	8001432 <read_hum_calibration_data>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <bmp280_init+0xba>
		return false;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e04b      	b.n	800168e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	795b      	ldrb	r3, [r3, #5]
 80015fa:	015b      	lsls	r3, r3, #5
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	785b      	ldrb	r3, [r3, #1]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	461a      	mov	r2, r3
 8001610:	21f5      	movs	r1, #245	; 0xf5
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff6d 	bl	80014f2 <write_register8>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <bmp280_init+0xe6>
		return false;
 800161e:	2300      	movs	r3, #0
 8001620:	e035      	b.n	800168e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001636:	b25a      	sxtb	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b25a      	sxtb	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800164e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001656:	2b60      	cmp	r3, #96	; 0x60
 8001658:	d10d      	bne.n	8001676 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001660:	7b7b      	ldrb	r3, [r7, #13]
 8001662:	461a      	mov	r2, r3
 8001664:	21f2      	movs	r1, #242	; 0xf2
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff43 	bl	80014f2 <write_register8>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <bmp280_init+0x13a>
			return false;
 8001672:	2300      	movs	r3, #0
 8001674:	e00b      	b.n	800168e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	461a      	mov	r2, r3
 800167a:	21f4      	movs	r1, #244	; 0xf4
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff38 	bl	80014f2 <write_register8>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <bmp280_init+0x150>
		return false;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <bmp280_init+0x152>
	}

	return true;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 800169e:	f107 020f 	add.w	r2, r7, #15
 80016a2:	2301      	movs	r3, #1
 80016a4:	21f3      	movs	r1, #243	; 0xf3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fe18 	bl	80012dc <read_data>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <bmp280_is_measuring+0x20>
		return false;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e007      	b.n	80016c6 <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <bmp280_is_measuring+0x2e>
		return true;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <bmp280_is_measuring+0x30>
	}
	return false;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80016ce:	b480      	push	{r7}
 80016d0:	b087      	sub	sp, #28
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	10da      	asrs	r2, r3, #3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016f0:	12db      	asrs	r3, r3, #11
 80016f2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	111b      	asrs	r3, r3, #4
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	1112      	asrs	r2, r2, #4
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	8809      	ldrh	r1, [r1, #0]
 8001706:	1a52      	subs	r2, r2, r1
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001714:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001718:	139b      	asrs	r3, r3, #14
 800171a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	441a      	add	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	3380      	adds	r3, #128	; 0x80
 8001732:	121b      	asrs	r3, r3, #8
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001740:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001744:	b08a      	sub	sp, #40	; 0x28
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001756:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800175a:	f142 34ff 	adc.w	r4, r2, #4294967295
 800175e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	6a3a      	ldr	r2, [r7, #32]
 8001766:	fb02 f203 	mul.w	r2, r2, r3
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	6a39      	ldr	r1, [r7, #32]
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	441a      	add	r2, r3
 8001774:	6a39      	ldr	r1, [r7, #32]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	fba1 3403 	umull	r3, r4, r1, r3
 800177c:	4422      	add	r2, r4
 800177e:	4614      	mov	r4, r2
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001786:	b211      	sxth	r1, r2
 8001788:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800178c:	fb01 f504 	mul.w	r5, r1, r4
 8001790:	fb03 f002 	mul.w	r0, r3, r2
 8001794:	4428      	add	r0, r5
 8001796:	fba3 3401 	umull	r3, r4, r3, r1
 800179a:	1902      	adds	r2, r0, r4
 800179c:	4614      	mov	r4, r2
 800179e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80017a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017b2:	6a3a      	ldr	r2, [r7, #32]
 80017b4:	fb04 f102 	mul.w	r1, r4, r2
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	fb03 f202 	mul.w	r2, r3, r2
 80017be:	1888      	adds	r0, r1, r2
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	fba2 1203 	umull	r1, r2, r2, r3
 80017c6:	1883      	adds	r3, r0, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 0500 	mov.w	r5, #0
 80017ce:	f04f 0600 	mov.w	r6, #0
 80017d2:	0456      	lsls	r6, r2, #17
 80017d4:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80017d8:	044d      	lsls	r5, r1, #17
 80017da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017de:	186b      	adds	r3, r5, r1
 80017e0:	eb46 0402 	adc.w	r4, r6, r2
 80017e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017ee:	b219      	sxth	r1, r3
 80017f0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017f4:	f04f 0500 	mov.w	r5, #0
 80017f8:	f04f 0600 	mov.w	r6, #0
 80017fc:	00ce      	lsls	r6, r1, #3
 80017fe:	2500      	movs	r5, #0
 8001800:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001804:	186b      	adds	r3, r5, r1
 8001806:	eb46 0402 	adc.w	r4, r6, r2
 800180a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	fb02 f203 	mul.w	r2, r2, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	6a39      	ldr	r1, [r7, #32]
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	441a      	add	r2, r3
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	fba1 3403 	umull	r3, r4, r1, r3
 8001828:	4422      	add	r2, r4
 800182a:	4614      	mov	r4, r2
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001832:	b211      	sxth	r1, r2
 8001834:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001838:	fb01 f504 	mul.w	r5, r1, r4
 800183c:	fb03 f002 	mul.w	r0, r3, r2
 8001840:	4428      	add	r0, r5
 8001842:	fba3 3401 	umull	r3, r4, r3, r1
 8001846:	1902      	adds	r2, r0, r4
 8001848:	4614      	mov	r4, r2
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	0a19      	lsrs	r1, r3, #8
 8001854:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001858:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001860:	b21b      	sxth	r3, r3
 8001862:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001866:	6a38      	ldr	r0, [r7, #32]
 8001868:	fb04 f500 	mul.w	r5, r4, r0
 800186c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800186e:	fb03 f000 	mul.w	r0, r3, r0
 8001872:	4428      	add	r0, r5
 8001874:	6a3d      	ldr	r5, [r7, #32]
 8001876:	fba5 5603 	umull	r5, r6, r5, r3
 800187a:	1983      	adds	r3, r0, r6
 800187c:	461e      	mov	r6, r3
 800187e:	f04f 0b00 	mov.w	fp, #0
 8001882:	f04f 0c00 	mov.w	ip, #0
 8001886:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800188a:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800188e:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001892:	eb1b 0301 	adds.w	r3, fp, r1
 8001896:	eb4c 0402 	adc.w	r4, ip, r2
 800189a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800189e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80018a2:	1c19      	adds	r1, r3, #0
 80018a4:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	88db      	ldrh	r3, [r3, #6]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	fb03 f502 	mul.w	r5, r3, r2
 80018b6:	fb01 f004 	mul.w	r0, r1, r4
 80018ba:	4428      	add	r0, r5
 80018bc:	fba1 3403 	umull	r3, r4, r1, r3
 80018c0:	1902      	adds	r2, r0, r4
 80018c2:	4614      	mov	r4, r2
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	1061      	asrs	r1, r4, #1
 80018ce:	17e2      	asrs	r2, r4, #31
 80018d0:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80018d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80018d8:	4323      	orrs	r3, r4
 80018da:	d101      	bne.n	80018e0 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80018dc:	2300      	movs	r3, #0
 80018de:	e0d4      	b.n	8001a8a <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018e6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80018ea:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	ea4f 0963 	mov.w	r9, r3, asr #1
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80018fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80018fe:	4645      	mov	r5, r8
 8001900:	464e      	mov	r6, r9
 8001902:	1aed      	subs	r5, r5, r3
 8001904:	eb66 0604 	sbc.w	r6, r6, r4
 8001908:	46a8      	mov	r8, r5
 800190a:	46b1      	mov	r9, r6
 800190c:	eb18 0308 	adds.w	r3, r8, r8
 8001910:	eb49 0409 	adc.w	r4, r9, r9
 8001914:	4698      	mov	r8, r3
 8001916:	46a1      	mov	r9, r4
 8001918:	eb18 0805 	adds.w	r8, r8, r5
 800191c:	eb49 0906 	adc.w	r9, r9, r6
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800192c:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001930:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001934:	eb18 0801 	adds.w	r8, r8, r1
 8001938:	eb49 0902 	adc.w	r9, r9, r2
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001948:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800194c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001950:	4688      	mov	r8, r1
 8001952:	4691      	mov	r9, r2
 8001954:	eb18 0805 	adds.w	r8, r8, r5
 8001958:	eb49 0906 	adc.w	r9, r9, r6
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001968:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800196c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001970:	4688      	mov	r8, r1
 8001972:	4691      	mov	r9, r2
 8001974:	eb18 0005 	adds.w	r0, r8, r5
 8001978:	eb49 0106 	adc.w	r1, r9, r6
 800197c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001980:	f7ff f982 	bl	8000c88 <__aeabi_ldivmod>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001992:	b219      	sxth	r1, r3
 8001994:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001998:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	0b6b      	lsrs	r3, r5, #13
 80019a6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80019aa:	1374      	asrs	r4, r6, #13
 80019ac:	fb03 f502 	mul.w	r5, r3, r2
 80019b0:	fb01 f004 	mul.w	r0, r1, r4
 80019b4:	4428      	add	r0, r5
 80019b6:	fba1 1203 	umull	r1, r2, r1, r3
 80019ba:	1883      	adds	r3, r0, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f04f 0400 	mov.w	r4, #0
 80019ca:	0b6b      	lsrs	r3, r5, #13
 80019cc:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80019d0:	1374      	asrs	r4, r6, #13
 80019d2:	fb03 f502 	mul.w	r5, r3, r2
 80019d6:	fb01 f004 	mul.w	r0, r1, r4
 80019da:	4428      	add	r0, r5
 80019dc:	fba1 1203 	umull	r1, r2, r1, r3
 80019e0:	1883      	adds	r3, r0, r2
 80019e2:	461a      	mov	r2, r3
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f04f 0400 	mov.w	r4, #0
 80019ec:	0e4b      	lsrs	r3, r1, #25
 80019ee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80019f2:	1654      	asrs	r4, r2, #25
 80019f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	fb04 f102 	mul.w	r1, r4, r2
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	fb03 f202 	mul.w	r2, r3, r2
 8001a10:	1888      	adds	r0, r1, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	fba2 1203 	umull	r1, r2, r2, r3
 8001a18:	1883      	adds	r3, r0, r2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f04f 0400 	mov.w	r4, #0
 8001a24:	0ccb      	lsrs	r3, r1, #19
 8001a26:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001a2a:	14d4      	asrs	r4, r2, #19
 8001a2c:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a34:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a38:	eb11 0803 	adds.w	r8, r1, r3
 8001a3c:	eb42 0904 	adc.w	r9, r2, r4
 8001a40:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a44:	eb13 0508 	adds.w	r5, r3, r8
 8001a48:	eb44 0609 	adc.w	r6, r4, r9
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	0a29      	lsrs	r1, r5, #8
 8001a56:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001a5a:	1232      	asrs	r2, r6, #8
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a62:	b21d      	sxth	r5, r3
 8001a64:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001a68:	f04f 0800 	mov.w	r8, #0
 8001a6c:	f04f 0900 	mov.w	r9, #0
 8001a70:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001a74:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001a78:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001a7c:	eb18 0301 	adds.w	r3, r8, r1
 8001a80:	eb49 0402 	adc.w	r4, r9, r2
 8001a84:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001a88:	693b      	ldr	r3, [r7, #16]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001a94 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001aa6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	039a      	lsls	r2, r3, #14
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001ab2:	051b      	lsls	r3, r3, #20
 8001ab4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001abc:	4619      	mov	r1, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fb03 f301 	mul.w	r3, r3, r1
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001aca:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	fb02 f201 	mul.w	r2, r2, r1
 8001ada:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	7f09      	ldrb	r1, [r1, #28]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	6979      	ldr	r1, [r7, #20]
 8001ae4:	fb01 f100 	mul.w	r1, r1, r0
 8001ae8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001aea:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001aee:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001af2:	1292      	asrs	r2, r2, #10
 8001af4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001afe:	fb01 f202 	mul.w	r2, r1, r2
 8001b02:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b06:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	13db      	asrs	r3, r3, #15
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	13d2      	asrs	r2, r2, #15
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	7e12      	ldrb	r2, [r2, #24]
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b32:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b3a:	bfa8      	it	ge
 8001b3c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b40:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	131b      	asrs	r3, r3, #12
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08c      	sub	sp, #48	; 0x30
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b66:	2b60      	cmp	r3, #96	; 0x60
 8001b68:	d007      	beq.n	8001b7a <bmp280_read_fixed+0x28>
		if (humidity)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <bmp280_read_fixed+0x32>
 8001b80:	2308      	movs	r3, #8
 8001b82:	e000      	b.n	8001b86 <bmp280_read_fixed+0x34>
 8001b84:	2306      	movs	r3, #6
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f107 0218 	add.w	r2, r7, #24
 8001b90:	21f7      	movs	r1, #247	; 0xf7
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fba2 	bl	80012dc <read_data>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <bmp280_read_fixed+0x50>
		return false;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e038      	b.n	8001c14 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ba2:	7e3b      	ldrb	r3, [r7, #24]
 8001ba4:	031a      	lsls	r2, r3, #12
 8001ba6:	7e7b      	ldrb	r3, [r7, #25]
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4313      	orrs	r3, r2
 8001bac:	7eba      	ldrb	r2, [r7, #26]
 8001bae:	0912      	lsrs	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001bb6:	7efb      	ldrb	r3, [r7, #27]
 8001bb8:	031a      	lsls	r2, r3, #12
 8001bba:	7f3b      	ldrb	r3, [r7, #28]
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	7f7a      	ldrb	r2, [r7, #29]
 8001bc2:	0912      	lsrs	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fd7b 	bl	80016ce <compensate_temperature>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	461a      	mov	r2, r3
 8001be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff fdab 	bl	8001740 <compensate_pressure>
 8001bea:	4602      	mov	r2, r0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00d      	beq.n	8001c12 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001bf6:	7fbb      	ldrb	r3, [r7, #30]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	7ffa      	ldrb	r2, [r7, #31]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	461a      	mov	r2, r3
 8001c04:	6a39      	ldr	r1, [r7, #32]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff ff44 	bl	8001a94 <compensate_humidity>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <bmp280_read_float+0x1a>
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	e000      	b.n	8001c38 <bmp280_read_float+0x1c>
 8001c36:	2300      	movs	r3, #0
 8001c38:	f107 0218 	add.w	r2, r7, #24
 8001c3c:	f107 011c 	add.w	r1, r7, #28
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7ff ff86 	bl	8001b52 <bmp280_read_fixed>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d028      	beq.n	8001c9e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c56:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001ca8 <bmp280_read_float+0x8c>
 8001c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c6e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001cac <bmp280_read_float+0x90>
 8001c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c8c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001cb0 <bmp280_read_float+0x94>
 8001c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <bmp280_read_float+0x84>
	}

	return false;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	42c80000 	.word	0x42c80000
 8001cac:	43800000 	.word	0x43800000
 8001cb0:	44800000 	.word	0x44800000
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbe:	f004 f8a1 	bl	8005e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc2:	f000 f96f 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc6:	f000 fed7 	bl	8002a78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cca:	f000 fe8f 	bl	80029ec <MX_DMA_Init>
  MX_I2C1_Init();
 8001cce:	f000 fa33 	bl	8002138 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001cd2:	f000 fe0d 	bl	80028f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001cd6:	f000 fe5f 	bl	8002998 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001cda:	f000 fe33 	bl	8002944 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001cde:	f000 fb79 	bl	80023d4 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001ce2:	f000 fa57 	bl	8002194 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001ce6:	f000 fad9 	bl	800229c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001cea:	f000 fbef 	bl	80024cc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cee:	f000 fc5d 	bl	80025ac <MX_TIM5_Init>
  MX_TIM9_Init();
 8001cf2:	f000 fd37 	bl	8002764 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001cf6:	f000 fcff 	bl	80026f8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001cfa:	f000 fcc7 	bl	800268c <MX_TIM6_Init>
  MX_TIM10_Init();
 8001cfe:	f000 fd8d 	bl	800281c <MX_TIM10_Init>
  MX_TIM1_Init();
 8001d02:	f000 fa75 	bl	80021f0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001d06:	f000 f9b7 	bl	8002078 <MX_ADC1_Init>
  MX_TIM12_Init();
 8001d0a:	f000 fdab 	bl	8002864 <MX_TIM12_Init>
  /*PIDControl(&PIDRoll, (float)IMU_Data->ROLL, RC_CH2.DutyCycleVal);
  PIDControl(&PIDPitch, (float)IMU_Data->PITCH, RC_CH1.DutyCycleVal);
  PIDControl(&PIDYaw, (float)IMU_Data->YAW, RC_CH4.DutyCycleVal);*/

  //init sensor
  CompassInit();
 8001d0e:	f001 fc7f 	bl	8003610 <CompassInit>
  BMPInit();
 8001d12:	f001 fa8f 	bl	8003234 <BMPInit>
  GPSInit();
 8001d16:	f001 fc43 	bl	80035a0 <GPSInit>
  IMUInit();
 8001d1a:	f001 fd87 	bl	800382c <IMUInit>
  initmonitorBAT();
 8001d1e:	f001 fccf 	bl	80036c0 <initmonitorBAT>

  //Remote init
  RemoteInit();
 8001d22:	f001 fcfb 	bl	800371c <RemoteInit>

  //Inisialisasi PID
  //ROLL
  //PIDInit(&PIDRoll, 0.0300, 0.0080, 0.0065, 0.01);//d=0.01 p=0.045 i = 0.4
  //PIDInit(&PIDRoll, 0.0238, 0.0240, 0.0045, 0.01);
  PIDInit(&PIDRoll, 0.01875, 0.00120, 0.00825, 0.01);
 8001d26:	ed9f 3b6e 	vldr	d3, [pc, #440]	; 8001ee0 <main+0x228>
 8001d2a:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8001ee8 <main+0x230>
 8001d2e:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001ef0 <main+0x238>
 8001d32:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8001ef8 <main+0x240>
 8001d36:	4884      	ldr	r0, [pc, #528]	; (8001f48 <main+0x290>)
 8001d38:	f002 fdf4 	bl	8004924 <PIDInit>
  //PITCH
  //PIDInit(&PIDPitch,  0.0156, 0.0100, 0.0056, 0.01); //kp = 1, kd = 1, ki = 0.0040, timesampling = 0.04
  PIDInit(&PIDPitch,  0.026555, 0.01995, 0.00555, 0.01);
 8001d3c:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001ee0 <main+0x228>
 8001d40:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8001f00 <main+0x248>
 8001d44:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001f08 <main+0x250>
 8001d48:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8001f10 <main+0x258>
 8001d4c:	487f      	ldr	r0, [pc, #508]	; (8001f4c <main+0x294>)
 8001d4e:	f002 fde9 	bl	8004924 <PIDInit>
  //YAW
  //PIDInit(&PIDYaw, 0.125f, 0.0f, 0.000f, 0.01); //kp = 1, kd = 1, ki = 1, timesampling = 0.04
  PIDInit(&PIDYaw, 0.080, 0.0020, 0.0f, 0.01);
 8001d52:	ed9f 3b63 	vldr	d3, [pc, #396]	; 8001ee0 <main+0x228>
 8001d56:	ed9f 2b70 	vldr	d2, [pc, #448]	; 8001f18 <main+0x260>
 8001d5a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f20 <main+0x268>
 8001d5e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001f28 <main+0x270>
 8001d62:	487b      	ldr	r0, [pc, #492]	; (8001f50 <main+0x298>)
 8001d64:	f002 fdde 	bl	8004924 <PIDInit>
  //Altitude
  PIDInit(&PIDAltitude, 0.09, 0.085, 0.00583, 0.01);
 8001d68:	ed9f 3b5d 	vldr	d3, [pc, #372]	; 8001ee0 <main+0x228>
 8001d6c:	ed9f 2b70 	vldr	d2, [pc, #448]	; 8001f30 <main+0x278>
 8001d70:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001f38 <main+0x280>
 8001d74:	ed9f 0b72 	vldr	d0, [pc, #456]	; 8001f40 <main+0x288>
 8001d78:	4876      	ldr	r0, [pc, #472]	; (8001f54 <main+0x29c>)
 8001d7a:	f002 fdd3 	bl	8004924 <PIDInit>
  ESCInit();
 8001d7e:	f000 ff57 	bl	8002c30 <ESCInit>

  HAL_TIM_Base_Start_IT(&htim10);
 8001d82:	4875      	ldr	r0, [pc, #468]	; (8001f58 <main+0x2a0>)
 8001d84:	f007 fc49 	bl	800961a <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart1, SerialData, 10);
 8001d88:	220a      	movs	r2, #10
 8001d8a:	4974      	ldr	r1, [pc, #464]	; (8001f5c <main+0x2a4>)
 8001d8c:	4874      	ldr	r0, [pc, #464]	; (8001f60 <main+0x2a8>)
 8001d8e:	f008 fec5 	bl	800ab1c <HAL_UART_Receive_DMA>

  strSize = sprintf((char*)buffer, "Mulai\r\n");
 8001d92:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <main+0x2ac>)
 8001d94:	4b74      	ldr	r3, [pc, #464]	; (8001f68 <main+0x2b0>)
 8001d96:	cb03      	ldmia	r3!, {r0, r1}
 8001d98:	6010      	str	r0, [r2, #0]
 8001d9a:	6051      	str	r1, [r2, #4]
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <main+0x2b4>)
 8001da2:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001da4:	4b71      	ldr	r3, [pc, #452]	; (8001f6c <main+0x2b4>)
 8001da6:	881a      	ldrh	r2, [r3, #0]
 8001da8:	230a      	movs	r3, #10
 8001daa:	496e      	ldr	r1, [pc, #440]	; (8001f64 <main+0x2ac>)
 8001dac:	486c      	ldr	r0, [pc, #432]	; (8001f60 <main+0x2a8>)
 8001dae:	f008 fe1c 	bl	800a9ea <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <main+0x2b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dba:	db36      	blt.n	8001e2a <main+0x172>
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <main+0x2b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f240 421a 	movw	r2, #1050	; 0x41a
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	dc30      	bgt.n	8001e2a <main+0x172>
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <main+0x2bc>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02c      	beq.n	8001e2a <main+0x172>
		  HAL_TIM_Base_Stop_IT(&htim7);
 8001dd0:	4869      	ldr	r0, [pc, #420]	; (8001f78 <main+0x2c0>)
 8001dd2:	f007 fc46 	bl	8009662 <HAL_TIM_Base_Stop_IT>
		  fly_mode = FLY_MODE_OFF;
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <main+0x2bc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
		  PIDReset(&PIDRoll);
 8001ddc:	485a      	ldr	r0, [pc, #360]	; (8001f48 <main+0x290>)
 8001dde:	f002 fd79 	bl	80048d4 <PIDReset>
		  PIDReset(&PIDPitch);
 8001de2:	485a      	ldr	r0, [pc, #360]	; (8001f4c <main+0x294>)
 8001de4:	f002 fd76 	bl	80048d4 <PIDReset>
		  PIDReset(&PIDYaw);
 8001de8:	4859      	ldr	r0, [pc, #356]	; (8001f50 <main+0x298>)
 8001dea:	f002 fd73 	bl	80048d4 <PIDReset>
		  pulseESC1 = pulseESC2 = pulseESC3 = pulseESC4 = 1000;
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	4a62      	ldr	r2, [pc, #392]	; (8001f7c <main+0x2c4>)
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4a62      	ldr	r2, [pc, #392]	; (8001f80 <main+0x2c8>)
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4a62      	ldr	r2, [pc, #392]	; (8001f84 <main+0x2cc>)
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4a62      	ldr	r2, [pc, #392]	; (8001f88 <main+0x2d0>)
 8001e00:	6013      	str	r3, [r2, #0]
		  char a = 0x00;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71fb      	strb	r3, [r7, #7]
		  strSize = sprintf((char*)buffer, "M%c#", a);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4960      	ldr	r1, [pc, #384]	; (8001f8c <main+0x2d4>)
 8001e0c:	4855      	ldr	r0, [pc, #340]	; (8001f64 <main+0x2ac>)
 8001e0e:	f00a f895 	bl	800bf3c <siprintf>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b55      	ldr	r3, [pc, #340]	; (8001f6c <main+0x2b4>)
 8001e18:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <main+0x2b4>)
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	230a      	movs	r3, #10
 8001e20:	4950      	ldr	r1, [pc, #320]	; (8001f64 <main+0x2ac>)
 8001e22:	484f      	ldr	r0, [pc, #316]	; (8001f60 <main+0x2a8>)
 8001e24:	f008 fde1 	bl	800a9ea <HAL_UART_Transmit>
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001e28:	e056      	b.n	8001ed8 <main+0x220>
	  } else if(inputFlyMode >= 1450 && inputFlyMode <= 1550 && fly_mode != FLY_MODE_ON){
 8001e2a:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <main+0x2b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001e32:	4293      	cmp	r3, r2
 8001e34:	dd23      	ble.n	8001e7e <main+0x1c6>
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <main+0x2b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f240 620e 	movw	r2, #1550	; 0x60e
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	dc1d      	bgt.n	8001e7e <main+0x1c6>
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <main+0x2bc>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d019      	beq.n	8001e7e <main+0x1c6>
		  fly_mode = FLY_MODE_ON;
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <main+0x2bc>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
		  char b = 0x08;
 8001e50:	2308      	movs	r3, #8
 8001e52:	71bb      	strb	r3, [r7, #6]
		  strSize = sprintf((char*)buffer, "M%c#", b);
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	461a      	mov	r2, r3
 8001e58:	494c      	ldr	r1, [pc, #304]	; (8001f8c <main+0x2d4>)
 8001e5a:	4842      	ldr	r0, [pc, #264]	; (8001f64 <main+0x2ac>)
 8001e5c:	f00a f86e 	bl	800bf3c <siprintf>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <main+0x2b4>)
 8001e66:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001e68:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <main+0x2b4>)
 8001e6a:	881a      	ldrh	r2, [r3, #0]
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	493d      	ldr	r1, [pc, #244]	; (8001f64 <main+0x2ac>)
 8001e70:	483b      	ldr	r0, [pc, #236]	; (8001f60 <main+0x2a8>)
 8001e72:	f008 fdba 	bl	800a9ea <HAL_UART_Transmit>
		  HAL_TIM_Base_Start_IT(&htim7);
 8001e76:	4840      	ldr	r0, [pc, #256]	; (8001f78 <main+0x2c0>)
 8001e78:	f007 fbcf 	bl	800961a <HAL_TIM_Base_Start_IT>
	  } else if(inputFlyMode >= 1450 && inputFlyMode <= 1550 && fly_mode != FLY_MODE_ON){
 8001e7c:	e02c      	b.n	8001ed8 <main+0x220>
	  } else if(inputFlyMode >= 1900 && inputFlyMode <= 2000 && fly_mode != FLY_MODE_HOLD){
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <main+0x2b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f240 726b 	movw	r2, #1899	; 0x76b
 8001e86:	4293      	cmp	r3, r2
 8001e88:	dd26      	ble.n	8001ed8 <main+0x220>
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <main+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e92:	dc21      	bgt.n	8001ed8 <main+0x220>
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <main+0x2bc>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d01d      	beq.n	8001ed8 <main+0x220>
		  fly_mode = FLY_MODE_HOLD;
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <main+0x2bc>)
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	701a      	strb	r2, [r3, #0]
		  inputAltitude = sensorAltitude.data;
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <main+0x2d8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <main+0x2dc>)
 8001ea8:	6013      	str	r3, [r2, #0]
		  holdThrottle = inputThrottle;
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <main+0x2e0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <main+0x2e4>)
 8001eb0:	6013      	str	r3, [r2, #0]
		  char c = 0x80;
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	717b      	strb	r3, [r7, #5]
		  strSize = sprintf((char*)buffer, "M%c#", c);
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4934      	ldr	r1, [pc, #208]	; (8001f8c <main+0x2d4>)
 8001ebc:	4829      	ldr	r0, [pc, #164]	; (8001f64 <main+0x2ac>)
 8001ebe:	f00a f83d 	bl	800bf3c <siprintf>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <main+0x2b4>)
 8001ec8:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <main+0x2b4>)
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	230a      	movs	r3, #10
 8001ed0:	4924      	ldr	r1, [pc, #144]	; (8001f64 <main+0x2ac>)
 8001ed2:	4823      	ldr	r0, [pc, #140]	; (8001f60 <main+0x2a8>)
 8001ed4:	f008 fd89 	bl	800a9ea <HAL_UART_Transmit>
	  }
	  getIMUData(&IMU_Data);
 8001ed8:	4831      	ldr	r0, [pc, #196]	; (8001fa0 <main+0x2e8>)
 8001eda:	f001 fd7f 	bl	80039dc <getIMUData>
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 8001ede:	e768      	b.n	8001db2 <main+0xfa>
 8001ee0:	47ae147b 	.word	0x47ae147b
 8001ee4:	3f847ae1 	.word	0x3f847ae1
 8001ee8:	4189374c 	.word	0x4189374c
 8001eec:	3f80e560 	.word	0x3f80e560
 8001ef0:	30553261 	.word	0x30553261
 8001ef4:	3f53a92a 	.word	0x3f53a92a
 8001ef8:	33333333 	.word	0x33333333
 8001efc:	3f933333 	.word	0x3f933333
 8001f00:	c7e28241 	.word	0xc7e28241
 8001f04:	3f76bb98 	.word	0x3f76bb98
 8001f08:	d6388659 	.word	0xd6388659
 8001f0c:	3f946dc5 	.word	0x3f946dc5
 8001f10:	e22e5de1 	.word	0xe22e5de1
 8001f14:	3f9b313b 	.word	0x3f9b313b
	...
 8001f20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f24:	3f60624d 	.word	0x3f60624d
 8001f28:	47ae147b 	.word	0x47ae147b
 8001f2c:	3fb47ae1 	.word	0x3fb47ae1
 8001f30:	b55ef1fe 	.word	0xb55ef1fe
 8001f34:	3f77e132 	.word	0x3f77e132
 8001f38:	5c28f5c3 	.word	0x5c28f5c3
 8001f3c:	3fb5c28f 	.word	0x3fb5c28f
 8001f40:	70a3d70a 	.word	0x70a3d70a
 8001f44:	3fb70a3d 	.word	0x3fb70a3d
 8001f48:	20000cc4 	.word	0x20000cc4
 8001f4c:	20000228 	.word	0x20000228
 8001f50:	20000800 	.word	0x20000800
 8001f54:	20000788 	.word	0x20000788
 8001f58:	2000046c 	.word	0x2000046c
 8001f5c:	20000258 	.word	0x20000258
 8001f60:	2000088c 	.word	0x2000088c
 8001f64:	200008cc 	.word	0x200008cc
 8001f68:	0800ff60 	.word	0x0800ff60
 8001f6c:	20000f04 	.word	0x20000f04
 8001f70:	20000254 	.word	0x20000254
 8001f74:	20000d50 	.word	0x20000d50
 8001f78:	20000e80 	.word	0x20000e80
 8001f7c:	200009f8 	.word	0x200009f8
 8001f80:	20000ee0 	.word	0x20000ee0
 8001f84:	20000250 	.word	0x20000250
 8001f88:	20000ec0 	.word	0x20000ec0
 8001f8c:	0800ff68 	.word	0x0800ff68
 8001f90:	20000994 	.word	0x20000994
 8001f94:	20000e78 	.word	0x20000e78
 8001f98:	200003b8 	.word	0x200003b8
 8001f9c:	20000d4c 	.word	0x20000d4c
 8001fa0:	200006e0 	.word	0x200006e0

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	; 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0320 	add.w	r3, r7, #32
 8001fae:	2230      	movs	r2, #48	; 0x30
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f009 fb5d 	bl	800b672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <SystemClock_Config+0xcc>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <SystemClock_Config+0xcc>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <SystemClock_Config+0xcc>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <SystemClock_Config+0xd0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a21      	ldr	r2, [pc, #132]	; (8002074 <SystemClock_Config+0xd0>)
 8001fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <SystemClock_Config+0xd0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002000:	2302      	movs	r3, #2
 8002002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002004:	2301      	movs	r3, #1
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002008:	2310      	movs	r3, #16
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200c:	2302      	movs	r3, #2
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002010:	2300      	movs	r3, #0
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002014:	2308      	movs	r3, #8
 8002016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002018:	23a8      	movs	r3, #168	; 0xa8
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201c:	2302      	movs	r3, #2
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002020:	2304      	movs	r3, #4
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002024:	f107 0320 	add.w	r3, r7, #32
 8002028:	4618      	mov	r0, r3
 800202a:	f006 fe47 	bl	8008cbc <HAL_RCC_OscConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002034:	f002 fade 	bl	80045f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002038:	230f      	movs	r3, #15
 800203a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002044:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800204a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800204e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	2105      	movs	r1, #5
 8002056:	4618      	mov	r0, r3
 8002058:	f007 f8a0 	bl	800919c <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002062:	f002 fac7 	bl	80045f4 <Error_Handler>
  }
}
 8002066:	bf00      	nop
 8002068:	3750      	adds	r7, #80	; 0x50
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000

08002078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800207e:	463b      	mov	r3, r7
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <MX_ADC1_Init+0xb4>)
 800208c:	4a28      	ldr	r2, [pc, #160]	; (8002130 <MX_ADC1_Init+0xb8>)
 800208e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <MX_ADC1_Init+0xb4>)
 8002092:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002096:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <MX_ADC1_Init+0xb4>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <MX_ADC1_Init+0xb4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <MX_ADC1_Init+0xb4>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <MX_ADC1_Init+0xb4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <MX_ADC1_Init+0xb4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <MX_ADC1_Init+0xb4>)
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <MX_ADC1_Init+0xbc>)
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_ADC1_Init+0xb4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <MX_ADC1_Init+0xb4>)
 80020c6:	2202      	movs	r2, #2
 80020c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_ADC1_Init+0xb4>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_ADC1_Init+0xb4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020d8:	4814      	ldr	r0, [pc, #80]	; (800212c <MX_ADC1_Init+0xb4>)
 80020da:	f003 ff27 	bl	8005f2c <HAL_ADC_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020e4:	f002 fa86 	bl	80045f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80020e8:	230e      	movs	r3, #14
 80020ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020f0:	2307      	movs	r3, #7
 80020f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_ADC1_Init+0xb4>)
 80020fa:	f004 f861 	bl	80061c0 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002104:	f002 fa76 	bl	80045f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002108:	230f      	movs	r3, #15
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800210c:	2302      	movs	r3, #2
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_ADC1_Init+0xb4>)
 8002116:	f004 f853 	bl	80061c0 <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002120:	f002 fa68 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200007b4 	.word	0x200007b4
 8002130:	40012000 	.word	0x40012000
 8002134:	0f000001 	.word	0x0f000001

08002138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_I2C1_Init+0x50>)
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <MX_I2C1_Init+0x54>)
 8002140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_I2C1_Init+0x50>)
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_I2C1_Init+0x58>)
 8002146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_I2C1_Init+0x50>)
 8002156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <MX_I2C1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_I2C1_Init+0x50>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MX_I2C1_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_I2C1_Init+0x50>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <MX_I2C1_Init+0x50>)
 8002176:	f005 f97f 	bl	8007478 <HAL_I2C_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002180:	f002 fa38 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000418 	.word	0x20000418
 800218c:	40005400 	.word	0x40005400
 8002190:	000186a0 	.word	0x000186a0

08002194 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C3_Init+0x50>)
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <MX_I2C3_Init+0x54>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_I2C3_Init+0x58>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_I2C3_Init+0x50>)
 80021d2:	f005 f951 	bl	8007478 <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021dc:	f002 fa0a 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200002c4 	.word	0x200002c4
 80021e8:	40005c00 	.word	0x40005c00
 80021ec:	000186a0 	.word	0x000186a0

080021f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <MX_TIM1_Init+0xa4>)
 800220e:	4a22      	ldr	r2, [pc, #136]	; (8002298 <MX_TIM1_Init+0xa8>)
 8002210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42 - 1;
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <MX_TIM1_Init+0xa4>)
 8002214:	2229      	movs	r2, #41	; 0x29
 8002216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_TIM1_Init+0xa4>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <MX_TIM1_Init+0xa4>)
 8002220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <MX_TIM1_Init+0xa4>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <MX_TIM1_Init+0xa4>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <MX_TIM1_Init+0xa4>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002238:	4816      	ldr	r0, [pc, #88]	; (8002294 <MX_TIM1_Init+0xa4>)
 800223a:	f007 faa7 	bl	800978c <HAL_TIM_IC_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002244:	f002 f9d6 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4619      	mov	r1, r3
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <MX_TIM1_Init+0xa4>)
 8002258:	f008 faea 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002262:	f002 f9c7 	bl	80045f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800226a:	2301      	movs	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_TIM1_Init+0xa4>)
 800227e:	f007 fc21 	bl	8009ac4 <HAL_TIM_IC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002288:	f002 f9b4 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000c84 	.word	0x20000c84
 8002298:	40010000 	.word	0x40010000

0800229c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 0320 	add.w	r3, r7, #32
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022cc:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42 - 1;
 80022d4:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022d6:	2229      	movs	r2, #41	; 0x29
 80022d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80022e0:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022f4:	4836      	ldr	r0, [pc, #216]	; (80023d0 <MX_TIM2_Init+0x134>)
 80022f6:	f007 f941 	bl	800957c <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002300:	f002 f978 	bl	80045f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800230a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230e:	4619      	mov	r1, r3
 8002310:	482f      	ldr	r0, [pc, #188]	; (80023d0 <MX_TIM2_Init+0x134>)
 8002312:	f007 fd39 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800231c:	f002 f96a 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002320:	482b      	ldr	r0, [pc, #172]	; (80023d0 <MX_TIM2_Init+0x134>)
 8002322:	f007 f9c9 	bl	80096b8 <HAL_TIM_PWM_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800232c:	f002 f962 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	4619      	mov	r1, r3
 800233e:	4824      	ldr	r0, [pc, #144]	; (80023d0 <MX_TIM2_Init+0x134>)
 8002340:	f008 fa76 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800234a:	f002 f953 	bl	80045f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234e:	2360      	movs	r3, #96	; 0x60
 8002350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000 - 1;
 8002352:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8002356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	481a      	ldr	r0, [pc, #104]	; (80023d0 <MX_TIM2_Init+0x134>)
 8002368:	f007 fc48 	bl	8009bfc <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002372:	f002 f93f 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2204      	movs	r2, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4814      	ldr	r0, [pc, #80]	; (80023d0 <MX_TIM2_Init+0x134>)
 800237e:	f007 fc3d 	bl	8009bfc <HAL_TIM_PWM_ConfigChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002388:	f002 f934 	bl	80045f4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2208      	movs	r2, #8
 8002394:	4619      	mov	r1, r3
 8002396:	480e      	ldr	r0, [pc, #56]	; (80023d0 <MX_TIM2_Init+0x134>)
 8002398:	f007 fc30 	bl	8009bfc <HAL_TIM_PWM_ConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80023a2:	f002 f927 	bl	80045f4 <Error_Handler>
  }
  sConfigOC.Pulse = 2000 - 1;
 80023a6:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80023aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	220c      	movs	r2, #12
 80023b0:	4619      	mov	r1, r3
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <MX_TIM2_Init+0x134>)
 80023b4:	f007 fc22 	bl	8009bfc <HAL_TIM_PWM_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 80023be:	f002 f919 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023c2:	4803      	ldr	r0, [pc, #12]	; (80023d0 <MX_TIM2_Init+0x134>)
 80023c4:	f003 fa26 	bl	8005814 <HAL_TIM_MspPostInit>

}
 80023c8:	bf00      	nop
 80023ca:	3738      	adds	r7, #56	; 0x38
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000d58 	.word	0x20000d58

080023d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023f2:	463b      	mov	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002400:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <MX_TIM3_Init+0xf4>)
 8002402:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42 - 1;
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002406:	2229      	movs	r2, #41	; 0x29
 8002408:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <MX_TIM3_Init+0xf0>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002410:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002416:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <MX_TIM3_Init+0xf0>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002424:	4827      	ldr	r0, [pc, #156]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002426:	f007 f8a9 	bl	800957c <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002430:	f002 f8e0 	bl	80045f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800243a:	f107 0318 	add.w	r3, r7, #24
 800243e:	4619      	mov	r1, r3
 8002440:	4820      	ldr	r0, [pc, #128]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002442:	f007 fca1 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800244c:	f002 f8d2 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002450:	481c      	ldr	r0, [pc, #112]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002452:	f007 f99b 	bl	800978c <HAL_TIM_IC_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800245c:	f002 f8ca 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	4815      	ldr	r0, [pc, #84]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002470:	f008 f9de 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800247a:	f002 f8bb 	bl	80045f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002482:	2301      	movs	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <MX_TIM3_Init+0xf0>)
 8002496:	f007 fb15 	bl	8009ac4 <HAL_TIM_IC_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80024a0:	f002 f8a8 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024a4:	463b      	mov	r3, r7
 80024a6:	2204      	movs	r2, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_TIM3_Init+0xf0>)
 80024ac:	f007 fb0a 	bl	8009ac4 <HAL_TIM_IC_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80024b6:	f002 f89d 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000748 	.word	0x20000748
 80024c8:	40000400 	.word	0x40000400

080024cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d2:	f107 0318 	add.w	r3, r7, #24
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <MX_TIM4_Init+0xd8>)
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <MX_TIM4_Init+0xdc>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42 - 1;
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <MX_TIM4_Init+0xd8>)
 80024fe:	2229      	movs	r2, #41	; 0x29
 8002500:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <MX_TIM4_Init+0xd8>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <MX_TIM4_Init+0xd8>)
 800250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <MX_TIM4_Init+0xd8>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <MX_TIM4_Init+0xd8>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800251c:	4821      	ldr	r0, [pc, #132]	; (80025a4 <MX_TIM4_Init+0xd8>)
 800251e:	f007 f82d 	bl	800957c <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002528:	f002 f864 	bl	80045f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	4619      	mov	r1, r3
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <MX_TIM4_Init+0xd8>)
 800253a:	f007 fc25 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002544:	f002 f856 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002548:	4816      	ldr	r0, [pc, #88]	; (80025a4 <MX_TIM4_Init+0xd8>)
 800254a:	f007 f91f 	bl	800978c <HAL_TIM_IC_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002554:	f002 f84e 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	4619      	mov	r1, r3
 8002566:	480f      	ldr	r0, [pc, #60]	; (80025a4 <MX_TIM4_Init+0xd8>)
 8002568:	f008 f962 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002572:	f002 f83f 	bl	80045f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002576:	2300      	movs	r3, #0
 8002578:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800257a:	2301      	movs	r3, #1
 800257c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002586:	463b      	mov	r3, r7
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM4_Init+0xd8>)
 800258e:	f007 fa99 	bl	8009ac4 <HAL_TIM_IC_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002598:	f002 f82c 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000318 	.word	0x20000318
 80025a8:	40000800 	.word	0x40000800

080025ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025ca:	463b      	mov	r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025d8:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <MX_TIM5_Init+0xdc>)
 80025da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42 - 1;
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025de:	2229      	movs	r2, #41	; 0x29
 80025e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 80025e8:	4b26      	ldr	r3, [pc, #152]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025fc:	4821      	ldr	r0, [pc, #132]	; (8002684 <MX_TIM5_Init+0xd8>)
 80025fe:	f006 ffbd 	bl	800957c <HAL_TIM_Base_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002608:	f001 fff4 	bl	80045f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002610:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002612:	f107 0318 	add.w	r3, r7, #24
 8002616:	4619      	mov	r1, r3
 8002618:	481a      	ldr	r0, [pc, #104]	; (8002684 <MX_TIM5_Init+0xd8>)
 800261a:	f007 fbb5 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002624:	f001 ffe6 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002628:	4816      	ldr	r0, [pc, #88]	; (8002684 <MX_TIM5_Init+0xd8>)
 800262a:	f007 f8af 	bl	800978c <HAL_TIM_IC_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002634:	f001 ffde 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	480f      	ldr	r0, [pc, #60]	; (8002684 <MX_TIM5_Init+0xd8>)
 8002648:	f008 f8f2 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002652:	f001 ffcf 	bl	80045f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800265a:	2301      	movs	r3, #1
 800265c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002666:	463b      	mov	r3, r7
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_TIM5_Init+0xd8>)
 800266e:	f007 fa29 	bl	8009ac4 <HAL_TIM_IC_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002678:	f001 ffbc 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200006ec 	.word	0x200006ec
 8002688:	40000c00 	.word	0x40000c00

0800268c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002692:	463b      	mov	r3, r7
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_TIM6_Init+0x64>)
 800269c:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <MX_TIM6_Init+0x68>)
 800269e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42 - 1;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026a2:	2229      	movs	r2, #41	; 0x29
 80026a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF;
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026bc:	f006 ff5e 	bl	800957c <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026c6:	f001 ff95 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026d2:	463b      	mov	r3, r7
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026d8:	f008 f8aa 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026e2:	f001 ff87 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000c24 	.word	0x20000c24
 80026f4:	40001000 	.word	0x40001000

080026f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	463b      	mov	r3, r7
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_TIM7_Init+0x64>)
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <MX_TIM7_Init+0x68>)
 800270a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000 - 1;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_TIM7_Init+0x64>)
 800270e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002712:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_TIM7_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_TIM7_Init+0x64>)
 800271c:	220a      	movs	r2, #10
 800271e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_TIM7_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <MX_TIM7_Init+0x64>)
 8002728:	f006 ff28 	bl	800957c <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002732:	f001 ff5f 	bl	80045f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800273e:	463b      	mov	r3, r7
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <MX_TIM7_Init+0x64>)
 8002744:	f008 f874 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800274e:	f001 ff51 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000e80 	.word	0x20000e80
 8002760:	40001400 	.word	0x40001400

08002764 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <MX_TIM9_Init+0xb0>)
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <MX_TIM9_Init+0xb4>)
 8002788:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42 - 1;
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <MX_TIM9_Init+0xb0>)
 800278c:	2229      	movs	r2, #41	; 0x29
 800278e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <MX_TIM9_Init+0xb0>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <MX_TIM9_Init+0xb0>)
 8002798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_TIM9_Init+0xb0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <MX_TIM9_Init+0xb0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80027aa:	481a      	ldr	r0, [pc, #104]	; (8002814 <MX_TIM9_Init+0xb0>)
 80027ac:	f006 fee6 	bl	800957c <HAL_TIM_Base_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 80027b6:	f001 ff1d 	bl	80045f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4619      	mov	r1, r3
 80027c6:	4813      	ldr	r0, [pc, #76]	; (8002814 <MX_TIM9_Init+0xb0>)
 80027c8:	f007 fade 	bl	8009d88 <HAL_TIM_ConfigClockSource>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 80027d2:	f001 ff0f 	bl	80045f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80027d6:	480f      	ldr	r0, [pc, #60]	; (8002814 <MX_TIM9_Init+0xb0>)
 80027d8:	f006 ffd8 	bl	800978c <HAL_TIM_IC_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80027e2:	f001 ff07 	bl	80045f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027e6:	2300      	movs	r3, #0
 80027e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027ea:	2301      	movs	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027f6:	463b      	mov	r3, r7
 80027f8:	2204      	movs	r2, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_TIM9_Init+0xb0>)
 80027fe:	f007 f961 	bl	8009ac4 <HAL_TIM_IC_ConfigChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8002808:	f001 fef4 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000cec 	.word	0x20000cec
 8002818:	40014000 	.word	0x40014000

0800281c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_TIM10_Init+0x40>)
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <MX_TIM10_Init+0x44>)
 8002824:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000 - 1;
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <MX_TIM10_Init+0x40>)
 8002828:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800282c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_TIM10_Init+0x40>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 15 - 1;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_TIM10_Init+0x40>)
 8002836:	220e      	movs	r2, #14
 8002838:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_TIM10_Init+0x40>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_TIM10_Init+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_TIM10_Init+0x40>)
 8002848:	f006 fe98 	bl	800957c <HAL_TIM_Base_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002852:	f001 fecf 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000046c 	.word	0x2000046c
 8002860:	40014400 	.word	0x40014400

08002864 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
 8002878:	615a      	str	r2, [r3, #20]
 800287a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <MX_TIM12_Init+0x84>)
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <MX_TIM12_Init+0x88>)
 8002880:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42-1;
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <MX_TIM12_Init+0x84>)
 8002884:	2229      	movs	r2, #41	; 0x29
 8002886:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <MX_TIM12_Init+0x84>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <MX_TIM12_Init+0x84>)
 8002890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002894:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <MX_TIM12_Init+0x84>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <MX_TIM12_Init+0x84>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028a2:	4811      	ldr	r0, [pc, #68]	; (80028e8 <MX_TIM12_Init+0x84>)
 80028a4:	f006 ff08 	bl	80096b8 <HAL_TIM_PWM_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80028ae:	f001 fea1 	bl	80045f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b2:	2360      	movs	r3, #96	; 0x60
 80028b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7000;
 80028b6:	f641 3358 	movw	r3, #7000	; 0x1b58
 80028ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2200      	movs	r2, #0
 80028c8:	4619      	mov	r1, r3
 80028ca:	4807      	ldr	r0, [pc, #28]	; (80028e8 <MX_TIM12_Init+0x84>)
 80028cc:	f007 f996 	bl	8009bfc <HAL_TIM_PWM_ConfigChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80028d6:	f001 fe8d 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80028da:	4803      	ldr	r0, [pc, #12]	; (80028e8 <MX_TIM12_Init+0x84>)
 80028dc:	f002 ff9a 	bl	8005814 <HAL_TIM_MspPostInit>

}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000e38 	.word	0x20000e38
 80028ec:	40001800 	.word	0x40001800

080028f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_USART1_UART_Init+0x4c>)
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <MX_USART1_UART_Init+0x50>)
 80028f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <MX_USART1_UART_Init+0x4c>)
 80028fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_USART1_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_USART1_UART_Init+0x4c>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_USART1_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_USART1_UART_Init+0x4c>)
 8002916:	220c      	movs	r2, #12
 8002918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_USART1_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_USART1_UART_Init+0x4c>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_USART1_UART_Init+0x4c>)
 8002928:	f008 f812 	bl	800a950 <HAL_UART_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002932:	f001 fe5f 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000088c 	.word	0x2000088c
 8002940:	40011000 	.word	0x40011000

08002944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <MX_USART2_UART_Init+0x50>)
 800294c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800297c:	f007 ffe8 	bl	800a950 <HAL_UART_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002986:	f001 fe35 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000df8 	.word	0x20000df8
 8002994:	40004400 	.word	0x40004400

08002998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_USART3_UART_Init+0x50>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029d0:	f007 ffbe 	bl	800a950 <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029da:	f001 fe0b 	bl	80045f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200003bc 	.word	0x200003bc
 80029e8:	40004800 	.word	0x40004800

080029ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_DMA_Init+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <MX_DMA_Init+0x88>)
 80029fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MX_DMA_Init+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <MX_DMA_Init+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <MX_DMA_Init+0x88>)
 8002a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_DMA_Init+0x88>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	200c      	movs	r0, #12
 8002a30:	f003 ff41 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a34:	200c      	movs	r0, #12
 8002a36:	f003 ff5a 	bl	80068ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2010      	movs	r0, #16
 8002a40:	f003 ff39 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a44:	2010      	movs	r0, #16
 8002a46:	f003 ff52 	bl	80068ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	203a      	movs	r0, #58	; 0x3a
 8002a50:	f003 ff31 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a54:	203a      	movs	r0, #58	; 0x3a
 8002a56:	f003 ff4a 	bl	80068ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	203c      	movs	r0, #60	; 0x3c
 8002a60:	f003 ff29 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002a64:	203c      	movs	r0, #60	; 0x3c
 8002a66:	f003 ff42 	bl	80068ee <HAL_NVIC_EnableIRQ>

}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	4b44      	ldr	r3, [pc, #272]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002a98:	f043 0310 	orr.w	r3, r3, #16
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a3c      	ldr	r2, [pc, #240]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <MX_GPIO_Init+0x12c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2120      	movs	r1, #32
 8002b3a:	481b      	ldr	r0, [pc, #108]	; (8002ba8 <MX_GPIO_Init+0x130>)
 8002b3c:	f004 fc6a 	bl	8007414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b40:	2310      	movs	r3, #16
 8002b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MX_GPIO_Init+0x134>)
 8002b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4815      	ldr	r0, [pc, #84]	; (8002ba8 <MX_GPIO_Init+0x130>)
 8002b54:	f004 fac4 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <MX_GPIO_Init+0x130>)
 8002b70:	f004 fab6 	bl	80070e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_CH6_Pin */
  GPIO_InitStruct.Pin = RC_CH6_Pin;
 8002b74:	2308      	movs	r3, #8
 8002b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <MX_GPIO_Init+0x138>)
 8002b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RC_CH6_GPIO_Port, &GPIO_InitStruct);
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	4619      	mov	r1, r3
 8002b86:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <MX_GPIO_Init+0x13c>)
 8002b88:	f004 faaa 	bl	80070e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2009      	movs	r0, #9
 8002b92:	f003 fe90 	bl	80068b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b96:	2009      	movs	r0, #9
 8002b98:	f003 fea9 	bl	80068ee <HAL_NVIC_EnableIRQ>

}
 8002b9c:	bf00      	nop
 8002b9e:	3730      	adds	r7, #48	; 0x30
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	10310000 	.word	0x10310000
 8002bb4:	40020c00 	.word	0x40020c00

08002bb8 <initPWM_DATA>:

/* USER CODE BEGIN 4 */



void initPWM_DATA(PWM_DATA* pwm_data, TIM_HandleTypeDef *htim, uint32_t channel){
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	pwm_data->onFallingEdge = false;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	765a      	strb	r2, [r3, #25]
	pwm_data->onRisingEdge = true;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	761a      	strb	r2, [r3, #24]
	pwm_data->channel = channel;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]
	pwm_data->htim = htim;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <setPWM>:

void setPWM(TIM_HandleTypeDef htim, uint32_t channel, uint32_t dutyCycle){
 8002be8:	b084      	sub	sp, #16
 8002bea:	b490      	push	{r4, r7}
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	f107 0408 	add.w	r4, r7, #8
 8002bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <setPWM+0x1c>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c02:	e010      	b.n	8002c26 <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 8002c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d103      	bne.n	8002c12 <setPWM+0x2a>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c10:	e009      	b.n	8002c26 <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d103      	bne.n	8002c20 <setPWM+0x38>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c1e:	e002      	b.n	8002c26 <setPWM+0x3e>
	__HAL_TIM_SET_COMPARE(&htim, channel, dutyCycle);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc90      	pop	{r4, r7}
 8002c2c:	b004      	add	sp, #16
 8002c2e:	4770      	bx	lr

08002c30 <ESCInit>:

void ESCInit(){
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b08f      	sub	sp, #60	; 0x3c
 8002c34:	af0e      	add	r7, sp, #56	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002c36:	2100      	movs	r1, #0
 8002c38:	48c2      	ldr	r0, [pc, #776]	; (8002f44 <ESCInit+0x314>)
 8002c3a:	f006 fd69 	bl	8009710 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002c3e:	2104      	movs	r1, #4
 8002c40:	48c0      	ldr	r0, [pc, #768]	; (8002f44 <ESCInit+0x314>)
 8002c42:	f006 fd65 	bl	8009710 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002c46:	2108      	movs	r1, #8
 8002c48:	48be      	ldr	r0, [pc, #760]	; (8002f44 <ESCInit+0x314>)
 8002c4a:	f006 fd61 	bl	8009710 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002c4e:	210c      	movs	r1, #12
 8002c50:	48bc      	ldr	r0, [pc, #752]	; (8002f44 <ESCInit+0x314>)
 8002c52:	f006 fd5d 	bl	8009710 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002c56:	2100      	movs	r1, #0
 8002c58:	48bb      	ldr	r0, [pc, #748]	; (8002f48 <ESCInit+0x318>)
 8002c5a:	f006 fd59 	bl	8009710 <HAL_TIM_PWM_Start>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MAX);
 8002c5e:	4eb9      	ldr	r6, [pc, #740]	; (8002f44 <ESCInit+0x314>)
 8002c60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c64:	930d      	str	r3, [sp, #52]	; 0x34
 8002c66:	2300      	movs	r3, #0
 8002c68:	930c      	str	r3, [sp, #48]	; 0x30
 8002c6a:	466d      	mov	r5, sp
 8002c6c:	f106 0410 	add.w	r4, r6, #16
 8002c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c84:	f7ff ffb0 	bl	8002be8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MAX);
 8002c88:	4eae      	ldr	r6, [pc, #696]	; (8002f44 <ESCInit+0x314>)
 8002c8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8002c90:	2304      	movs	r3, #4
 8002c92:	930c      	str	r3, [sp, #48]	; 0x30
 8002c94:	466d      	mov	r5, sp
 8002c96:	f106 0410 	add.w	r4, r6, #16
 8002c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ca6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002caa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002cae:	f7ff ff9b 	bl	8002be8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MAX);
 8002cb2:	4ea4      	ldr	r6, [pc, #656]	; (8002f44 <ESCInit+0x314>)
 8002cb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8002cba:	2308      	movs	r3, #8
 8002cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8002cbe:	466d      	mov	r5, sp
 8002cc0:	f106 0410 	add.w	r4, r6, #16
 8002cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cd0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cd4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002cd8:	f7ff ff86 	bl	8002be8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MAX);
 8002cdc:	4e99      	ldr	r6, [pc, #612]	; (8002f44 <ESCInit+0x314>)
 8002cde:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8002ce8:	466d      	mov	r5, sp
 8002cea:	f106 0410 	add.w	r4, r6, #16
 8002cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cfe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d02:	f7ff ff71 	bl	8002be8 <setPWM>
	setPWM(htim12, TIM_CHANNEL_1, ESC_PWM_MAX);
 8002d06:	4e90      	ldr	r6, [pc, #576]	; (8002f48 <ESCInit+0x318>)
 8002d08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8002d0e:	2300      	movs	r3, #0
 8002d10:	930c      	str	r3, [sp, #48]	; 0x30
 8002d12:	466d      	mov	r5, sp
 8002d14:	f106 0410 	add.w	r4, r6, #16
 8002d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d28:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d2c:	f7ff ff5c 	bl	8002be8 <setPWM>
	setPWM(htim12, TIM_CHANNEL_1, 1800);
 8002d30:	4e85      	ldr	r6, [pc, #532]	; (8002f48 <ESCInit+0x318>)
 8002d32:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002d36:	930d      	str	r3, [sp, #52]	; 0x34
 8002d38:	2300      	movs	r3, #0
 8002d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8002d3c:	466d      	mov	r5, sp
 8002d3e:	f106 0410 	add.w	r4, r6, #16
 8002d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d56:	f7ff ff47 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002d5a:	20c8      	movs	r0, #200	; 0xc8
 8002d5c:	f003 f8c4 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8002d60:	4e79      	ldr	r6, [pc, #484]	; (8002f48 <ESCInit+0x318>)
 8002d62:	2300      	movs	r3, #0
 8002d64:	930d      	str	r3, [sp, #52]	; 0x34
 8002d66:	2300      	movs	r3, #0
 8002d68:	930c      	str	r3, [sp, #48]	; 0x30
 8002d6a:	466d      	mov	r5, sp
 8002d6c:	f106 0410 	add.w	r4, r6, #16
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d84:	f7ff ff30 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8002d88:	2032      	movs	r0, #50	; 0x32
 8002d8a:	f003 f8ad 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 900);
 8002d8e:	4e6e      	ldr	r6, [pc, #440]	; (8002f48 <ESCInit+0x318>)
 8002d90:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002d94:	930d      	str	r3, [sp, #52]	; 0x34
 8002d96:	2300      	movs	r3, #0
 8002d98:	930c      	str	r3, [sp, #48]	; 0x30
 8002d9a:	466d      	mov	r5, sp
 8002d9c:	f106 0410 	add.w	r4, r6, #16
 8002da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002db0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002db4:	f7ff ff18 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002db8:	20c8      	movs	r0, #200	; 0xc8
 8002dba:	f003 f895 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 800);
 8002dbe:	4e62      	ldr	r6, [pc, #392]	; (8002f48 <ESCInit+0x318>)
 8002dc0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8002dca:	466d      	mov	r5, sp
 8002dcc:	f106 0410 	add.w	r4, r6, #16
 8002dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ddc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002de0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002de4:	f7ff ff00 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002de8:	20c8      	movs	r0, #200	; 0xc8
 8002dea:	f003 f87d 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8002dee:	4e56      	ldr	r6, [pc, #344]	; (8002f48 <ESCInit+0x318>)
 8002df0:	2300      	movs	r3, #0
 8002df2:	930d      	str	r3, [sp, #52]	; 0x34
 8002df4:	2300      	movs	r3, #0
 8002df6:	930c      	str	r3, [sp, #48]	; 0x30
 8002df8:	466d      	mov	r5, sp
 8002dfa:	f106 0410 	add.w	r4, r6, #16
 8002dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e0e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002e12:	f7ff fee9 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8002e16:	2032      	movs	r0, #50	; 0x32
 8002e18:	f003 f866 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 1200);
 8002e1c:	4e4a      	ldr	r6, [pc, #296]	; (8002f48 <ESCInit+0x318>)
 8002e1e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002e22:	930d      	str	r3, [sp, #52]	; 0x34
 8002e24:	2300      	movs	r3, #0
 8002e26:	930c      	str	r3, [sp, #48]	; 0x30
 8002e28:	466d      	mov	r5, sp
 8002e2a:	f106 0410 	add.w	r4, r6, #16
 8002e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002e42:	f7ff fed1 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002e46:	20c8      	movs	r0, #200	; 0xc8
 8002e48:	f003 f84e 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8002e4c:	4e3e      	ldr	r6, [pc, #248]	; (8002f48 <ESCInit+0x318>)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	930d      	str	r3, [sp, #52]	; 0x34
 8002e52:	2300      	movs	r3, #0
 8002e54:	930c      	str	r3, [sp, #48]	; 0x30
 8002e56:	466d      	mov	r5, sp
 8002e58:	f106 0410 	add.w	r4, r6, #16
 8002e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e6c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002e70:	f7ff feba 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8002e74:	2032      	movs	r0, #50	; 0x32
 8002e76:	f003 f837 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 900);
 8002e7a:	4e33      	ldr	r6, [pc, #204]	; (8002f48 <ESCInit+0x318>)
 8002e7c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002e80:	930d      	str	r3, [sp, #52]	; 0x34
 8002e82:	2300      	movs	r3, #0
 8002e84:	930c      	str	r3, [sp, #48]	; 0x30
 8002e86:	466d      	mov	r5, sp
 8002e88:	f106 0410 	add.w	r4, r6, #16
 8002e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ea0:	f7ff fea2 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002ea4:	20c8      	movs	r0, #200	; 0xc8
 8002ea6:	f003 f81f 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 800);
 8002eaa:	4e27      	ldr	r6, [pc, #156]	; (8002f48 <ESCInit+0x318>)
 8002eac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002eb0:	930d      	str	r3, [sp, #52]	; 0x34
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8002eb6:	466d      	mov	r5, sp
 8002eb8:	f106 0410 	add.w	r4, r6, #16
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ec8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002ecc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ed0:	f7ff fe8a 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002ed4:	20c8      	movs	r0, #200	; 0xc8
 8002ed6:	f003 f807 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8002eda:	4e1b      	ldr	r6, [pc, #108]	; (8002f48 <ESCInit+0x318>)
 8002edc:	2300      	movs	r3, #0
 8002ede:	930d      	str	r3, [sp, #52]	; 0x34
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ee4:	466d      	mov	r5, sp
 8002ee6:	f106 0410 	add.w	r4, r6, #16
 8002eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ef6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002efa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002efe:	f7ff fe73 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	f002 fff0 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8002f08:	4e0f      	ldr	r6, [pc, #60]	; (8002f48 <ESCInit+0x318>)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f0e:	2300      	movs	r3, #0
 8002f10:	930c      	str	r3, [sp, #48]	; 0x30
 8002f12:	466d      	mov	r5, sp
 8002f14:	f106 0410 	add.w	r4, r6, #16
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f28:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f2c:	f7ff fe5c 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8002f30:	2032      	movs	r0, #50	; 0x32
 8002f32:	f002 ffd9 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 1200);
 8002f36:	4e04      	ldr	r6, [pc, #16]	; (8002f48 <ESCInit+0x318>)
 8002f38:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e004      	b.n	8002f4c <ESCInit+0x31c>
 8002f42:	bf00      	nop
 8002f44:	20000d58 	.word	0x20000d58
 8002f48:	20000e38 	.word	0x20000e38
 8002f4c:	930c      	str	r3, [sp, #48]	; 0x30
 8002f4e:	466d      	mov	r5, sp
 8002f50:	f106 0410 	add.w	r4, r6, #16
 8002f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f60:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f64:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f68:	f7ff fe3e 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002f6c:	20c8      	movs	r0, #200	; 0xc8
 8002f6e:	f002 ffbb 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 2000);
 8002f72:	4eae      	ldr	r6, [pc, #696]	; (800322c <ESCInit+0x5fc>)
 8002f74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f78:	930d      	str	r3, [sp, #52]	; 0x34
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8002f7e:	466d      	mov	r5, sp
 8002f80:	f106 0410 	add.w	r4, r6, #16
 8002f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f98:	f7ff fe26 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8002f9c:	20c8      	movs	r0, #200	; 0xc8
 8002f9e:	f002 ffa3 	bl	8005ee8 <HAL_Delay>
	setPWM(htim2, TIM_CHANNEL_1, ESC_PWM_MIN);
 8002fa2:	4ea3      	ldr	r6, [pc, #652]	; (8003230 <ESCInit+0x600>)
 8002fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa8:	930d      	str	r3, [sp, #52]	; 0x34
 8002faa:	2300      	movs	r3, #0
 8002fac:	930c      	str	r3, [sp, #48]	; 0x30
 8002fae:	466d      	mov	r5, sp
 8002fb0:	f106 0410 	add.w	r4, r6, #16
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fc0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002fc4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fc8:	f7ff fe0e 	bl	8002be8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_2, ESC_PWM_MIN);
 8002fcc:	4e98      	ldr	r6, [pc, #608]	; (8003230 <ESCInit+0x600>)
 8002fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8002fd8:	466d      	mov	r5, sp
 8002fda:	f106 0410 	add.w	r4, r6, #16
 8002fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002fee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ff2:	f7ff fdf9 	bl	8002be8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MIN);
 8002ff6:	4e8e      	ldr	r6, [pc, #568]	; (8003230 <ESCInit+0x600>)
 8002ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffc:	930d      	str	r3, [sp, #52]	; 0x34
 8002ffe:	2308      	movs	r3, #8
 8003000:	930c      	str	r3, [sp, #48]	; 0x30
 8003002:	466d      	mov	r5, sp
 8003004:	f106 0410 	add.w	r4, r6, #16
 8003008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003014:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003018:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800301c:	f7ff fde4 	bl	8002be8 <setPWM>
	setPWM(htim2, TIM_CHANNEL_4, ESC_PWM_MIN);
 8003020:	4e83      	ldr	r6, [pc, #524]	; (8003230 <ESCInit+0x600>)
 8003022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003026:	930d      	str	r3, [sp, #52]	; 0x34
 8003028:	230c      	movs	r3, #12
 800302a:	930c      	str	r3, [sp, #48]	; 0x30
 800302c:	466d      	mov	r5, sp
 800302e:	f106 0410 	add.w	r4, r6, #16
 8003032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800303e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003042:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003046:	f7ff fdcf 	bl	8002be8 <setPWM>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 800304a:	4e78      	ldr	r6, [pc, #480]	; (800322c <ESCInit+0x5fc>)
 800304c:	2300      	movs	r3, #0
 800304e:	930d      	str	r3, [sp, #52]	; 0x34
 8003050:	2300      	movs	r3, #0
 8003052:	930c      	str	r3, [sp, #48]	; 0x30
 8003054:	466d      	mov	r5, sp
 8003056:	f106 0410 	add.w	r4, r6, #16
 800305a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800305c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003062:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003066:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800306a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800306e:	f7ff fdbb 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8003072:	2032      	movs	r0, #50	; 0x32
 8003074:	f002 ff38 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 900);
 8003078:	4e6c      	ldr	r6, [pc, #432]	; (800322c <ESCInit+0x5fc>)
 800307a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800307e:	930d      	str	r3, [sp, #52]	; 0x34
 8003080:	2300      	movs	r3, #0
 8003082:	930c      	str	r3, [sp, #48]	; 0x30
 8003084:	466d      	mov	r5, sp
 8003086:	f106 0410 	add.w	r4, r6, #16
 800308a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003092:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003096:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800309a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800309e:	f7ff fda3 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 80030a2:	20c8      	movs	r0, #200	; 0xc8
 80030a4:	f002 ff20 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 80030a8:	4e60      	ldr	r6, [pc, #384]	; (800322c <ESCInit+0x5fc>)
 80030aa:	2300      	movs	r3, #0
 80030ac:	930d      	str	r3, [sp, #52]	; 0x34
 80030ae:	2300      	movs	r3, #0
 80030b0:	930c      	str	r3, [sp, #48]	; 0x30
 80030b2:	466d      	mov	r5, sp
 80030b4:	f106 0410 	add.w	r4, r6, #16
 80030b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030cc:	f7ff fd8c 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 80030d0:	2032      	movs	r0, #50	; 0x32
 80030d2:	f002 ff09 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 1800);
 80030d6:	4e55      	ldr	r6, [pc, #340]	; (800322c <ESCInit+0x5fc>)
 80030d8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80030dc:	930d      	str	r3, [sp, #52]	; 0x34
 80030de:	2300      	movs	r3, #0
 80030e0:	930c      	str	r3, [sp, #48]	; 0x30
 80030e2:	466d      	mov	r5, sp
 80030e4:	f106 0410 	add.w	r4, r6, #16
 80030e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030fc:	f7ff fd74 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 8003100:	20c8      	movs	r0, #200	; 0xc8
 8003102:	f002 fef1 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8003106:	4e49      	ldr	r6, [pc, #292]	; (800322c <ESCInit+0x5fc>)
 8003108:	2300      	movs	r3, #0
 800310a:	930d      	str	r3, [sp, #52]	; 0x34
 800310c:	2300      	movs	r3, #0
 800310e:	930c      	str	r3, [sp, #48]	; 0x30
 8003110:	466d      	mov	r5, sp
 8003112:	f106 0410 	add.w	r4, r6, #16
 8003116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003122:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003126:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800312a:	f7ff fd5d 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 800312e:	2032      	movs	r0, #50	; 0x32
 8003130:	f002 feda 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 900);
 8003134:	4e3d      	ldr	r6, [pc, #244]	; (800322c <ESCInit+0x5fc>)
 8003136:	f44f 7361 	mov.w	r3, #900	; 0x384
 800313a:	930d      	str	r3, [sp, #52]	; 0x34
 800313c:	2300      	movs	r3, #0
 800313e:	930c      	str	r3, [sp, #48]	; 0x30
 8003140:	466d      	mov	r5, sp
 8003142:	f106 0410 	add.w	r4, r6, #16
 8003146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003152:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003156:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800315a:	f7ff fd45 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 800315e:	20c8      	movs	r0, #200	; 0xc8
 8003160:	f002 fec2 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 800);
 8003164:	4e31      	ldr	r6, [pc, #196]	; (800322c <ESCInit+0x5fc>)
 8003166:	f44f 7348 	mov.w	r3, #800	; 0x320
 800316a:	930d      	str	r3, [sp, #52]	; 0x34
 800316c:	2300      	movs	r3, #0
 800316e:	930c      	str	r3, [sp, #48]	; 0x30
 8003170:	466d      	mov	r5, sp
 8003172:	f106 0410 	add.w	r4, r6, #16
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800317c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003182:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003186:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800318a:	f7ff fd2d 	bl	8002be8 <setPWM>
	HAL_Delay(200);
 800318e:	20c8      	movs	r0, #200	; 0xc8
 8003190:	f002 feaa 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8003194:	4e25      	ldr	r6, [pc, #148]	; (800322c <ESCInit+0x5fc>)
 8003196:	2300      	movs	r3, #0
 8003198:	930d      	str	r3, [sp, #52]	; 0x34
 800319a:	2300      	movs	r3, #0
 800319c:	930c      	str	r3, [sp, #48]	; 0x30
 800319e:	466d      	mov	r5, sp
 80031a0:	f106 0410 	add.w	r4, r6, #16
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80031b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031b8:	f7ff fd16 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 80031bc:	2032      	movs	r0, #50	; 0x32
 80031be:	f002 fe93 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 2000);
 80031c2:	4e1a      	ldr	r6, [pc, #104]	; (800322c <ESCInit+0x5fc>)
 80031c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031c8:	930d      	str	r3, [sp, #52]	; 0x34
 80031ca:	2300      	movs	r3, #0
 80031cc:	930c      	str	r3, [sp, #48]	; 0x30
 80031ce:	466d      	mov	r5, sp
 80031d0:	f106 0410 	add.w	r4, r6, #16
 80031d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80031e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031e8:	f7ff fcfe 	bl	8002be8 <setPWM>
	HAL_Delay(1000);
 80031ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031f0:	f002 fe7a 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 80031f4:	4e0d      	ldr	r6, [pc, #52]	; (800322c <ESCInit+0x5fc>)
 80031f6:	2300      	movs	r3, #0
 80031f8:	930d      	str	r3, [sp, #52]	; 0x34
 80031fa:	2300      	movs	r3, #0
 80031fc:	930c      	str	r3, [sp, #48]	; 0x30
 80031fe:	466d      	mov	r5, sp
 8003200:	f106 0410 	add.w	r4, r6, #16
 8003204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003210:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003214:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003218:	f7ff fce6 	bl	8002be8 <setPWM>
	HAL_Delay(500);
 800321c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003220:	f002 fe62 	bl	8005ee8 <HAL_Delay>
}
 8003224:	bf00      	nop
 8003226:	3704      	adds	r7, #4
 8003228:	46bd      	mov	sp, r7
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322c:	20000e38 	.word	0x20000e38
 8003230:	20000d58 	.word	0x20000d58

08003234 <BMPInit>:

void BMPInit(){
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	b095      	sub	sp, #84	; 0x54
 8003238:	af0e      	add	r7, sp, #56	; 0x38
	bmp280_init_default_params(&bmp280.params);
 800323a:	486b      	ldr	r0, [pc, #428]	; (80033e8 <BMPInit+0x1b4>)
 800323c:	f7fe f803 	bl	8001246 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <BMPInit+0x1b8>)
 8003242:	2276      	movs	r2, #118	; 0x76
 8003244:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8003246:	4b69      	ldr	r3, [pc, #420]	; (80033ec <BMPInit+0x1b8>)
 8003248:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <BMPInit+0x1bc>)
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!bmp280_init(&bmp280, &bmp280.params)){
 800324c:	e020      	b.n	8003290 <BMPInit+0x5c>
		strSize = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <BMPInit+0x1c0>)
 8003250:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <BMPInit+0x1c4>)
 8003252:	4615      	mov	r5, r2
 8003254:	461c      	mov	r4, r3
 8003256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003258:	6028      	str	r0, [r5, #0]
 800325a:	6069      	str	r1, [r5, #4]
 800325c:	60aa      	str	r2, [r5, #8]
 800325e:	60eb      	str	r3, [r5, #12]
 8003260:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003262:	6128      	str	r0, [r5, #16]
 8003264:	6169      	str	r1, [r5, #20]
 8003266:	61aa      	str	r2, [r5, #24]
 8003268:	8823      	ldrh	r3, [r4, #0]
 800326a:	78a2      	ldrb	r2, [r4, #2]
 800326c:	83ab      	strh	r3, [r5, #28]
 800326e:	4613      	mov	r3, r2
 8003270:	77ab      	strb	r3, [r5, #30]
 8003272:	231e      	movs	r3, #30
 8003274:	b29a      	uxth	r2, r3
 8003276:	4b61      	ldr	r3, [pc, #388]	; (80033fc <BMPInit+0x1c8>)
 8003278:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 800327a:	4b60      	ldr	r3, [pc, #384]	; (80033fc <BMPInit+0x1c8>)
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003282:	495c      	ldr	r1, [pc, #368]	; (80033f4 <BMPInit+0x1c0>)
 8003284:	485e      	ldr	r0, [pc, #376]	; (8003400 <BMPInit+0x1cc>)
 8003286:	f007 fbb0 	bl	800a9ea <HAL_UART_Transmit>
		HAL_Delay(50);
 800328a:	2032      	movs	r0, #50	; 0x32
 800328c:	f002 fe2c 	bl	8005ee8 <HAL_Delay>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 8003290:	4955      	ldr	r1, [pc, #340]	; (80033e8 <BMPInit+0x1b4>)
 8003292:	4856      	ldr	r0, [pc, #344]	; (80033ec <BMPInit+0x1b8>)
 8003294:	f7fe f952 	bl	800153c <bmp280_init>
 8003298:	4603      	mov	r3, r0
 800329a:	f083 0301 	eor.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1d4      	bne.n	800324e <BMPInit+0x1a>
	}
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80032a4:	2100      	movs	r1, #0
 80032a6:	4857      	ldr	r0, [pc, #348]	; (8003404 <BMPInit+0x1d0>)
 80032a8:	f006 fa32 	bl	8009710 <HAL_TIM_PWM_Start>
	setPWM(htim12, TIM_CHANNEL_1, 600);
 80032ac:	4e55      	ldr	r6, [pc, #340]	; (8003404 <BMPInit+0x1d0>)
 80032ae:	f44f 7316 	mov.w	r3, #600	; 0x258
 80032b2:	930d      	str	r3, [sp, #52]	; 0x34
 80032b4:	2300      	movs	r3, #0
 80032b6:	930c      	str	r3, [sp, #48]	; 0x30
 80032b8:	466d      	mov	r5, sp
 80032ba:	f106 0410 	add.w	r4, r6, #16
 80032be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80032ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032d2:	f7ff fc89 	bl	8002be8 <setPWM>
	HAL_Delay(450);
 80032d6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80032da:	f002 fe05 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 80032de:	4e49      	ldr	r6, [pc, #292]	; (8003404 <BMPInit+0x1d0>)
 80032e0:	2300      	movs	r3, #0
 80032e2:	930d      	str	r3, [sp, #52]	; 0x34
 80032e4:	2300      	movs	r3, #0
 80032e6:	930c      	str	r3, [sp, #48]	; 0x30
 80032e8:	466d      	mov	r5, sp
 80032ea:	f106 0410 	add.w	r4, r6, #16
 80032ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80032fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003302:	f7ff fc71 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8003306:	2032      	movs	r0, #50	; 0x32
 8003308:	f002 fdee 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 900);
 800330c:	4e3d      	ldr	r6, [pc, #244]	; (8003404 <BMPInit+0x1d0>)
 800330e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003312:	930d      	str	r3, [sp, #52]	; 0x34
 8003314:	2300      	movs	r3, #0
 8003316:	930c      	str	r3, [sp, #48]	; 0x30
 8003318:	466d      	mov	r5, sp
 800331a:	f106 0410 	add.w	r4, r6, #16
 800331e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003326:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800332a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800332e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003332:	f7ff fc59 	bl	8002be8 <setPWM>
	HAL_Delay(450);
 8003336:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800333a:	f002 fdd5 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 800333e:	4e31      	ldr	r6, [pc, #196]	; (8003404 <BMPInit+0x1d0>)
 8003340:	2300      	movs	r3, #0
 8003342:	930d      	str	r3, [sp, #52]	; 0x34
 8003344:	2300      	movs	r3, #0
 8003346:	930c      	str	r3, [sp, #48]	; 0x30
 8003348:	466d      	mov	r5, sp
 800334a:	f106 0410 	add.w	r4, r6, #16
 800334e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003356:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800335a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800335e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003362:	f7ff fc41 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8003366:	2032      	movs	r0, #50	; 0x32
 8003368:	f002 fdbe 	bl	8005ee8 <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <BMPInit+0x1b8>)
 800336e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003372:	2b60      	cmp	r3, #96	; 0x60
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <BMPInit+0x1d4>)
 800337e:	701a      	strb	r2, [r3, #0]
	strSize = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <BMPInit+0x1d4>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <BMPInit+0x158>
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <BMPInit+0x1d8>)
 800338a:	e000      	b.n	800338e <BMPInit+0x15a>
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <BMPInit+0x1dc>)
 800338e:	461a      	mov	r2, r3
 8003390:	4920      	ldr	r1, [pc, #128]	; (8003414 <BMPInit+0x1e0>)
 8003392:	4818      	ldr	r0, [pc, #96]	; (80033f4 <BMPInit+0x1c0>)
 8003394:	f008 fdd2 	bl	800bf3c <siprintf>
 8003398:	4603      	mov	r3, r0
 800339a:	b29a      	uxth	r2, r3
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <BMPInit+0x1c8>)
 800339e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 1000);
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <BMPInit+0x1c8>)
 80033a2:	881a      	ldrh	r2, [r3, #0]
 80033a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a8:	4912      	ldr	r1, [pc, #72]	; (80033f4 <BMPInit+0x1c0>)
 80033aa:	4815      	ldr	r0, [pc, #84]	; (8003400 <BMPInit+0x1cc>)
 80033ac:	f007 fb1d 	bl	800a9ea <HAL_UART_Transmit>

	strSize = sprintf((char*)buffer, "Calibrating.\r\n");
 80033b0:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <BMPInit+0x1c0>)
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <BMPInit+0x1e4>)
 80033b4:	4614      	mov	r4, r2
 80033b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80033b8:	6020      	str	r0, [r4, #0]
 80033ba:	6061      	str	r1, [r4, #4]
 80033bc:	60a2      	str	r2, [r4, #8]
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	789b      	ldrb	r3, [r3, #2]
 80033c2:	81a2      	strh	r2, [r4, #12]
 80033c4:	73a3      	strb	r3, [r4, #14]
 80033c6:	230e      	movs	r3, #14
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <BMPInit+0x1c8>)
 80033cc:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <BMPInit+0x1c8>)
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	230a      	movs	r3, #10
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <BMPInit+0x1c0>)
 80033d6:	480a      	ldr	r0, [pc, #40]	; (8003400 <BMPInit+0x1cc>)
 80033d8:	f007 fb07 	bl	800a9ea <HAL_UART_Transmit>

	float pres_total = 0;
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
	float pressure, temperature, humidity;

	for(int i = 0; i < 100; ++i){
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	e039      	b.n	800345c <BMPInit+0x228>
 80033e8:	20000df0 	.word	0x20000df0
 80033ec:	20000dc4 	.word	0x20000dc4
 80033f0:	20000418 	.word	0x20000418
 80033f4:	200008cc 	.word	0x200008cc
 80033f8:	0800ff70 	.word	0x0800ff70
 80033fc:	20000f04 	.word	0x20000f04
 8003400:	2000088c 	.word	0x2000088c
 8003404:	20000e38 	.word	0x20000e38
 8003408:	200007b0 	.word	0x200007b0
 800340c:	0800ff90 	.word	0x0800ff90
 8003410:	0800ff98 	.word	0x0800ff98
 8003414:	0800ffa0 	.word	0x0800ffa0
 8003418:	0800ffb4 	.word	0x0800ffb4
		while(bmp280_is_measuring(&bmp280)) continue;
 800341c:	bf00      	nop
 800341e:	4854      	ldr	r0, [pc, #336]	; (8003570 <BMPInit+0x33c>)
 8003420:	f7fe f939 	bl	8001696 <bmp280_is_measuring>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f8      	bne.n	800341c <BMPInit+0x1e8>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	f107 020c 	add.w	r2, r7, #12
 8003430:	f107 0108 	add.w	r1, r7, #8
 8003434:	484e      	ldr	r0, [pc, #312]	; (8003570 <BMPInit+0x33c>)
 8003436:	f7fe fbf1 	bl	8001c1c <bmp280_read_float>
		HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, 10);
 800343a:	230a      	movs	r3, #10
 800343c:	2201      	movs	r2, #1
 800343e:	494d      	ldr	r1, [pc, #308]	; (8003574 <BMPInit+0x340>)
 8003440:	484d      	ldr	r0, [pc, #308]	; (8003578 <BMPInit+0x344>)
 8003442:	f007 fad2 	bl	800a9ea <HAL_UART_Transmit>
		pres_total = pres_total + pressure;
 8003446:	edd7 7a03 	vldr	s15, [r7, #12]
 800344a:	ed97 7a05 	vldr	s14, [r7, #20]
 800344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003452:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < 100; ++i){
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3301      	adds	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b63      	cmp	r3, #99	; 0x63
 8003460:	dddd      	ble.n	800341e <BMPInit+0x1ea>
	}

	pressureRef = pres_total / 100;
 8003462:	ed97 7a05 	vldr	s14, [r7, #20]
 8003466:	eddf 6a45 	vldr	s13, [pc, #276]	; 800357c <BMPInit+0x348>
 800346a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800346e:	4b44      	ldr	r3, [pc, #272]	; (8003580 <BMPInit+0x34c>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
	strSize = sprintf((char*)buffer,"Done!\r\n");
 8003474:	4a43      	ldr	r2, [pc, #268]	; (8003584 <BMPInit+0x350>)
 8003476:	4b44      	ldr	r3, [pc, #272]	; (8003588 <BMPInit+0x354>)
 8003478:	cb03      	ldmia	r3!, {r0, r1}
 800347a:	6010      	str	r0, [r2, #0]
 800347c:	6051      	str	r1, [r2, #4]
 800347e:	2307      	movs	r3, #7
 8003480:	b29a      	uxth	r2, r3
 8003482:	4b42      	ldr	r3, [pc, #264]	; (800358c <BMPInit+0x358>)
 8003484:	801a      	strh	r2, [r3, #0]
	kalman_init(&kalman_altitude, 0.12, 0.12, 0.055);
 8003486:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8003590 <BMPInit+0x35c>
 800348a:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003594 <BMPInit+0x360>
 800348e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003594 <BMPInit+0x360>
 8003492:	4841      	ldr	r0, [pc, #260]	; (8003598 <BMPInit+0x364>)
 8003494:	f7fd febe 	bl	8001214 <kalman_init>
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8003498:	4b3c      	ldr	r3, [pc, #240]	; (800358c <BMPInit+0x358>)
 800349a:	881a      	ldrh	r2, [r3, #0]
 800349c:	230a      	movs	r3, #10
 800349e:	4939      	ldr	r1, [pc, #228]	; (8003584 <BMPInit+0x350>)
 80034a0:	4835      	ldr	r0, [pc, #212]	; (8003578 <BMPInit+0x344>)
 80034a2:	f007 faa2 	bl	800a9ea <HAL_UART_Transmit>
	setPWM(htim12, TIM_CHANNEL_1, 600);
 80034a6:	4e3d      	ldr	r6, [pc, #244]	; (800359c <BMPInit+0x368>)
 80034a8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80034ac:	930d      	str	r3, [sp, #52]	; 0x34
 80034ae:	2300      	movs	r3, #0
 80034b0:	930c      	str	r3, [sp, #48]	; 0x30
 80034b2:	466d      	mov	r5, sp
 80034b4:	f106 0410 	add.w	r4, r6, #16
 80034b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034cc:	f7ff fb8c 	bl	8002be8 <setPWM>
	HAL_Delay(450);
 80034d0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80034d4:	f002 fd08 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 80034d8:	4e30      	ldr	r6, [pc, #192]	; (800359c <BMPInit+0x368>)
 80034da:	2300      	movs	r3, #0
 80034dc:	930d      	str	r3, [sp, #52]	; 0x34
 80034de:	2300      	movs	r3, #0
 80034e0:	930c      	str	r3, [sp, #48]	; 0x30
 80034e2:	466d      	mov	r5, sp
 80034e4:	f106 0410 	add.w	r4, r6, #16
 80034e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80034fc:	f7ff fb74 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8003500:	2032      	movs	r0, #50	; 0x32
 8003502:	f002 fcf1 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 900);
 8003506:	4e25      	ldr	r6, [pc, #148]	; (800359c <BMPInit+0x368>)
 8003508:	f44f 7361 	mov.w	r3, #900	; 0x384
 800350c:	930d      	str	r3, [sp, #52]	; 0x34
 800350e:	2300      	movs	r3, #0
 8003510:	930c      	str	r3, [sp, #48]	; 0x30
 8003512:	466d      	mov	r5, sp
 8003514:	f106 0410 	add.w	r4, r6, #16
 8003518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003520:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003524:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003528:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800352c:	f7ff fb5c 	bl	8002be8 <setPWM>
	HAL_Delay(450);
 8003530:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8003534:	f002 fcd8 	bl	8005ee8 <HAL_Delay>
	setPWM(htim12, TIM_CHANNEL_1, 0);
 8003538:	4e18      	ldr	r6, [pc, #96]	; (800359c <BMPInit+0x368>)
 800353a:	2300      	movs	r3, #0
 800353c:	930d      	str	r3, [sp, #52]	; 0x34
 800353e:	2300      	movs	r3, #0
 8003540:	930c      	str	r3, [sp, #48]	; 0x30
 8003542:	466d      	mov	r5, sp
 8003544:	f106 0410 	add.w	r4, r6, #16
 8003548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003550:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003554:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003558:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800355c:	f7ff fb44 	bl	8002be8 <setPWM>
	HAL_Delay(50);
 8003560:	2032      	movs	r0, #50	; 0x32
 8003562:	f002 fcc1 	bl	8005ee8 <HAL_Delay>
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356e:	bf00      	nop
 8003570:	20000dc4 	.word	0x20000dc4
 8003574:	0800ffc4 	.word	0x0800ffc4
 8003578:	2000088c 	.word	0x2000088c
 800357c:	42c80000 	.word	0x42c80000
 8003580:	2000020c 	.word	0x2000020c
 8003584:	200008cc 	.word	0x200008cc
 8003588:	0800ffc8 	.word	0x0800ffc8
 800358c:	20000f04 	.word	0x20000f04
 8003590:	3d6147ae 	.word	0x3d6147ae
 8003594:	3df5c28f 	.word	0x3df5c28f
 8003598:	200006c0 	.word	0x200006c0
 800359c:	20000e38 	.word	0x20000e38

080035a0 <GPSInit>:

void GPSInit(){
 80035a0:	b598      	push	{r3, r4, r7, lr}
 80035a2:	af00      	add	r7, sp, #0
	  //__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);

	  if(HAL_UART_Receive_DMA(&huart3, gps_rx_buf, GPS_BUF_SIZE) != HAL_OK){
 80035a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035a8:	4913      	ldr	r1, [pc, #76]	; (80035f8 <GPSInit+0x58>)
 80035aa:	4814      	ldr	r0, [pc, #80]	; (80035fc <GPSInit+0x5c>)
 80035ac:	f007 fab6 	bl	800ab1c <HAL_UART_Receive_DMA>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <GPSInit+0x1a>
		  Error_Handler();
 80035b6:	f001 f81d 	bl	80045f4 <Error_Handler>
	  }

	  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <GPSInit+0x5c>)
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <GPSInit+0x5c>)
 80035c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0208 	bic.w	r2, r2, #8
 80035cc:	601a      	str	r2, [r3, #0]

	  strSize = sprintf((char*)buffer, "GPS Done!\r\n");
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <GPSInit+0x60>)
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <GPSInit+0x64>)
 80035d2:	4614      	mov	r4, r2
 80035d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035d6:	6020      	str	r0, [r4, #0]
 80035d8:	6061      	str	r1, [r4, #4]
 80035da:	60a2      	str	r2, [r4, #8]
 80035dc:	230b      	movs	r3, #11
 80035de:	b29a      	uxth	r2, r3
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <GPSInit+0x68>)
 80035e2:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <GPSInit+0x68>)
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	230a      	movs	r3, #10
 80035ea:	4905      	ldr	r1, [pc, #20]	; (8003600 <GPSInit+0x60>)
 80035ec:	4807      	ldr	r0, [pc, #28]	; (800360c <GPSInit+0x6c>)
 80035ee:	f007 f9fc 	bl	800a9ea <HAL_UART_Transmit>
}
 80035f2:	bf00      	nop
 80035f4:	bd98      	pop	{r3, r4, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000a04 	.word	0x20000a04
 80035fc:	200003bc 	.word	0x200003bc
 8003600:	200008cc 	.word	0x200008cc
 8003604:	0800ffd0 	.word	0x0800ffd0
 8003608:	20000f04 	.word	0x20000f04
 800360c:	2000088c 	.word	0x2000088c

08003610 <CompassInit>:

void CompassInit(){
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	af00      	add	r7, sp, #0
	I2Cdev_init(&hi2c3);
 8003614:	4824      	ldr	r0, [pc, #144]	; (80036a8 <CompassInit+0x98>)
 8003616:	f7fd fd73 	bl	8001100 <I2Cdev_init>

	HMC5883L_initialize();
 800361a:	f7fd fd05 	bl	8001028 <HMC5883L_initialize>
	while(!HMC5883L_testConnection()){
 800361e:	e01f      	b.n	8003660 <CompassInit+0x50>
		strSize = sprintf((char*)buffer, "Inisialisasi HMC5883L gagal!\r\n");
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <CompassInit+0x9c>)
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <CompassInit+0xa0>)
 8003624:	4615      	mov	r5, r2
 8003626:	461c      	mov	r4, r3
 8003628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800362a:	6028      	str	r0, [r5, #0]
 800362c:	6069      	str	r1, [r5, #4]
 800362e:	60aa      	str	r2, [r5, #8]
 8003630:	60eb      	str	r3, [r5, #12]
 8003632:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003634:	6128      	str	r0, [r5, #16]
 8003636:	6169      	str	r1, [r5, #20]
 8003638:	61aa      	str	r2, [r5, #24]
 800363a:	8823      	ldrh	r3, [r4, #0]
 800363c:	78a2      	ldrb	r2, [r4, #2]
 800363e:	83ab      	strh	r3, [r5, #28]
 8003640:	4613      	mov	r3, r2
 8003642:	77ab      	strb	r3, [r5, #30]
 8003644:	231e      	movs	r3, #30
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <CompassInit+0xa4>)
 800364a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <CompassInit+0xa4>)
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	230a      	movs	r3, #10
 8003652:	4916      	ldr	r1, [pc, #88]	; (80036ac <CompassInit+0x9c>)
 8003654:	4818      	ldr	r0, [pc, #96]	; (80036b8 <CompassInit+0xa8>)
 8003656:	f007 f9c8 	bl	800a9ea <HAL_UART_Transmit>
		HAL_Delay(10);
 800365a:	200a      	movs	r0, #10
 800365c:	f002 fc44 	bl	8005ee8 <HAL_Delay>
	while(!HMC5883L_testConnection()){
 8003660:	f7fd fcf8 	bl	8001054 <HMC5883L_testConnection>
 8003664:	4603      	mov	r3, r0
 8003666:	f083 0301 	eor.w	r3, r3, #1
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1d7      	bne.n	8003620 <CompassInit+0x10>
	}
	strSize = sprintf((char*)buffer, "HMC5883L Sukses!\r\n");
 8003670:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <CompassInit+0x9c>)
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <CompassInit+0xac>)
 8003674:	4615      	mov	r5, r2
 8003676:	461c      	mov	r4, r3
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	6028      	str	r0, [r5, #0]
 800367c:	6069      	str	r1, [r5, #4]
 800367e:	60aa      	str	r2, [r5, #8]
 8003680:	60eb      	str	r3, [r5, #12]
 8003682:	8823      	ldrh	r3, [r4, #0]
 8003684:	78a2      	ldrb	r2, [r4, #2]
 8003686:	822b      	strh	r3, [r5, #16]
 8003688:	4613      	mov	r3, r2
 800368a:	74ab      	strb	r3, [r5, #18]
 800368c:	2312      	movs	r3, #18
 800368e:	b29a      	uxth	r2, r3
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <CompassInit+0xa4>)
 8003692:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <CompassInit+0xa4>)
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	230a      	movs	r3, #10
 800369a:	4904      	ldr	r1, [pc, #16]	; (80036ac <CompassInit+0x9c>)
 800369c:	4806      	ldr	r0, [pc, #24]	; (80036b8 <CompassInit+0xa8>)
 800369e:	f007 f9a4 	bl	800a9ea <HAL_UART_Transmit>
}
 80036a2:	bf00      	nop
 80036a4:	bdb0      	pop	{r4, r5, r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200002c4 	.word	0x200002c4
 80036ac:	200008cc 	.word	0x200008cc
 80036b0:	0800ffdc 	.word	0x0800ffdc
 80036b4:	20000f04 	.word	0x20000f04
 80036b8:	2000088c 	.word	0x2000088c
 80036bc:	0800fffc 	.word	0x0800fffc

080036c0 <initmonitorBAT>:
void initmonitorBAT(){
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)batteryData, 2);
 80036c4:	2202      	movs	r2, #2
 80036c6:	490f      	ldr	r1, [pc, #60]	; (8003704 <initmonitorBAT+0x44>)
 80036c8:	480f      	ldr	r0, [pc, #60]	; (8003708 <initmonitorBAT+0x48>)
 80036ca:	f002 fc73 	bl	8005fb4 <HAL_ADC_Start_DMA>
	strSize = sprintf((char*)buffer, "Monitor Battery Sukses!\r\n");
 80036ce:	4a0f      	ldr	r2, [pc, #60]	; (800370c <initmonitorBAT+0x4c>)
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <initmonitorBAT+0x50>)
 80036d2:	4615      	mov	r5, r2
 80036d4:	461c      	mov	r4, r3
 80036d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d8:	6028      	str	r0, [r5, #0]
 80036da:	6069      	str	r1, [r5, #4]
 80036dc:	60aa      	str	r2, [r5, #8]
 80036de:	60eb      	str	r3, [r5, #12]
 80036e0:	cc03      	ldmia	r4!, {r0, r1}
 80036e2:	6128      	str	r0, [r5, #16]
 80036e4:	6169      	str	r1, [r5, #20]
 80036e6:	8823      	ldrh	r3, [r4, #0]
 80036e8:	832b      	strh	r3, [r5, #24]
 80036ea:	2319      	movs	r3, #25
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <initmonitorBAT+0x54>)
 80036f0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <initmonitorBAT+0x54>)
 80036f4:	881a      	ldrh	r2, [r3, #0]
 80036f6:	230a      	movs	r3, #10
 80036f8:	4904      	ldr	r1, [pc, #16]	; (800370c <initmonitorBAT+0x4c>)
 80036fa:	4807      	ldr	r0, [pc, #28]	; (8003718 <initmonitorBAT+0x58>)
 80036fc:	f007 f975 	bl	800a9ea <HAL_UART_Transmit>
}
 8003700:	bf00      	nop
 8003702:	bdb0      	pop	{r4, r5, r7, pc}
 8003704:	200007fc 	.word	0x200007fc
 8003708:	200007b4 	.word	0x200007b4
 800370c:	200008cc 	.word	0x200008cc
 8003710:	08010010 	.word	0x08010010
 8003714:	20000f04 	.word	0x20000f04
 8003718:	2000088c 	.word	0x2000088c

0800371c <RemoteInit>:
void RemoteInit(){
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	af00      	add	r7, sp, #0
	  fly_mode = FLY_MODE_OFF;
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <RemoteInit+0xd0>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
	  strSize = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 8003726:	4a32      	ldr	r2, [pc, #200]	; (80037f0 <RemoteInit+0xd4>)
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <RemoteInit+0xd8>)
 800372a:	4615      	mov	r5, r2
 800372c:	461c      	mov	r4, r3
 800372e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003730:	6028      	str	r0, [r5, #0]
 8003732:	6069      	str	r1, [r5, #4]
 8003734:	60aa      	str	r2, [r5, #8]
 8003736:	60eb      	str	r3, [r5, #12]
 8003738:	8823      	ldrh	r3, [r4, #0]
 800373a:	822b      	strh	r3, [r5, #16]
 800373c:	2311      	movs	r3, #17
 800373e:	b29a      	uxth	r2, r3
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <RemoteInit+0xdc>)
 8003742:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <RemoteInit+0xdc>)
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	230a      	movs	r3, #10
 800374a:	4929      	ldr	r1, [pc, #164]	; (80037f0 <RemoteInit+0xd4>)
 800374c:	482b      	ldr	r0, [pc, #172]	; (80037fc <RemoteInit+0xe0>)
 800374e:	f007 f94c 	bl	800a9ea <HAL_UART_Transmit>

	  initPWM_DATA(&RC_CH1, &htim3, TIM_CHANNEL_2);
 8003752:	2204      	movs	r2, #4
 8003754:	492a      	ldr	r1, [pc, #168]	; (8003800 <RemoteInit+0xe4>)
 8003756:	482b      	ldr	r0, [pc, #172]	; (8003804 <RemoteInit+0xe8>)
 8003758:	f7ff fa2e 	bl	8002bb8 <initPWM_DATA>
	  initPWM_DATA(&RC_CH2, &htim9, TIM_CHANNEL_2);
 800375c:	2204      	movs	r2, #4
 800375e:	492a      	ldr	r1, [pc, #168]	; (8003808 <RemoteInit+0xec>)
 8003760:	482a      	ldr	r0, [pc, #168]	; (800380c <RemoteInit+0xf0>)
 8003762:	f7ff fa29 	bl	8002bb8 <initPWM_DATA>
	  initPWM_DATA(&RC_CH3, &htim5, TIM_CHANNEL_1);
 8003766:	2200      	movs	r2, #0
 8003768:	4929      	ldr	r1, [pc, #164]	; (8003810 <RemoteInit+0xf4>)
 800376a:	482a      	ldr	r0, [pc, #168]	; (8003814 <RemoteInit+0xf8>)
 800376c:	f7ff fa24 	bl	8002bb8 <initPWM_DATA>
	  initPWM_DATA(&RC_CH4, &htim3, TIM_CHANNEL_1);
 8003770:	2200      	movs	r2, #0
 8003772:	4923      	ldr	r1, [pc, #140]	; (8003800 <RemoteInit+0xe4>)
 8003774:	4828      	ldr	r0, [pc, #160]	; (8003818 <RemoteInit+0xfc>)
 8003776:	f7ff fa1f 	bl	8002bb8 <initPWM_DATA>
	  initPWM_DATA(&RC_CH5, &htim4, TIM_CHANNEL_1);
 800377a:	2200      	movs	r2, #0
 800377c:	4927      	ldr	r1, [pc, #156]	; (800381c <RemoteInit+0x100>)
 800377e:	4828      	ldr	r0, [pc, #160]	; (8003820 <RemoteInit+0x104>)
 8003780:	f7ff fa1a 	bl	8002bb8 <initPWM_DATA>
	  initPWM_DATA(&RC_CH6, &htim6, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	4927      	ldr	r1, [pc, #156]	; (8003824 <RemoteInit+0x108>)
 8003788:	4827      	ldr	r0, [pc, #156]	; (8003828 <RemoteInit+0x10c>)
 800378a:	f7ff fa15 	bl	8002bb8 <initPWM_DATA>

	  HAL_TIM_IC_Start_IT(RC_CH1.htim, RC_CH1.channel);
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <RemoteInit+0xe8>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <RemoteInit+0xe8>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f006 f823 	bl	80097e4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH2.htim, RC_CH2.channel);
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <RemoteInit+0xf0>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <RemoteInit+0xf0>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f006 f81b 	bl	80097e4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH3.htim, RC_CH3.channel);
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <RemoteInit+0xf8>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <RemoteInit+0xf8>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f006 f813 	bl	80097e4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH4.htim, RC_CH4.channel);
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <RemoteInit+0xfc>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <RemoteInit+0xfc>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f006 f80b 	bl	80097e4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(RC_CH5.htim, RC_CH5.channel);
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <RemoteInit+0x104>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <RemoteInit+0x104>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f006 f803 	bl	80097e4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_Base_Start(RC_CH6.htim);
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <RemoteInit+0x10c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 fef5 	bl	80095d2 <HAL_TIM_Base_Start>
}
 80037e8:	bf00      	nop
 80037ea:	bdb0      	pop	{r4, r5, r7, pc}
 80037ec:	20000d50 	.word	0x20000d50
 80037f0:	200008cc 	.word	0x200008cc
 80037f4:	0801002c 	.word	0x0801002c
 80037f8:	20000f04 	.word	0x20000f04
 80037fc:	2000088c 	.word	0x2000088c
 8003800:	20000748 	.word	0x20000748
 8003804:	2000072c 	.word	0x2000072c
 8003808:	20000cec 	.word	0x20000cec
 800380c:	20000f0c 	.word	0x20000f0c
 8003810:	200006ec 	.word	0x200006ec
 8003814:	20000d98 	.word	0x20000d98
 8003818:	200003fc 	.word	0x200003fc
 800381c:	20000318 	.word	0x20000318
 8003820:	20000ee8 	.word	0x20000ee8
 8003824:	20000c24 	.word	0x20000c24
 8003828:	20000c64 	.word	0x20000c64

0800382c <IMUInit>:

void IMUInit(){
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8003832:	230a      	movs	r3, #10
 8003834:	2201      	movs	r2, #1
 8003836:	21a5      	movs	r1, #165	; 0xa5
 8003838:	485b      	ldr	r0, [pc, #364]	; (80039a8 <IMUInit+0x17c>)
 800383a:	f007 f8d6 	bl	800a9ea <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 800383e:	230a      	movs	r3, #10
 8003840:	2201      	movs	r2, #1
 8003842:	2154      	movs	r1, #84	; 0x54
 8003844:	4858      	ldr	r0, [pc, #352]	; (80039a8 <IMUInit+0x17c>)
 8003846:	f007 f8d0 	bl	800a9ea <HAL_UART_Transmit>

	  HAL_Delay(3000);
 800384a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800384e:	f002 fb4b 	bl	8005ee8 <HAL_Delay>
	  strSize = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 8003852:	4a56      	ldr	r2, [pc, #344]	; (80039ac <IMUInit+0x180>)
 8003854:	4b56      	ldr	r3, [pc, #344]	; (80039b0 <IMUInit+0x184>)
 8003856:	4615      	mov	r5, r2
 8003858:	461c      	mov	r4, r3
 800385a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385c:	6028      	str	r0, [r5, #0]
 800385e:	6069      	str	r1, [r5, #4]
 8003860:	60aa      	str	r2, [r5, #8]
 8003862:	60eb      	str	r3, [r5, #12]
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	6128      	str	r0, [r5, #16]
 8003868:	88a3      	ldrh	r3, [r4, #4]
 800386a:	82ab      	strh	r3, [r5, #20]
 800386c:	2315      	movs	r3, #21
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <IMUInit+0x188>)
 8003872:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8003874:	4b4f      	ldr	r3, [pc, #316]	; (80039b4 <IMUInit+0x188>)
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	2364      	movs	r3, #100	; 0x64
 800387a:	494c      	ldr	r1, [pc, #304]	; (80039ac <IMUInit+0x180>)
 800387c:	484e      	ldr	r0, [pc, #312]	; (80039b8 <IMUInit+0x18c>)
 800387e:	f007 f8b4 	bl	800a9ea <HAL_UART_Transmit>

	  //Kalibrasi heading
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8003882:	230a      	movs	r3, #10
 8003884:	2201      	movs	r2, #1
 8003886:	21a5      	movs	r1, #165	; 0xa5
 8003888:	4847      	ldr	r0, [pc, #284]	; (80039a8 <IMUInit+0x17c>)
 800388a:	f007 f8ae 	bl	800a9ea <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 800388e:	230a      	movs	r3, #10
 8003890:	2201      	movs	r2, #1
 8003892:	2155      	movs	r1, #85	; 0x55
 8003894:	4844      	ldr	r0, [pc, #272]	; (80039a8 <IMUInit+0x17c>)
 8003896:	f007 f8a8 	bl	800a9ea <HAL_UART_Transmit>
	  HAL_Delay(3000);
 800389a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800389e:	f002 fb23 	bl	8005ee8 <HAL_Delay>

	  strSize = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 80038a2:	4a42      	ldr	r2, [pc, #264]	; (80039ac <IMUInit+0x180>)
 80038a4:	4b45      	ldr	r3, [pc, #276]	; (80039bc <IMUInit+0x190>)
 80038a6:	4615      	mov	r5, r2
 80038a8:	461c      	mov	r4, r3
 80038aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ac:	6028      	str	r0, [r5, #0]
 80038ae:	6069      	str	r1, [r5, #4]
 80038b0:	60aa      	str	r2, [r5, #8]
 80038b2:	60eb      	str	r3, [r5, #12]
 80038b4:	cc03      	ldmia	r4!, {r0, r1}
 80038b6:	6128      	str	r0, [r5, #16]
 80038b8:	6169      	str	r1, [r5, #20]
 80038ba:	7823      	ldrb	r3, [r4, #0]
 80038bc:	762b      	strb	r3, [r5, #24]
 80038be:	2318      	movs	r3, #24
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <IMUInit+0x188>)
 80038c4:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <IMUInit+0x188>)
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	2364      	movs	r3, #100	; 0x64
 80038cc:	4937      	ldr	r1, [pc, #220]	; (80039ac <IMUInit+0x180>)
 80038ce:	483a      	ldr	r0, [pc, #232]	; (80039b8 <IMUInit+0x18c>)
 80038d0:	f007 f88b 	bl	800a9ea <HAL_UART_Transmit>

	  //Konfigurasi Output ASCII
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 80038d4:	230a      	movs	r3, #10
 80038d6:	2201      	movs	r2, #1
 80038d8:	21a5      	movs	r1, #165	; 0xa5
 80038da:	4833      	ldr	r0, [pc, #204]	; (80039a8 <IMUInit+0x17c>)
 80038dc:	f007 f885 	bl	800a9ea <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 80038e0:	230a      	movs	r3, #10
 80038e2:	2201      	movs	r2, #1
 80038e4:	2152      	movs	r1, #82	; 0x52
 80038e6:	4830      	ldr	r0, [pc, #192]	; (80039a8 <IMUInit+0x17c>)
 80038e8:	f007 f87f 	bl	800a9ea <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80038ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038f0:	f002 fafa 	bl	8005ee8 <HAL_Delay>

	  HAL_UART_Receive_DMA(&huart2, IMUBuffer, 8);
 80038f4:	2208      	movs	r2, #8
 80038f6:	4932      	ldr	r1, [pc, #200]	; (80039c0 <IMUInit+0x194>)
 80038f8:	482b      	ldr	r0, [pc, #172]	; (80039a8 <IMUInit+0x17c>)
 80038fa:	f007 f90f 	bl	800ab1c <HAL_UART_Receive_DMA>

	  float pitchTotal = 0, yawTotal = 0, rollTotal = 0;
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	607b      	str	r3, [r7, #4]

	  int i = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	603b      	str	r3, [r7, #0]
	  while(i < 100){
 8003914:	e026      	b.n	8003964 <IMUInit+0x138>
		  if(IMUDataStatus){
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <IMUInit+0x198>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d021      	beq.n	8003962 <IMUInit+0x136>
			  i += 1;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	603b      	str	r3, [r7, #0]
			  getIMUData(&IMU_Data);
 8003924:	4828      	ldr	r0, [pc, #160]	; (80039c8 <IMUInit+0x19c>)
 8003926:	f000 f859 	bl	80039dc <getIMUData>
			  pitchTotal += IMU_Data.PITCH;
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <IMUInit+0x19c>)
 800392c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003930:	ed97 7a03 	vldr	s14, [r7, #12]
 8003934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003938:	edc7 7a03 	vstr	s15, [r7, #12]
			  yawTotal += IMU_Data.YAW;
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <IMUInit+0x19c>)
 800393e:	edd3 7a00 	vldr	s15, [r3]
 8003942:	ed97 7a02 	vldr	s14, [r7, #8]
 8003946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394a:	edc7 7a02 	vstr	s15, [r7, #8]
			  rollTotal += IMU_Data.ROLL;
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <IMUInit+0x19c>)
 8003950:	edd3 7a02 	vldr	s15, [r3, #8]
 8003954:	ed97 7a01 	vldr	s14, [r7, #4]
 8003958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003960:	e000      	b.n	8003964 <IMUInit+0x138>
		  } else continue;
 8003962:	bf00      	nop
	  while(i < 100){
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b63      	cmp	r3, #99	; 0x63
 8003968:	ddd5      	ble.n	8003916 <IMUInit+0xea>
	  }
	  pitchRef = pitchTotal / 100;
 800396a:	ed97 7a03 	vldr	s14, [r7, #12]
 800396e:	eddf 6a17 	vldr	s13, [pc, #92]	; 80039cc <IMUInit+0x1a0>
 8003972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <IMUInit+0x1a4>)
 8003978:	edc3 7a00 	vstr	s15, [r3]
	  yawRef = yawTotal / 100;
 800397c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003980:	eddf 6a12 	vldr	s13, [pc, #72]	; 80039cc <IMUInit+0x1a0>
 8003984:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <IMUInit+0x1a8>)
 800398a:	edc3 7a00 	vstr	s15, [r3]
	  rollRef = rollTotal / 100;
 800398e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003992:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80039cc <IMUInit+0x1a0>
 8003996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <IMUInit+0x1ac>)
 800399c:	edc3 7a00 	vstr	s15, [r3]
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bdb0      	pop	{r4, r5, r7, pc}
 80039a8:	20000df8 	.word	0x20000df8
 80039ac:	200008cc 	.word	0x200008cc
 80039b0:	08010040 	.word	0x08010040
 80039b4:	20000f04 	.word	0x20000f04
 80039b8:	2000088c 	.word	0x2000088c
 80039bc:	08010058 	.word	0x08010058
 80039c0:	20000db4 	.word	0x20000db4
 80039c4:	200004c8 	.word	0x200004c8
 80039c8:	200006e0 	.word	0x200006e0
 80039cc:	42c80000 	.word	0x42c80000
 80039d0:	20000210 	.word	0x20000210
 80039d4:	20000214 	.word	0x20000214
 80039d8:	20000218 	.word	0x20000218

080039dc <getIMUData>:
		  while(pointer != NULL);
		  GPSDataStatus = false;
	  }
}

void getIMUData(IMU_DATA *IMU_Data){
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	if(IMUDataStatus){
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <getIMUData+0x170>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80aa 	beq.w	8003b42 <getIMUData+0x166>
		  uint8_t YPR[8];
		  IMU_Data->YAW = 1000.0f, IMU_Data->PITCH = 1000.0f, IMU_Data->ROLL = 1000.0f;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a57      	ldr	r2, [pc, #348]	; (8003b50 <getIMUData+0x174>)
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <getIMUData+0x174>)
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a54      	ldr	r2, [pc, #336]	; (8003b50 <getIMUData+0x174>)
 80039fe:	609a      	str	r2, [r3, #8]
		  char* buf;
		  buf = memchr(IMUBuffer, 0xAA, 8);
 8003a00:	2208      	movs	r2, #8
 8003a02:	21aa      	movs	r1, #170	; 0xaa
 8003a04:	4853      	ldr	r0, [pc, #332]	; (8003b54 <getIMUData+0x178>)
 8003a06:	f7fc fbe3 	bl	80001d0 <memchr>
 8003a0a:	6178      	str	r0, [r7, #20]
		  memcpy(YPR, buf, 8);
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	6810      	ldr	r0, [r2, #0]
 8003a14:	6851      	ldr	r1, [r2, #4]
 8003a16:	c303      	stmia	r3!, {r0, r1}
		  if(YPR[0] == 0xAA && YPR[7] == 0x55){
 8003a18:	7b3b      	ldrb	r3, [r7, #12]
 8003a1a:	2baa      	cmp	r3, #170	; 0xaa
 8003a1c:	f040 808e 	bne.w	8003b3c <getIMUData+0x160>
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	2b55      	cmp	r3, #85	; 0x55
 8003a24:	f040 808a 	bne.w	8003b3c <getIMUData+0x160>
			  IMU_Data->YAW = (float)((YPR[1] << 8 | YPR[2]) * 0.01f);
 8003a28:	7b7b      	ldrb	r3, [r7, #13]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	7bba      	ldrb	r2, [r7, #14]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a38:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003b58 <getIMUData+0x17c>
 8003a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	edc3 7a00 	vstr	s15, [r3]
			  if(IMU_Data->YAW > 179) IMU_Data->YAW = IMU_Data->YAW - 655;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003b5c <getIMUData+0x180>
 8003a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	dd09      	ble.n	8003a6e <getIMUData+0x92>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003b60 <getIMUData+0x184>
 8003a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	edc3 7a00 	vstr	s15, [r3]

			  sensorYaw.data = IMU_Data->YAW - yawRef;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	ed93 7a00 	vldr	s14, [r3]
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <getIMUData+0x188>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	4b3a      	ldr	r3, [pc, #232]	; (8003b68 <getIMUData+0x18c>)
 8003a80:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->PITCH = (float)((YPR[3] << 8 | YPR[4]) * 0.01f);
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	7c3a      	ldrb	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a94:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003b58 <getIMUData+0x17c>
 8003a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	edc3 7a01 	vstr	s15, [r3, #4]
			  if(IMU_Data->PITCH > 179) IMU_Data->PITCH = IMU_Data->PITCH - 655;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aa8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003b5c <getIMUData+0x180>
 8003aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	dd09      	ble.n	8003aca <getIMUData+0xee>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003abc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003b60 <getIMUData+0x184>
 8003ac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	edc3 7a01 	vstr	s15, [r3, #4]

			  sensorPitch.data = IMU_Data->PITCH - pitchRef;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <getIMUData+0x190>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ada:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <getIMUData+0x194>)
 8003adc:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->ROLL = (float)((YPR[5] << 8 | YPR[6]) * 0.01f);
 8003ae0:	7c7b      	ldrb	r3, [r7, #17]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	7cba      	ldrb	r2, [r7, #18]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003b58 <getIMUData+0x17c>
 8003af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	edc3 7a02 	vstr	s15, [r3, #8]
			  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b04:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003b5c <getIMUData+0x180>
 8003b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b10:	dd09      	ble.n	8003b26 <getIMUData+0x14a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b18:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003b60 <getIMUData+0x184>
 8003b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	edc3 7a02 	vstr	s15, [r3, #8]

			  sensorRoll.data = IMU_Data->ROLL - rollRef;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <getIMUData+0x198>)
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <getIMUData+0x19c>)
 8003b38:	edc3 7a00 	vstr	s15, [r3]
		  }
		  IMUDataStatus = false;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <getIMUData+0x170>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
	}

}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200004c8 	.word	0x200004c8
 8003b50:	447a0000 	.word	0x447a0000
 8003b54:	20000db4 	.word	0x20000db4
 8003b58:	3c23d70a 	.word	0x3c23d70a
 8003b5c:	43330000 	.word	0x43330000
 8003b60:	4423c000 	.word	0x4423c000
 8003b64:	20000214 	.word	0x20000214
 8003b68:	20000bf8 	.word	0x20000bf8
 8003b6c:	20000210 	.word	0x20000210
 8003b70:	20000d54 	.word	0x20000d54
 8003b74:	20000218 	.word	0x20000218
 8003b78:	200004b4 	.word	0x200004b4

08003b7c <setPWM_DATA>:

void setPWM_DATA(PWM_DATA* pwm_data){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	if(pwm_data->onRisingEdge && !pwm_data->onFallingEdge){
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8087 	beq.w	8003c9c <setPWM_DATA+0x120>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	7e5b      	ldrb	r3, [r3, #25]
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d07f      	beq.n	8003c9c <setPWM_DATA+0x120>
		pwm_data->onRisingEdge = false;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	761a      	strb	r2, [r3, #24]
		pwm_data->onFallingEdge = true;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	765a      	strb	r2, [r3, #25]
		pwm_data->RisingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f006 f9a0 	bl	8009ef8 <HAL_TIM_ReadCapturedValue>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <setPWM_DATA+0x60>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 020a 	bic.w	r2, r2, #10
 8003bd8:	621a      	str	r2, [r3, #32]
 8003bda:	e027      	b.n	8003c2c <setPWM_DATA+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d10a      	bne.n	8003bfa <setPWM_DATA+0x7e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf6:	621a      	str	r2, [r3, #32]
 8003bf8:	e018      	b.n	8003c2c <setPWM_DATA+0xb0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d10a      	bne.n	8003c18 <setPWM_DATA+0x9c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003c14:	621a      	str	r2, [r3, #32]
 8003c16:	e009      	b.n	8003c2c <setPWM_DATA+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8003c2a:	621a      	str	r2, [r3, #32]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <setPWM_DATA+0xce>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a1a      	ldr	r2, [r3, #32]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0202 	orr.w	r2, r2, #2
 8003c46:	621a      	str	r2, [r3, #32]
 8003c48:	e0aa      	b.n	8003da0 <setPWM_DATA+0x224>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d10a      	bne.n	8003c68 <setPWM_DATA+0xec>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	621a      	str	r2, [r3, #32]
 8003c66:	e09b      	b.n	8003da0 <setPWM_DATA+0x224>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d10a      	bne.n	8003c86 <setPWM_DATA+0x10a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c82:	621a      	str	r2, [r3, #32]
 8003c84:	e08c      	b.n	8003da0 <setPWM_DATA+0x224>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	621a      	str	r2, [r3, #32]
 8003c9a:	e081      	b.n	8003da0 <setPWM_DATA+0x224>

	} else if(pwm_data->onFallingEdge && !pwm_data->onRisingEdge) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7e5b      	ldrb	r3, [r3, #25]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d07d      	beq.n	8003da0 <setPWM_DATA+0x224>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e1b      	ldrb	r3, [r3, #24]
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d076      	beq.n	8003da0 <setPWM_DATA+0x224>
		pwm_data->onFallingEdge = false;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	765a      	strb	r2, [r3, #25]
		pwm_data->onRisingEdge =  true;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	761a      	strb	r2, [r3, #24]
		pwm_data->FallingEdgeVal = HAL_TIM_ReadCapturedValue(pwm_data->htim, pwm_data->channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f006 f915 	bl	8009ef8 <HAL_TIM_ReadCapturedValue>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_CAPTUREPOLARITY(pwm_data->htim, pwm_data->channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <setPWM_DATA+0x176>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 020a 	bic.w	r2, r2, #10
 8003cee:	621a      	str	r2, [r3, #32]
 8003cf0:	e027      	b.n	8003d42 <setPWM_DATA+0x1c6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d10a      	bne.n	8003d10 <setPWM_DATA+0x194>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d0c:	621a      	str	r2, [r3, #32]
 8003d0e:	e018      	b.n	8003d42 <setPWM_DATA+0x1c6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d10a      	bne.n	8003d2e <setPWM_DATA+0x1b2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003d2a:	621a      	str	r2, [r3, #32]
 8003d2c:	e009      	b.n	8003d42 <setPWM_DATA+0x1c6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8003d40:	621a      	str	r2, [r3, #32]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <setPWM_DATA+0x1e0>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a12      	ldr	r2, [r2, #32]
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e021      	b.n	8003da0 <setPWM_DATA+0x224>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d108      	bne.n	8003d76 <setPWM_DATA+0x1fa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a12      	ldr	r2, [r2, #32]
 8003d72:	621a      	str	r2, [r3, #32]
 8003d74:	e014      	b.n	8003da0 <setPWM_DATA+0x224>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d108      	bne.n	8003d90 <setPWM_DATA+0x214>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a12      	ldr	r2, [r2, #32]
 8003d8c:	621a      	str	r2, [r3, #32]
 8003d8e:	e007      	b.n	8003da0 <setPWM_DATA+0x224>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a12      	ldr	r2, [r2, #32]
 8003d9e:	621a      	str	r2, [r3, #32]
	}
	if(pwm_data->FallingEdgeVal >= pwm_data->RisingEdgeVal){
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d30c      	bcc.n	8003dc6 <setPWM_DATA+0x24a>
		pwm_data->DutyCycleVal = pwm_data->FallingEdgeVal - pwm_data->RisingEdgeVal;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]
		pwm_data->FallingEdgeVal = 0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60da      	str	r2, [r3, #12]
		pwm_data->RisingEdgeVal = 0;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dd4:	b088      	sub	sp, #32
 8003dd6:	af04      	add	r7, sp, #16
 8003dd8:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2 && !IMUDataStatus)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a86      	ldr	r2, [pc, #536]	; (8003ff8 <HAL_UART_RxCpltCallback+0x228>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d109      	bne.n	8003df8 <HAL_UART_RxCpltCallback+0x28>
 8003de4:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <HAL_UART_RxCpltCallback+0x22c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f083 0301 	eor.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_UART_RxCpltCallback+0x28>
	  IMUDataStatus = true;
 8003df2:	4b82      	ldr	r3, [pc, #520]	; (8003ffc <HAL_UART_RxCpltCallback+0x22c>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]

  if(huart->Instance == USART3){
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_UART_RxCpltCallback+0x230>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10b      	bne.n	8003e1a <HAL_UART_RxCpltCallback+0x4a>
	  memcpy(GPSBuffer, gps_rx_buf, GPS_BUF_SIZE);
 8003e02:	4a80      	ldr	r2, [pc, #512]	; (8004004 <HAL_UART_RxCpltCallback+0x234>)
 8003e04:	4b80      	ldr	r3, [pc, #512]	; (8004008 <HAL_UART_RxCpltCallback+0x238>)
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f007 fc24 	bl	800b65c <memcpy>
	  GPSDataStatus = true;
 8003e14:	4b7d      	ldr	r3, [pc, #500]	; (800400c <HAL_UART_RxCpltCallback+0x23c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
  }

  if(huart->Instance == USART1){
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7c      	ldr	r2, [pc, #496]	; (8004010 <HAL_UART_RxCpltCallback+0x240>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	f040 80e4 	bne.w	8003fee <HAL_UART_RxCpltCallback+0x21e>
	  //#pp=0.0234
	  if(SerialData[0] == '#'){
 8003e26:	4b7b      	ldr	r3, [pc, #492]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b23      	cmp	r3, #35	; 0x23
 8003e2c:	f040 80d7 	bne.w	8003fde <HAL_UART_RxCpltCallback+0x20e>
		  float input_k = strtof((char*)&SerialData[4], 0);
 8003e30:	2100      	movs	r1, #0
 8003e32:	4879      	ldr	r0, [pc, #484]	; (8004018 <HAL_UART_RxCpltCallback+0x248>)
 8003e34:	f008 fec4 	bl	800cbc0 <strtof>
 8003e38:	ed87 0a03 	vstr	s0, [r7, #12]

		  if(SerialData[1] == 'p'){
 8003e3c:	4b75      	ldr	r3, [pc, #468]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003e3e:	785b      	ldrb	r3, [r3, #1]
 8003e40:	2b70      	cmp	r3, #112	; 0x70
 8003e42:	d13a      	bne.n	8003eba <HAL_UART_RxCpltCallback+0xea>
			if(SerialData[2] == 'p'){
 8003e44:	4b73      	ldr	r3, [pc, #460]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003e46:	789b      	ldrb	r3, [r3, #2]
 8003e48:	2b70      	cmp	r3, #112	; 0x70
 8003e4a:	d103      	bne.n	8003e54 <HAL_UART_RxCpltCallback+0x84>
				PIDPitch.kp = input_k;
 8003e4c:	4a73      	ldr	r2, [pc, #460]	; (800401c <HAL_UART_RxCpltCallback+0x24c>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6193      	str	r3, [r2, #24]
 8003e52:	e00e      	b.n	8003e72 <HAL_UART_RxCpltCallback+0xa2>
			} else if(SerialData[2] == 'i'){
 8003e54:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003e56:	789b      	ldrb	r3, [r3, #2]
 8003e58:	2b69      	cmp	r3, #105	; 0x69
 8003e5a:	d103      	bne.n	8003e64 <HAL_UART_RxCpltCallback+0x94>
				PIDPitch.ki = input_k;
 8003e5c:	4a6f      	ldr	r2, [pc, #444]	; (800401c <HAL_UART_RxCpltCallback+0x24c>)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6213      	str	r3, [r2, #32]
 8003e62:	e006      	b.n	8003e72 <HAL_UART_RxCpltCallback+0xa2>
			} else if(SerialData[2] == 'd'){
 8003e64:	4b6b      	ldr	r3, [pc, #428]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003e66:	789b      	ldrb	r3, [r3, #2]
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d102      	bne.n	8003e72 <HAL_UART_RxCpltCallback+0xa2>
				PIDPitch.kd = input_k;
 8003e6c:	4a6b      	ldr	r2, [pc, #428]	; (800401c <HAL_UART_RxCpltCallback+0x24c>)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	61d3      	str	r3, [r2, #28]
			}
			  strSize = sprintf((char*)buffer, "PIDPitch: kp = %f\tki = %f\tkd = %f\r\n", PIDPitch.kp, PIDPitch.ki, PIDPitch.kd);
 8003e72:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_UART_RxCpltCallback+0x24c>)
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fb66 	bl	8000548 <__aeabi_f2d>
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	4689      	mov	r9, r1
 8003e80:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_UART_RxCpltCallback+0x24c>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_f2d>
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	460d      	mov	r5, r1
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_UART_RxCpltCallback+0x24c>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb58 	bl	8000548 <__aeabi_f2d>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ea0:	e9cd 4500 	strd	r4, r5, [sp]
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	495d      	ldr	r1, [pc, #372]	; (8004020 <HAL_UART_RxCpltCallback+0x250>)
 8003eaa:	485e      	ldr	r0, [pc, #376]	; (8004024 <HAL_UART_RxCpltCallback+0x254>)
 8003eac:	f008 f846 	bl	800bf3c <siprintf>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <HAL_UART_RxCpltCallback+0x258>)
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e07c      	b.n	8003fb4 <HAL_UART_RxCpltCallback+0x1e4>
		  } else if(SerialData[1] == 'y'){
 8003eba:	4b56      	ldr	r3, [pc, #344]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	2b79      	cmp	r3, #121	; 0x79
 8003ec0:	d13a      	bne.n	8003f38 <HAL_UART_RxCpltCallback+0x168>
				if(SerialData[2] == 'p'){
 8003ec2:	4b54      	ldr	r3, [pc, #336]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003ec4:	789b      	ldrb	r3, [r3, #2]
 8003ec6:	2b70      	cmp	r3, #112	; 0x70
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_RxCpltCallback+0x102>
					PIDYaw.kp = input_k;
 8003eca:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_UART_RxCpltCallback+0x25c>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	e00e      	b.n	8003ef0 <HAL_UART_RxCpltCallback+0x120>
				} else if(SerialData[2] == 'i'){
 8003ed2:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003ed4:	789b      	ldrb	r3, [r3, #2]
 8003ed6:	2b69      	cmp	r3, #105	; 0x69
 8003ed8:	d103      	bne.n	8003ee2 <HAL_UART_RxCpltCallback+0x112>
					PIDYaw.ki = input_k;
 8003eda:	4a54      	ldr	r2, [pc, #336]	; (800402c <HAL_UART_RxCpltCallback+0x25c>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	e006      	b.n	8003ef0 <HAL_UART_RxCpltCallback+0x120>
				} else if(SerialData[2] == 'd'){
 8003ee2:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003ee4:	789b      	ldrb	r3, [r3, #2]
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d102      	bne.n	8003ef0 <HAL_UART_RxCpltCallback+0x120>
					PIDYaw.kd = input_k;
 8003eea:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_UART_RxCpltCallback+0x25c>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	61d3      	str	r3, [r2, #28]
				}
			  strSize = sprintf((char*)buffer, "PIDYaw: kp = %f\tki = %f\tkd = %f\r\n", PIDYaw.kp, PIDYaw.ki, PIDYaw.kd);
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_UART_RxCpltCallback+0x25c>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fb27 	bl	8000548 <__aeabi_f2d>
 8003efa:	4680      	mov	r8, r0
 8003efc:	4689      	mov	r9, r1
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_UART_RxCpltCallback+0x25c>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fb20 	bl	8000548 <__aeabi_f2d>
 8003f08:	4604      	mov	r4, r0
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_UART_RxCpltCallback+0x25c>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fc fb19 	bl	8000548 <__aeabi_f2d>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f1e:	e9cd 4500 	strd	r4, r5, [sp]
 8003f22:	4642      	mov	r2, r8
 8003f24:	464b      	mov	r3, r9
 8003f26:	4942      	ldr	r1, [pc, #264]	; (8004030 <HAL_UART_RxCpltCallback+0x260>)
 8003f28:	483e      	ldr	r0, [pc, #248]	; (8004024 <HAL_UART_RxCpltCallback+0x254>)
 8003f2a:	f008 f807 	bl	800bf3c <siprintf>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_UART_RxCpltCallback+0x258>)
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	e03d      	b.n	8003fb4 <HAL_UART_RxCpltCallback+0x1e4>
		  } else if(SerialData[1] == 'r'){
 8003f38:	4b36      	ldr	r3, [pc, #216]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	2b72      	cmp	r3, #114	; 0x72
 8003f3e:	d139      	bne.n	8003fb4 <HAL_UART_RxCpltCallback+0x1e4>
				if(SerialData[2] == 'p'){
 8003f40:	4b34      	ldr	r3, [pc, #208]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003f42:	789b      	ldrb	r3, [r3, #2]
 8003f44:	2b70      	cmp	r3, #112	; 0x70
 8003f46:	d103      	bne.n	8003f50 <HAL_UART_RxCpltCallback+0x180>
					PIDRoll.kp = input_k;
 8003f48:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <HAL_UART_RxCpltCallback+0x264>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6193      	str	r3, [r2, #24]
 8003f4e:	e00e      	b.n	8003f6e <HAL_UART_RxCpltCallback+0x19e>
				} else if(SerialData[2] == 'i'){
 8003f50:	4b30      	ldr	r3, [pc, #192]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003f52:	789b      	ldrb	r3, [r3, #2]
 8003f54:	2b69      	cmp	r3, #105	; 0x69
 8003f56:	d103      	bne.n	8003f60 <HAL_UART_RxCpltCallback+0x190>
					PIDRoll.ki = input_k;
 8003f58:	4a36      	ldr	r2, [pc, #216]	; (8004034 <HAL_UART_RxCpltCallback+0x264>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6213      	str	r3, [r2, #32]
 8003f5e:	e006      	b.n	8003f6e <HAL_UART_RxCpltCallback+0x19e>
				} else if(SerialData[2] == 'd'){
 8003f60:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003f62:	789b      	ldrb	r3, [r3, #2]
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d102      	bne.n	8003f6e <HAL_UART_RxCpltCallback+0x19e>
					PIDRoll.kd = input_k;
 8003f68:	4a32      	ldr	r2, [pc, #200]	; (8004034 <HAL_UART_RxCpltCallback+0x264>)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	61d3      	str	r3, [r2, #28]
				}
			  strSize = sprintf((char*)buffer, "PIDRoll: kp = %f\tki = %f\tkd = %f\r\n", PIDRoll.kp, PIDRoll.ki, PIDRoll.kd);
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_UART_RxCpltCallback+0x264>)
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fae8 	bl	8000548 <__aeabi_f2d>
 8003f78:	4680      	mov	r8, r0
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_UART_RxCpltCallback+0x264>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc fae1 	bl	8000548 <__aeabi_f2d>
 8003f86:	4604      	mov	r4, r0
 8003f88:	460d      	mov	r5, r1
 8003f8a:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <HAL_UART_RxCpltCallback+0x264>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc fada 	bl	8000548 <__aeabi_f2d>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f9c:	e9cd 4500 	strd	r4, r5, [sp]
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	4924      	ldr	r1, [pc, #144]	; (8004038 <HAL_UART_RxCpltCallback+0x268>)
 8003fa6:	481f      	ldr	r0, [pc, #124]	; (8004024 <HAL_UART_RxCpltCallback+0x254>)
 8003fa8:	f007 ffc8 	bl	800bf3c <siprintf>
 8003fac:	4603      	mov	r3, r0
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_UART_RxCpltCallback+0x258>)
 8003fb2:	801a      	strh	r2, [r3, #0]
		  }
		  __HAL_TIM_SET_COUNTER(&htim10, 0);
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_UART_RxCpltCallback+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
		  __HAL_TIM_SET_AUTORELOAD(&htim10, 3000);
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_UART_RxCpltCallback+0x26c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_UART_RxCpltCallback+0x26c>)
 8003fc8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fcc:	60da      	str	r2, [r3, #12]
		  HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_UART_RxCpltCallback+0x258>)
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	2364      	movs	r3, #100	; 0x64
 8003fd4:	4913      	ldr	r1, [pc, #76]	; (8004024 <HAL_UART_RxCpltCallback+0x254>)
 8003fd6:	481a      	ldr	r0, [pc, #104]	; (8004040 <HAL_UART_RxCpltCallback+0x270>)
 8003fd8:	f006 fd07 	bl	800a9ea <HAL_UART_Transmit>
		  HAL_UART_Receive_DMA(&huart1, SerialData, 10);
	  }

  }

 }
 8003fdc:	e007      	b.n	8003fee <HAL_UART_RxCpltCallback+0x21e>
		  HAL_UART_DMAStop(&huart1);
 8003fde:	4818      	ldr	r0, [pc, #96]	; (8004040 <HAL_UART_RxCpltCallback+0x270>)
 8003fe0:	f006 fe1c 	bl	800ac1c <HAL_UART_DMAStop>
		  HAL_UART_Receive_DMA(&huart1, SerialData, 10);
 8003fe4:	220a      	movs	r2, #10
 8003fe6:	490b      	ldr	r1, [pc, #44]	; (8004014 <HAL_UART_RxCpltCallback+0x244>)
 8003fe8:	4815      	ldr	r0, [pc, #84]	; (8004040 <HAL_UART_RxCpltCallback+0x270>)
 8003fea:	f006 fd97 	bl	800ab1c <HAL_UART_Receive_DMA>
 }
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ff8:	40004400 	.word	0x40004400
 8003ffc:	200004c8 	.word	0x200004c8
 8004000:	40004800 	.word	0x40004800
 8004004:	200004cc 	.word	0x200004cc
 8004008:	20000a04 	.word	0x20000a04
 800400c:	20000d2c 	.word	0x20000d2c
 8004010:	40011000 	.word	0x40011000
 8004014:	20000258 	.word	0x20000258
 8004018:	2000025c 	.word	0x2000025c
 800401c:	20000228 	.word	0x20000228
 8004020:	0801008c 	.word	0x0801008c
 8004024:	200008cc 	.word	0x200008cc
 8004028:	20000f04 	.word	0x20000f04
 800402c:	20000800 	.word	0x20000800
 8004030:	080100b0 	.word	0x080100b0
 8004034:	20000cc4 	.word	0x20000cc4
 8004038:	080100d4 	.word	0x080100d4
 800403c:	2000046c 	.word	0x2000046c
 8004040:	2000088c 	.word	0x2000088c

08004044 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	if(htim == RC_CH1.htim){
 800404c:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_TIM_IC_CaptureCallback+0x210>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d17a      	bne.n	800414c <HAL_TIM_IC_CaptureCallback+0x108>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7f1b      	ldrb	r3, [r3, #28]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d138      	bne.n	80040d0 <HAL_TIM_IC_CaptureCallback+0x8c>
			setPWM_DATA(&RC_CH1);
 800405e:	487d      	ldr	r0, [pc, #500]	; (8004254 <HAL_TIM_IC_CaptureCallback+0x210>)
 8004060:	f7ff fd8c 	bl	8003b7c <setPWM_DATA>
			inputRoll = map((float)RC_CH1.DutyCycleVal, 1000, 2000, -30, 30);
 8004064:	4b7b      	ldr	r3, [pc, #492]	; (8004254 <HAL_TIM_IC_CaptureCallback+0x210>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004070:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004258 <HAL_TIM_IC_CaptureCallback+0x214>
 8004074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004078:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800425c <HAL_TIM_IC_CaptureCallback+0x218>
 800407c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004080:	eddf 6a75 	vldr	s13, [pc, #468]	; 8004258 <HAL_TIM_IC_CaptureCallback+0x214>
 8004084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004088:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800408c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004090:	4b73      	ldr	r3, [pc, #460]	; (8004260 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8004092:	edc3 7a00 	vstr	s15, [r3]
			inputRoll = constrain(inputRoll, -30, 30);
 8004096:	4b72      	ldr	r3, [pc, #456]	; (8004260 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80040a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a8:	d501      	bpl.n	80040ae <HAL_TIM_IC_CaptureCallback+0x6a>
 80040aa:	4b6e      	ldr	r3, [pc, #440]	; (8004264 <HAL_TIM_IC_CaptureCallback+0x220>)
 80040ac:	e00d      	b.n	80040ca <HAL_TIM_IC_CaptureCallback+0x86>
 80040ae:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80040b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	dd01      	ble.n	80040c6 <HAL_TIM_IC_CaptureCallback+0x82>
 80040c2:	4b69      	ldr	r3, [pc, #420]	; (8004268 <HAL_TIM_IC_CaptureCallback+0x224>)
 80040c4:	e001      	b.n	80040ca <HAL_TIM_IC_CaptureCallback+0x86>
 80040c6:	4b66      	ldr	r3, [pc, #408]	; (8004260 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a65      	ldr	r2, [pc, #404]	; (8004260 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80040cc:	6013      	str	r3, [r2, #0]
	}
	else if(htim == RC_CH5.htim) {
		setPWM_DATA(&RC_CH5);
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
	}
}
 80040ce:	e0bd      	b.n	800424c <HAL_TIM_IC_CaptureCallback+0x208>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7f1b      	ldrb	r3, [r3, #28]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f040 80b9 	bne.w	800424c <HAL_TIM_IC_CaptureCallback+0x208>
			setPWM_DATA(&RC_CH4);
 80040da:	4864      	ldr	r0, [pc, #400]	; (800426c <HAL_TIM_IC_CaptureCallback+0x228>)
 80040dc:	f7ff fd4e 	bl	8003b7c <setPWM_DATA>
			inputYaw = map((float)RC_CH4.DutyCycleVal, 1000, 2000, -30, 30);
 80040e0:	4b62      	ldr	r3, [pc, #392]	; (800426c <HAL_TIM_IC_CaptureCallback+0x228>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ec:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004258 <HAL_TIM_IC_CaptureCallback+0x214>
 80040f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040f4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800425c <HAL_TIM_IC_CaptureCallback+0x218>
 80040f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040fc:	eddf 6a56 	vldr	s13, [pc, #344]	; 8004258 <HAL_TIM_IC_CaptureCallback+0x214>
 8004100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004104:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800410c:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800410e:	edc3 7a00 	vstr	s15, [r3]
			inputYaw = constrain(inputYaw, -30, 30);
 8004112:	4b57      	ldr	r3, [pc, #348]	; (8004270 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	d501      	bpl.n	800412a <HAL_TIM_IC_CaptureCallback+0xe6>
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <HAL_TIM_IC_CaptureCallback+0x220>)
 8004128:	e00d      	b.n	8004146 <HAL_TIM_IC_CaptureCallback+0x102>
 800412a:	4b51      	ldr	r3, [pc, #324]	; (8004270 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	dd01      	ble.n	8004142 <HAL_TIM_IC_CaptureCallback+0xfe>
 800413e:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_TIM_IC_CaptureCallback+0x224>)
 8004140:	e001      	b.n	8004146 <HAL_TIM_IC_CaptureCallback+0x102>
 8004142:	4b4b      	ldr	r3, [pc, #300]	; (8004270 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4a      	ldr	r2, [pc, #296]	; (8004270 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8004148:	6013      	str	r3, [r2, #0]
}
 800414a:	e07f      	b.n	800424c <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH2.htim){
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <HAL_TIM_IC_CaptureCallback+0x230>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	d138      	bne.n	80041c8 <HAL_TIM_IC_CaptureCallback+0x184>
		setPWM_DATA(&RC_CH2);
 8004156:	4847      	ldr	r0, [pc, #284]	; (8004274 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004158:	f7ff fd10 	bl	8003b7c <setPWM_DATA>
		inputPitch = map((float)RC_CH2.DutyCycleVal, 1000, 2000, -30, 30);
 800415c:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_TIM_IC_CaptureCallback+0x230>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004168:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004258 <HAL_TIM_IC_CaptureCallback+0x214>
 800416c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004170:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800425c <HAL_TIM_IC_CaptureCallback+0x218>
 8004174:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004178:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004258 <HAL_TIM_IC_CaptureCallback+0x214>
 800417c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004180:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_TIM_IC_CaptureCallback+0x234>)
 800418a:	edc3 7a00 	vstr	s15, [r3]
		inputPitch = constrain(inputPitch, -30, 30);
 800418e:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_TIM_IC_CaptureCallback+0x234>)
 8004190:	edd3 7a00 	vldr	s15, [r3]
 8004194:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8004198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d501      	bpl.n	80041a6 <HAL_TIM_IC_CaptureCallback+0x162>
 80041a2:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_TIM_IC_CaptureCallback+0x220>)
 80041a4:	e00d      	b.n	80041c2 <HAL_TIM_IC_CaptureCallback+0x17e>
 80041a6:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_TIM_IC_CaptureCallback+0x234>)
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80041b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	dd01      	ble.n	80041be <HAL_TIM_IC_CaptureCallback+0x17a>
 80041ba:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <HAL_TIM_IC_CaptureCallback+0x224>)
 80041bc:	e001      	b.n	80041c2 <HAL_TIM_IC_CaptureCallback+0x17e>
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_TIM_IC_CaptureCallback+0x234>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <HAL_TIM_IC_CaptureCallback+0x234>)
 80041c4:	6013      	str	r3, [r2, #0]
}
 80041c6:	e041      	b.n	800424c <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH3.htim) {
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_TIM_IC_CaptureCallback+0x238>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d123      	bne.n	800421a <HAL_TIM_IC_CaptureCallback+0x1d6>
		setPWM_DATA(&RC_CH3);
 80041d2:	482a      	ldr	r0, [pc, #168]	; (800427c <HAL_TIM_IC_CaptureCallback+0x238>)
 80041d4:	f7ff fcd2 	bl	8003b7c <setPWM_DATA>
		if(RC_CH3.DutyCycleVal >= 1050){
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_TIM_IC_CaptureCallback+0x238>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f240 4219 	movw	r2, #1049	; 0x419
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d911      	bls.n	8004208 <HAL_TIM_IC_CaptureCallback+0x1c4>
			inputThrottle = constrain(RC_CH3.DutyCycleVal, 1000, 2000);
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_TIM_IC_CaptureCallback+0x238>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ec:	d307      	bcc.n	80041fe <HAL_TIM_IC_CaptureCallback+0x1ba>
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_TIM_IC_CaptureCallback+0x238>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80041f6:	bf28      	it	cs
 80041f8:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 80041fc:	e001      	b.n	8004202 <HAL_TIM_IC_CaptureCallback+0x1be>
 80041fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8004204:	6013      	str	r3, [r2, #0]
}
 8004206:	e021      	b.n	800424c <HAL_TIM_IC_CaptureCallback+0x208>
			RC_CH3.DutyCycleVal = 1000;
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <HAL_TIM_IC_CaptureCallback+0x238>)
 800420a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800420e:	611a      	str	r2, [r3, #16]
			inputThrottle = 1000;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8004212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	e018      	b.n	800424c <HAL_TIM_IC_CaptureCallback+0x208>
	else if(htim == RC_CH5.htim) {
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HAL_TIM_IC_CaptureCallback+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d113      	bne.n	800424c <HAL_TIM_IC_CaptureCallback+0x208>
		setPWM_DATA(&RC_CH5);
 8004224:	4817      	ldr	r0, [pc, #92]	; (8004284 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004226:	f7ff fca9 	bl	8003b7c <setPWM_DATA>
		inputFlyMode = constrain(RC_CH5.DutyCycleVal, 1000, 2000);
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_TIM_IC_CaptureCallback+0x240>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004232:	d307      	bcc.n	8004244 <HAL_TIM_IC_CaptureCallback+0x200>
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800423c:	bf28      	it	cs
 800423e:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8004242:	e001      	b.n	8004248 <HAL_TIM_IC_CaptureCallback+0x204>
 8004244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004248:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <HAL_TIM_IC_CaptureCallback+0x244>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	2000072c 	.word	0x2000072c
 8004258:	447a0000 	.word	0x447a0000
 800425c:	42700000 	.word	0x42700000
 8004260:	200009fc 	.word	0x200009fc
 8004264:	c1f00000 	.word	0xc1f00000
 8004268:	41f00000 	.word	0x41f00000
 800426c:	200003fc 	.word	0x200003fc
 8004270:	20000d34 	.word	0x20000d34
 8004274:	20000f0c 	.word	0x20000f0c
 8004278:	20000888 	.word	0x20000888
 800427c:	20000d98 	.word	0x20000d98
 8004280:	200003b8 	.word	0x200003b8
 8004284:	20000ee8 	.word	0x20000ee8
 8004288:	20000254 	.word	0x20000254

0800428c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428e:	b085      	sub	sp, #20
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7 && (fly_mode == FLY_MODE_ON || fly_mode == FLY_MODE_HOLD)){
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a66      	ldr	r2, [pc, #408]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f040 808f 	bne.w	80043be <HAL_TIM_PeriodElapsedCallback+0x132>
 80042a0:	4b65      	ldr	r3, [pc, #404]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d004      	beq.n	80042b2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80042a8:	4b63      	ldr	r3, [pc, #396]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	f040 8086 	bne.w	80043be <HAL_TIM_PeriodElapsedCallback+0x132>
		if(fly_mode == FLY_MODE_ON){
 80042b2:	4b61      	ldr	r3, [pc, #388]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d137      	bne.n	800432a <HAL_TIM_PeriodElapsedCallback+0x9e>
			PIDRoll.timesampling = PIDYaw.timesampling = PIDPitch.timesampling = 0.01;
 80042ba:	4b60      	ldr	r3, [pc, #384]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80042bc:	4a60      	ldr	r2, [pc, #384]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80042be:	625a      	str	r2, [r3, #36]	; 0x24
 80042c0:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	4a5f      	ldr	r2, [pc, #380]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80042c6:	6253      	str	r3, [r2, #36]	; 0x24
 80042c8:	4b5e      	ldr	r3, [pc, #376]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80042ce:	6253      	str	r3, [r2, #36]	; 0x24
			PIDControl(&PIDRoll, sensorRoll.data, inputRoll);
 80042d0:	4b5e      	ldr	r3, [pc, #376]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80042d2:	edd3 7a00 	vldr	s15, [r3]
 80042d6:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	eef0 0a47 	vmov.f32	s1, s14
 80042e0:	eeb0 0a67 	vmov.f32	s0, s15
 80042e4:	4858      	ldr	r0, [pc, #352]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80042e6:	f000 f98d 	bl	8004604 <PIDControl>
			PIDControl(&PIDPitch, sensorPitch.data, inputPitch);
 80042ea:	4b5a      	ldr	r3, [pc, #360]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80042f2:	ed93 7a00 	vldr	s14, [r3]
 80042f6:	eef0 0a47 	vmov.f32	s1, s14
 80042fa:	eeb0 0a67 	vmov.f32	s0, s15
 80042fe:	484f      	ldr	r0, [pc, #316]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004300:	f000 f980 	bl	8004604 <PIDControl>
			PIDControl(&PIDYaw, sensorYaw.data, inputYaw);
 8004304:	4b55      	ldr	r3, [pc, #340]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	4b55      	ldr	r3, [pc, #340]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800430c:	ed93 7a00 	vldr	s14, [r3]
 8004310:	eef0 0a47 	vmov.f32	s1, s14
 8004314:	eeb0 0a67 	vmov.f32	s0, s15
 8004318:	484a      	ldr	r0, [pc, #296]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800431a:	f000 f973 	bl	8004604 <PIDControl>
			trustControl(fly_mode);
 800431e:	4b46      	ldr	r3, [pc, #280]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fb30 	bl	8004988 <trustControl>
		if(fly_mode == FLY_MODE_ON){
 8004328:	e07e      	b.n	8004428 <HAL_TIM_PeriodElapsedCallback+0x19c>
		} else if(fly_mode == FLY_MODE_HOLD){
 800432a:	4b43      	ldr	r3, [pc, #268]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d17a      	bne.n	8004428 <HAL_TIM_PeriodElapsedCallback+0x19c>
			PIDRoll.timesampling = PIDYaw.timesampling = PIDPitch.timesampling = PIDAltitude.timesampling =  0.01;
 8004332:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8004334:	4a42      	ldr	r2, [pc, #264]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
 8004338:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4a3f      	ldr	r2, [pc, #252]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800433e:	6253      	str	r3, [r2, #36]	; 0x24
 8004340:	4b3e      	ldr	r3, [pc, #248]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	4a3f      	ldr	r2, [pc, #252]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8004346:	6253      	str	r3, [r2, #36]	; 0x24
 8004348:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	4a3e      	ldr	r2, [pc, #248]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800434e:	6253      	str	r3, [r2, #36]	; 0x24
			PIDControl(&PIDRoll, sensorRoll.data, inputRoll);
 8004350:	4b3e      	ldr	r3, [pc, #248]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8004352:	edd3 7a00 	vldr	s15, [r3]
 8004356:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8004358:	ed93 7a00 	vldr	s14, [r3]
 800435c:	eef0 0a47 	vmov.f32	s1, s14
 8004360:	eeb0 0a67 	vmov.f32	s0, s15
 8004364:	4838      	ldr	r0, [pc, #224]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8004366:	f000 f94d 	bl	8004604 <PIDControl>
			PIDControl(&PIDPitch, sensorPitch.data, inputPitch);
 800436a:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800436c:	edd3 7a00 	vldr	s15, [r3]
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8004372:	ed93 7a00 	vldr	s14, [r3]
 8004376:	eef0 0a47 	vmov.f32	s1, s14
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	482f      	ldr	r0, [pc, #188]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004380:	f000 f940 	bl	8004604 <PIDControl>
			PIDControl(&PIDYaw, sensorYaw.data, 0.0);
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004386:	edd3 7a00 	vldr	s15, [r3]
 800438a:	eddf 0a37 	vldr	s1, [pc, #220]	; 8004468 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 800438e:	eeb0 0a67 	vmov.f32	s0, s15
 8004392:	482c      	ldr	r0, [pc, #176]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8004394:	f000 f936 	bl	8004604 <PIDControl>
			PIDControlAltitude(&PIDAltitude, sensorAltitude.data, inputAltitude);
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80043a0:	ed93 7a00 	vldr	s14, [r3]
 80043a4:	eef0 0a47 	vmov.f32	s1, s14
 80043a8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ac:	482d      	ldr	r0, [pc, #180]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80043ae:	f000 f9f5 	bl	800479c <PIDControlAltitude>
			trustControl(fly_mode);
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fae6 	bl	8004988 <trustControl>
		if(fly_mode == FLY_MODE_ON){
 80043bc:	e034      	b.n	8004428 <HAL_TIM_PeriodElapsedCallback+0x19c>
		}

	}else if(htim->Instance == TIM10){
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d130      	bne.n	800442a <HAL_TIM_PeriodElapsedCallback+0x19e>
		if(__HAL_TIM_GET_AUTORELOAD(&htim10) == 3000) __HAL_TIM_SET_AUTORELOAD(&htim10, 15);
 80043c8:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_PeriodElapsedCallback+0x158>
 80043d6:	4b28      	ldr	r3, [pc, #160]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	220f      	movs	r2, #15
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80043e0:	220f      	movs	r2, #15
 80043e2:	60da      	str	r2, [r3, #12]
		strSize = sprintf((char*)buffer, "%f %f\r\n", sensorPitch.data, sensorRoll.data);
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc f8ad 	bl	8000548 <__aeabi_f2d>
 80043ee:	4605      	mov	r5, r0
 80043f0:	460e      	mov	r6, r1
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc f8a6 	bl	8000548 <__aeabi_f2d>
 80043fc:	4603      	mov	r3, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	e9cd 3400 	strd	r3, r4, [sp]
 8004404:	462a      	mov	r2, r5
 8004406:	4633      	mov	r3, r6
 8004408:	491c      	ldr	r1, [pc, #112]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800440a:	481d      	ldr	r0, [pc, #116]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800440c:	f007 fd96 	bl	800bf3c <siprintf>
 8004410:	4603      	mov	r3, r0
 8004412:	b29a      	uxth	r2, r3
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004416:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800441a:	881a      	ldrh	r2, [r3, #0]
 800441c:	230a      	movs	r3, #10
 800441e:	4918      	ldr	r1, [pc, #96]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004420:	4819      	ldr	r0, [pc, #100]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004422:	f006 fae2 	bl	800a9ea <HAL_UART_Transmit>
		strSize = sprintf((char*)buffer, "B%s,%s#", baterai_v.data_byte, baterai_i.data_byte);
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);
		strSize = sprintf((char*)buffer, "%f\r\n", sensorAltitude.data);
		HAL_UART_Transmit(&huart1, buffer, strSize, 10);*/
	}
}
 8004426:	e000      	b.n	800442a <HAL_TIM_PeriodElapsedCallback+0x19e>
		if(fly_mode == FLY_MODE_ON){
 8004428:	bf00      	nop
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004432:	bf00      	nop
 8004434:	40001400 	.word	0x40001400
 8004438:	20000d50 	.word	0x20000d50
 800443c:	20000228 	.word	0x20000228
 8004440:	3c23d70a 	.word	0x3c23d70a
 8004444:	20000800 	.word	0x20000800
 8004448:	20000cc4 	.word	0x20000cc4
 800444c:	200004b4 	.word	0x200004b4
 8004450:	200009fc 	.word	0x200009fc
 8004454:	20000d54 	.word	0x20000d54
 8004458:	20000888 	.word	0x20000888
 800445c:	20000bf8 	.word	0x20000bf8
 8004460:	20000d34 	.word	0x20000d34
 8004464:	20000788 	.word	0x20000788
 8004468:	00000000 	.word	0x00000000
 800446c:	20000994 	.word	0x20000994
 8004470:	20000e78 	.word	0x20000e78
 8004474:	40014400 	.word	0x40014400
 8004478:	2000046c 	.word	0x2000046c
 800447c:	080100f8 	.word	0x080100f8
 8004480:	200008cc 	.word	0x200008cc
 8004484:	20000f04 	.word	0x20000f04
 8004488:	2000088c 	.word	0x2000088c

0800448c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
	if(RC_CH6.onRisingEdge && !RC_CH6.onFallingEdge){
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004498:	7e1b      	ldrb	r3, [r3, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d013      	beq.n	80044c6 <HAL_GPIO_EXTI_Callback+0x3a>
 800449e:	4b22      	ldr	r3, [pc, #136]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044a0:	7e5b      	ldrb	r3, [r3, #25]
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_GPIO_EXTI_Callback+0x3a>
		RC_CH6.onRisingEdge = false;
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	761a      	strb	r2, [r3, #24]
		RC_CH6.onFallingEdge = true;
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	765a      	strb	r2, [r3, #25]
		RC_CH6.RisingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4a19      	ldr	r2, [pc, #100]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044c2:	6093      	str	r3, [r2, #8]
 80044c4:	e016      	b.n	80044f4 <HAL_GPIO_EXTI_Callback+0x68>

	} else if(RC_CH6.onFallingEdge && !RC_CH6.onRisingEdge) {
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044c8:	7e5b      	ldrb	r3, [r3, #25]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d012      	beq.n	80044f4 <HAL_GPIO_EXTI_Callback+0x68>
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044d0:	7e1b      	ldrb	r3, [r3, #24]
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_GPIO_EXTI_Callback+0x68>
		RC_CH6.onFallingEdge = false;
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	765a      	strb	r2, [r3, #25]
		RC_CH6.onRisingEdge =  true;
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	761a      	strb	r2, [r3, #24]
		RC_CH6.FallingEdgeVal = __HAL_TIM_GET_COUNTER(RC_CH6.htim);
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	4a0d      	ldr	r2, [pc, #52]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044f2:	60d3      	str	r3, [r2, #12]
	}
	if(RC_CH6.FallingEdgeVal >= RC_CH6.RisingEdgeVal){
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d30c      	bcc.n	800451a <HAL_GPIO_EXTI_Callback+0x8e>
		RC_CH6.DutyCycleVal = RC_CH6.FallingEdgeVal - RC_CH6.RisingEdgeVal;
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 800450c:	6113      	str	r3, [r2, #16]
		RC_CH6.FallingEdgeVal = 0;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004510:	2200      	movs	r2, #0
 8004512:	60da      	str	r2, [r3, #12]
		RC_CH6.RisingEdgeVal = 0;
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
	}
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000c64 	.word	0x20000c64
 800452c:	00000000 	.word	0x00000000

08004530 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_ADC_ConvCpltCallback+0xa8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d13d      	bne.n	80045be <HAL_ADC_ConvCpltCallback+0x8e>
		baterai_i.data = ((((float)batteryData[0] / 4096) * 5) - 2500)/100;
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <HAL_ADC_ConvCpltCallback+0xac>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800454e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80045e0 <HAL_ADC_ConvCpltCallback+0xb0>
 8004552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004556:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800455a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800455e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80045e4 <HAL_ADC_ConvCpltCallback+0xb4>
 8004562:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004566:	eddf 6a20 	vldr	s13, [pc, #128]	; 80045e8 <HAL_ADC_ConvCpltCallback+0xb8>
 800456a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_ADC_ConvCpltCallback+0xbc>)
 8004570:	edc3 7a00 	vstr	s15, [r3]
		baterai_v.data = ((float)batteryData[1] / 4096)* 3.04985 * 0.00433641;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_ADC_ConvCpltCallback+0xac>)
 8004576:	885b      	ldrh	r3, [r3, #2]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004580:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80045e0 <HAL_ADC_ConvCpltCallback+0xb0>
 8004584:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004588:	ee16 0a90 	vmov	r0, s13
 800458c:	f7fb ffdc 	bl	8000548 <__aeabi_f2d>
 8004590:	a30d      	add	r3, pc, #52	; (adr r3, 80045c8 <HAL_ADC_ConvCpltCallback+0x98>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc f82f 	bl	80005f8 <__aeabi_dmul>
 800459a:	4603      	mov	r3, r0
 800459c:	460c      	mov	r4, r1
 800459e:	4618      	mov	r0, r3
 80045a0:	4621      	mov	r1, r4
 80045a2:	a30b      	add	r3, pc, #44	; (adr r3, 80045d0 <HAL_ADC_ConvCpltCallback+0xa0>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fc f826 	bl	80005f8 <__aeabi_dmul>
 80045ac:	4603      	mov	r3, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	4618      	mov	r0, r3
 80045b2:	4621      	mov	r1, r4
 80045b4:	f7fc fb18 	bl	8000be8 <__aeabi_d2f>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_ADC_ConvCpltCallback+0xc0>)
 80045bc:	601a      	str	r2, [r3, #0]
	}
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd90      	pop	{r4, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	c1bda512 	.word	0xc1bda512
 80045cc:	40086617 	.word	0x40086617
 80045d0:	321cddb1 	.word	0x321cddb1
 80045d4:	3f71c30e 	.word	0x3f71c30e
 80045d8:	40012000 	.word	0x40012000
 80045dc:	200007fc 	.word	0x200007fc
 80045e0:	45800000 	.word	0x45800000
 80045e4:	451c4000 	.word	0x451c4000
 80045e8:	42c80000 	.word	0x42c80000
 80045ec:	20000ee4 	.word	0x20000ee4
 80045f0:	20000d30 	.word	0x20000d30

080045f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <PIDControl>:
 */

#include "pid.h"
extern TIM_HandleTypeDef htim2;

void PIDControl(PIDType_t *pidtype, float dataSensor, float setPoint){
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004610:	edc7 0a01 	vstr	s1, [r7, #4]
	pidtype->setPoint = constrain(setPoint, -30, 30);
 8004614:	edd7 7a01 	vldr	s15, [r7, #4]
 8004618:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800461c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	d501      	bpl.n	800462a <PIDControl+0x26>
 8004626:	4b54      	ldr	r3, [pc, #336]	; (8004778 <PIDControl+0x174>)
 8004628:	e00b      	b.n	8004642 <PIDControl+0x3e>
 800462a:	edd7 7a01 	vldr	s15, [r7, #4]
 800462e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	dd01      	ble.n	8004640 <PIDControl+0x3c>
 800463c:	4b4f      	ldr	r3, [pc, #316]	; (800477c <PIDControl+0x178>)
 800463e:	e000      	b.n	8004642 <PIDControl+0x3e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6113      	str	r3, [r2, #16]
	pidtype->error = pidtype->setPoint - dataSensor;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	ed93 7a04 	vldr	s14, [r3, #16]
 800464c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	edc3 7a00 	vstr	s15, [r3]

	if(pidtype->error >= 180) pidtype->error -= 360;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004780 <PIDControl+0x17c>
 8004664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	db0a      	blt.n	8004684 <PIDControl+0x80>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	edd3 7a00 	vldr	s15, [r3]
 8004674:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004784 <PIDControl+0x180>
 8004678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	edc3 7a00 	vstr	s15, [r3]
 8004682:	e013      	b.n	80046ac <PIDControl+0xa8>
	else if(pidtype->error < -180) pidtype->error += 360;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	edd3 7a00 	vldr	s15, [r3]
 800468a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004788 <PIDControl+0x184>
 800468e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	d509      	bpl.n	80046ac <PIDControl+0xa8>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	edd3 7a00 	vldr	s15, [r3]
 800469e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004784 <PIDControl+0x180>
 80046a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	edc3 7a00 	vstr	s15, [r3]

	pidtype->sumIntegral += pidtype->error * pidtype->timesampling;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	edd3 6a00 	vldr	s13, [r3]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80046be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	edc3 7a03 	vstr	s15, [r3, #12]
	pidtype->sumIntegral = constrain(pidtype->sumIntegral, -500, 500);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80046d2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800478c <PIDControl+0x188>
 80046d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d501      	bpl.n	80046e4 <PIDControl+0xe0>
 80046e0:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <PIDControl+0x18c>)
 80046e2:	e00d      	b.n	8004700 <PIDControl+0xfc>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80046ea:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004794 <PIDControl+0x190>
 80046ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	dd01      	ble.n	80046fc <PIDControl+0xf8>
 80046f8:	4b27      	ldr	r3, [pc, #156]	; (8004798 <PIDControl+0x194>)
 80046fa:	e001      	b.n	8004700 <PIDControl+0xfc>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	60d3      	str	r3, [r2, #12]

	pidtype->derivative = (pidtype->error - pidtype->preverror) / pidtype->timesampling;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	ed93 7a00 	vldr	s14, [r3]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004710:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800471a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	edc3 7a02 	vstr	s15, [r3, #8]
	pidtype->preverror = pidtype->error;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	605a      	str	r2, [r3, #4]

	pidtype->output = (pidtype->kp * pidtype->error) + (pidtype->kd * pidtype->derivative) + (pidtype->ki * pidtype->sumIntegral);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	edd3 6a07 	vldr	s13, [r3, #28]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	edd3 7a02 	vldr	s15, [r3, #8]
 8004748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800474c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	edd3 6a08 	vldr	s13, [r3, #32]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	edd3 7a03 	vldr	s15, [r3, #12]
 800475c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	c1f00000 	.word	0xc1f00000
 800477c:	41f00000 	.word	0x41f00000
 8004780:	43340000 	.word	0x43340000
 8004784:	43b40000 	.word	0x43b40000
 8004788:	c3340000 	.word	0xc3340000
 800478c:	c3fa0000 	.word	0xc3fa0000
 8004790:	c3fa0000 	.word	0xc3fa0000
 8004794:	43fa0000 	.word	0x43fa0000
 8004798:	43fa0000 	.word	0x43fa0000

0800479c <PIDControlAltitude>:
void PIDControlAltitude(PIDType_t *pidtype, float dataSensor, float setPoint){
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80047a8:	edc7 0a01 	vstr	s1, [r7, #4]
	pidtype->setPoint = constrain(setPoint, 0, 100);
 80047ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	d502      	bpl.n	80047c0 <PIDControlAltitude+0x24>
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	e00b      	b.n	80047d8 <PIDControlAltitude+0x3c>
 80047c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80047c4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80048bc <PIDControlAltitude+0x120>
 80047c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d0:	dd01      	ble.n	80047d6 <PIDControlAltitude+0x3a>
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <PIDControlAltitude+0x124>)
 80047d4:	e000      	b.n	80047d8 <PIDControlAltitude+0x3c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6113      	str	r3, [r2, #16]
	pidtype->error = pidtype->setPoint - dataSensor;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	ed93 7a04 	vldr	s14, [r3, #16]
 80047e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80047e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	edc3 7a00 	vstr	s15, [r3]

	//if(pidtype->error >= 100) pidtype->error = 100;
	//else if(pidtype->error < -100) pidtype->error = -100;

	pidtype->sumIntegral += pidtype->error * pidtype->timesampling;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	edd3 6a00 	vldr	s13, [r3]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	edc3 7a03 	vstr	s15, [r3, #12]
	pidtype->sumIntegral = constrain(pidtype->sumIntegral, -1000, 1000);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	edd3 7a03 	vldr	s15, [r3, #12]
 8004816:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80048c4 <PIDControlAltitude+0x128>
 800481a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	d501      	bpl.n	8004828 <PIDControlAltitude+0x8c>
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <PIDControlAltitude+0x12c>)
 8004826:	e00d      	b.n	8004844 <PIDControlAltitude+0xa8>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	edd3 7a03 	vldr	s15, [r3, #12]
 800482e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80048cc <PIDControlAltitude+0x130>
 8004832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	dd01      	ble.n	8004840 <PIDControlAltitude+0xa4>
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <PIDControlAltitude+0x134>)
 800483e:	e001      	b.n	8004844 <PIDControlAltitude+0xa8>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	60d3      	str	r3, [r2, #12]

	pidtype->derivative = (pidtype->error - pidtype->preverror) / pidtype->timesampling;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	ed93 7a00 	vldr	s14, [r3]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	edd3 7a01 	vldr	s15, [r3, #4]
 8004854:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800485e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	edc3 7a02 	vstr	s15, [r3, #8]
	pidtype->preverror = pidtype->error;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	605a      	str	r2, [r3, #4]

	pidtype->output = (pidtype->kp * pidtype->error) + (pidtype->kd * pidtype->derivative) + (pidtype->ki * pidtype->sumIntegral);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	ed93 7a06 	vldr	s14, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	edd3 7a00 	vldr	s15, [r3]
 800487c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	edd3 6a07 	vldr	s13, [r3, #28]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	edd3 7a02 	vldr	s15, [r3, #8]
 800488c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004890:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	edd3 6a08 	vldr	s13, [r3, #32]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	edd3 7a03 	vldr	s15, [r3, #12]
 80048a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	42c80000 	.word	0x42c80000
 80048c0:	42c80000 	.word	0x42c80000
 80048c4:	c47a0000 	.word	0xc47a0000
 80048c8:	c47a0000 	.word	0xc47a0000
 80048cc:	447a0000 	.word	0x447a0000
 80048d0:	447a0000 	.word	0x447a0000

080048d4 <PIDReset>:

void PIDReset(PIDType_t *pidtype){
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	pidtype->sumIntegral = 0;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	60da      	str	r2, [r3, #12]
	pidtype->output = 0;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	615a      	str	r2, [r3, #20]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1000);
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <PIDReset+0x4c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048f4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <PIDReset+0x4c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1000);
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <PIDReset+0x4c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1000);
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <PIDReset+0x4c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000d58 	.word	0x20000d58

08004924 <PIDInit>:
void PIDInit(PIDType_t *pidtype, double kp, double ki, double kd, double timesampling){
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6278      	str	r0, [r7, #36]	; 0x24
 800492c:	ed87 0b06 	vstr	d0, [r7, #24]
 8004930:	ed87 1b04 	vstr	d1, [r7, #16]
 8004934:	ed87 2b02 	vstr	d2, [r7, #8]
 8004938:	ed87 3b00 	vstr	d3, [r7]
	PIDReset(pidtype);
 800493c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800493e:	f7ff ffc9 	bl	80048d4 <PIDReset>

	pidtype->kp = kp;
 8004942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004946:	f7fc f94f 	bl	8000be8 <__aeabi_d2f>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	619a      	str	r2, [r3, #24]
	pidtype->kd = kd;
 8004950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004954:	f7fc f948 	bl	8000be8 <__aeabi_d2f>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	61da      	str	r2, [r3, #28]
	pidtype->ki = ki;
 800495e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004962:	f7fc f941 	bl	8000be8 <__aeabi_d2f>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	621a      	str	r2, [r3, #32]

	pidtype->timesampling = timesampling;
 800496c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004970:	f7fc f93a 	bl	8000be8 <__aeabi_d2f>
 8004974:	4602      	mov	r2, r0
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
}
 800497a:	bf00      	nop
 800497c:	3728      	adds	r7, #40	; 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	0000      	movs	r0, r0
 8004984:	0000      	movs	r0, r0
	...

08004988 <trustControl>:
void trustControl(FLY_MODE fly_mode){
 8004988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800498c:	b096      	sub	sp, #88	; 0x58
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	71fb      	strb	r3, [r7, #7]
	float motor1Thrust,motor2Thrust,motor3Thrust,motor4Thrust;
	float motor1Torque,motor2Torque,motor3Torque,motor4Torque;
	float thrust, Altitudetrush;
	int RPMmotor1,RPMmotor2,RPMmotor3,RPMmotor4;

	const float RADS = 57.29577795;
 8004994:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <trustControl+0xe8>)
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
	const float angleMotor1 = 45;
 8004998:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <trustControl+0xec>)
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const float angleMotor2 = 135;
 800499c:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <trustControl+0xf0>)
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
	const float angleMotor3 = 225;
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <trustControl+0xf4>)
 80049a2:	647b      	str	r3, [r7, #68]	; 0x44
	const float angleMotor4 = 315;
 80049a4:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <trustControl+0xf8>)
 80049a6:	643b      	str	r3, [r7, #64]	; 0x40
	const float L = 0.225;
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <trustControl+0xfc>)
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(fly_mode == FLY_MODE_ON){
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d127      	bne.n	8004a02 <trustControl+0x7a>
		thrust = map(inputThrottle, 1000, 2000, 0, 49.663985);
 80049b2:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <trustControl+0x100>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fb fdb2 	bl	8000524 <__aeabi_i2d>
 80049c0:	a325      	add	r3, pc, #148	; (adr r3, 8004a58 <trustControl+0xd0>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fe17 	bl	80005f8 <__aeabi_dmul>
 80049ca:	4603      	mov	r3, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	4618      	mov	r0, r3
 80049d0:	4621      	mov	r1, r4
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <trustControl+0x104>)
 80049d8:	f7fb ff38 	bl	800084c <__aeabi_ddiv>
 80049dc:	4603      	mov	r3, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	4618      	mov	r0, r3
 80049e2:	4621      	mov	r1, r4
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	f7fb fc4e 	bl	800028c <__adddf3>
 80049f0:	4603      	mov	r3, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	4618      	mov	r0, r3
 80049f6:	4621      	mov	r1, r4
 80049f8:	f7fc f8f6 	bl	8000be8 <__aeabi_d2f>
 80049fc:	4603      	mov	r3, r0
 80049fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004a00:	e06f      	b.n	8004ae2 <trustControl+0x15a>
	} else if(fly_mode == FLY_MODE_HOLD){
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d16c      	bne.n	8004ae2 <trustControl+0x15a>
		if (inputThrottle >= 1200){
 8004a08:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <trustControl+0x100>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004a10:	db40      	blt.n	8004a94 <trustControl+0x10c>
			Altitudetrush = 1.3 * PIDAltitude.output;
 8004a12:	4b1f      	ldr	r3, [pc, #124]	; (8004a90 <trustControl+0x108>)
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fd96 	bl	8000548 <__aeabi_f2d>
 8004a1c:	a310      	add	r3, pc, #64	; (adr r3, 8004a60 <trustControl+0xd8>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fde9 	bl	80005f8 <__aeabi_dmul>
 8004a26:	4603      	mov	r3, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	f7fc f8db 	bl	8000be8 <__aeabi_d2f>
 8004a32:	4603      	mov	r3, r0
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38
			thrust = 12.74 + Altitudetrush;
 8004a36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a38:	f7fb fd86 	bl	8000548 <__aeabi_f2d>
 8004a3c:	a30a      	add	r3, pc, #40	; (adr r3, 8004a68 <trustControl+0xe0>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fb fc23 	bl	800028c <__adddf3>
 8004a46:	4603      	mov	r3, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f7fc f8cb 	bl	8000be8 <__aeabi_d2f>
 8004a52:	4603      	mov	r3, r0
 8004a54:	657b      	str	r3, [r7, #84]	; 0x54
 8004a56:	e044      	b.n	8004ae2 <trustControl+0x15a>
 8004a58:	75e2046c 	.word	0x75e2046c
 8004a5c:	4048d4fd 	.word	0x4048d4fd
 8004a60:	cccccccd 	.word	0xcccccccd
 8004a64:	3ff4cccc 	.word	0x3ff4cccc
 8004a68:	47ae147b 	.word	0x47ae147b
 8004a6c:	40297ae1 	.word	0x40297ae1
 8004a70:	42652ee0 	.word	0x42652ee0
 8004a74:	42340000 	.word	0x42340000
 8004a78:	43070000 	.word	0x43070000
 8004a7c:	43610000 	.word	0x43610000
 8004a80:	439d8000 	.word	0x439d8000
 8004a84:	3e666666 	.word	0x3e666666
 8004a88:	200003b8 	.word	0x200003b8
 8004a8c:	408f4000 	.word	0x408f4000
 8004a90:	20000788 	.word	0x20000788
		}else thrust = map(inputThrottle, 1000, 2000, 0, 49.663985);
 8004a94:	4be6      	ldr	r3, [pc, #920]	; (8004e30 <trustControl+0x4a8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fd41 	bl	8000524 <__aeabi_i2d>
 8004aa2:	a3e1      	add	r3, pc, #900	; (adr r3, 8004e28 <trustControl+0x4a0>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f7fb fda6 	bl	80005f8 <__aeabi_dmul>
 8004aac:	4603      	mov	r3, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	4bde      	ldr	r3, [pc, #888]	; (8004e34 <trustControl+0x4ac>)
 8004aba:	f7fb fec7 	bl	800084c <__aeabi_ddiv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f7fb fbdd 	bl	800028c <__adddf3>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f7fc f885 	bl	8000be8 <__aeabi_d2f>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	657b      	str	r3, [r7, #84]	; 0x54
		/*thrust = map(holdThrottle + PIDAltitude.output, 1000, 2000, 0, 49.663985);*/
	}


	motor1Torque = (thrust/4 - PIDPitch.output * sin(angleMotor1/RADS) + PIDRoll.output * cos(angleMotor1 / RADS) + PIDYaw.output) * L;
 8004ae2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004ae6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004aea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004aee:	ee16 0a90 	vmov	r0, s13
 8004af2:	f7fb fd29 	bl	8000548 <__aeabi_f2d>
 8004af6:	4604      	mov	r4, r0
 8004af8:	460d      	mov	r5, r1
 8004afa:	4bcf      	ldr	r3, [pc, #828]	; (8004e38 <trustControl+0x4b0>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fd22 	bl	8000548 <__aeabi_f2d>
 8004b04:	4680      	mov	r8, r0
 8004b06:	4689      	mov	r9, r1
 8004b08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b0c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004b10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b14:	ee16 0a90 	vmov	r0, s13
 8004b18:	f7fb fd16 	bl	8000548 <__aeabi_f2d>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	ec43 2b10 	vmov	d0, r2, r3
 8004b24:	f00a f8ec 	bl	800ed00 <sin>
 8004b28:	ec53 2b10 	vmov	r2, r3, d0
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb fd62 	bl	80005f8 <__aeabi_dmul>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f7fb fba4 	bl	8000288 <__aeabi_dsub>
 8004b40:	4603      	mov	r3, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4625      	mov	r5, r4
 8004b46:	461c      	mov	r4, r3
 8004b48:	4bbc      	ldr	r3, [pc, #752]	; (8004e3c <trustControl+0x4b4>)
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fcfb 	bl	8000548 <__aeabi_f2d>
 8004b52:	4680      	mov	r8, r0
 8004b54:	4689      	mov	r9, r1
 8004b56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b5a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004b5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b62:	ee16 0a90 	vmov	r0, s13
 8004b66:	f7fb fcef 	bl	8000548 <__aeabi_f2d>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	ec43 2b10 	vmov	d0, r2, r3
 8004b72:	f00a f881 	bl	800ec78 <cos>
 8004b76:	ec53 2b10 	vmov	r2, r3, d0
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	f7fb fd3b 	bl	80005f8 <__aeabi_dmul>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4620      	mov	r0, r4
 8004b88:	4629      	mov	r1, r5
 8004b8a:	f7fb fb7f 	bl	800028c <__adddf3>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	4625      	mov	r5, r4
 8004b94:	461c      	mov	r4, r3
 8004b96:	4baa      	ldr	r3, [pc, #680]	; (8004e40 <trustControl+0x4b8>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fb fcd4 	bl	8000548 <__aeabi_f2d>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7fb fb70 	bl	800028c <__adddf3>
 8004bac:	4603      	mov	r3, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4625      	mov	r5, r4
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004bb6:	f7fb fcc7 	bl	8000548 <__aeabi_f2d>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	f7fb fd19 	bl	80005f8 <__aeabi_dmul>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	4621      	mov	r1, r4
 8004bce:	f7fc f80b 	bl	8000be8 <__aeabi_d2f>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
	motor2Torque = (thrust/4 - PIDPitch.output * sin(angleMotor2/RADS) + PIDRoll.output * cos(angleMotor2 / RADS) - PIDYaw.output) * L;
 8004bd6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004bda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004bde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004be2:	ee16 0a90 	vmov	r0, s13
 8004be6:	f7fb fcaf 	bl	8000548 <__aeabi_f2d>
 8004bea:	4604      	mov	r4, r0
 8004bec:	460d      	mov	r5, r1
 8004bee:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <trustControl+0x4b0>)
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fb fca8 	bl	8000548 <__aeabi_f2d>
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	4689      	mov	r9, r1
 8004bfc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004c00:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004c04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c08:	ee16 0a90 	vmov	r0, s13
 8004c0c:	f7fb fc9c 	bl	8000548 <__aeabi_f2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	ec43 2b10 	vmov	d0, r2, r3
 8004c18:	f00a f872 	bl	800ed00 <sin>
 8004c1c:	ec53 2b10 	vmov	r2, r3, d0
 8004c20:	4640      	mov	r0, r8
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fb fce8 	bl	80005f8 <__aeabi_dmul>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb fb2a 	bl	8000288 <__aeabi_dsub>
 8004c34:	4603      	mov	r3, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	4625      	mov	r5, r4
 8004c3a:	461c      	mov	r4, r3
 8004c3c:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <trustControl+0x4b4>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb fc81 	bl	8000548 <__aeabi_f2d>
 8004c46:	4680      	mov	r8, r0
 8004c48:	4689      	mov	r9, r1
 8004c4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004c4e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004c52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c56:	ee16 0a90 	vmov	r0, s13
 8004c5a:	f7fb fc75 	bl	8000548 <__aeabi_f2d>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	ec43 2b10 	vmov	d0, r2, r3
 8004c66:	f00a f807 	bl	800ec78 <cos>
 8004c6a:	ec53 2b10 	vmov	r2, r3, d0
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb fcc1 	bl	80005f8 <__aeabi_dmul>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	f7fb fb05 	bl	800028c <__adddf3>
 8004c82:	4603      	mov	r3, r0
 8004c84:	460c      	mov	r4, r1
 8004c86:	4625      	mov	r5, r4
 8004c88:	461c      	mov	r4, r3
 8004c8a:	4b6d      	ldr	r3, [pc, #436]	; (8004e40 <trustControl+0x4b8>)
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fb fc5a 	bl	8000548 <__aeabi_f2d>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb faf4 	bl	8000288 <__aeabi_dsub>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	4625      	mov	r5, r4
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004caa:	f7fb fc4d 	bl	8000548 <__aeabi_f2d>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fc9f 	bl	80005f8 <__aeabi_dmul>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	f7fb ff91 	bl	8000be8 <__aeabi_d2f>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30
	motor3Torque = (thrust/4 - PIDPitch.output * sin(angleMotor3/RADS) + PIDRoll.output * cos(angleMotor3 / RADS) + PIDYaw.output) * L;
 8004cca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004cce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cd6:	ee16 0a90 	vmov	r0, s13
 8004cda:	f7fb fc35 	bl	8000548 <__aeabi_f2d>
 8004cde:	4604      	mov	r4, r0
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	4b55      	ldr	r3, [pc, #340]	; (8004e38 <trustControl+0x4b0>)
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fb fc2e 	bl	8000548 <__aeabi_f2d>
 8004cec:	4680      	mov	r8, r0
 8004cee:	4689      	mov	r9, r1
 8004cf0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004cf4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004cf8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cfc:	ee16 0a90 	vmov	r0, s13
 8004d00:	f7fb fc22 	bl	8000548 <__aeabi_f2d>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	ec43 2b10 	vmov	d0, r2, r3
 8004d0c:	f009 fff8 	bl	800ed00 <sin>
 8004d10:	ec53 2b10 	vmov	r2, r3, d0
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fc6e 	bl	80005f8 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fab0 	bl	8000288 <__aeabi_dsub>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	4625      	mov	r5, r4
 8004d2e:	461c      	mov	r4, r3
 8004d30:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <trustControl+0x4b4>)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb fc07 	bl	8000548 <__aeabi_f2d>
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	4689      	mov	r9, r1
 8004d3e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004d42:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004d46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d4a:	ee16 0a90 	vmov	r0, s13
 8004d4e:	f7fb fbfb 	bl	8000548 <__aeabi_f2d>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	ec43 2b10 	vmov	d0, r2, r3
 8004d5a:	f009 ff8d 	bl	800ec78 <cos>
 8004d5e:	ec53 2b10 	vmov	r2, r3, d0
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fc47 	bl	80005f8 <__aeabi_dmul>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4620      	mov	r0, r4
 8004d70:	4629      	mov	r1, r5
 8004d72:	f7fb fa8b 	bl	800028c <__adddf3>
 8004d76:	4603      	mov	r3, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	4625      	mov	r5, r4
 8004d7c:	461c      	mov	r4, r3
 8004d7e:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <trustControl+0x4b8>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fbe0 	bl	8000548 <__aeabi_f2d>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fa7c 	bl	800028c <__adddf3>
 8004d94:	4603      	mov	r3, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	4625      	mov	r5, r4
 8004d9a:	461c      	mov	r4, r3
 8004d9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d9e:	f7fb fbd3 	bl	8000548 <__aeabi_f2d>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4620      	mov	r0, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7fb fc25 	bl	80005f8 <__aeabi_dmul>
 8004dae:	4603      	mov	r3, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	4618      	mov	r0, r3
 8004db4:	4621      	mov	r1, r4
 8004db6:	f7fb ff17 	bl	8000be8 <__aeabi_d2f>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	motor4Torque = (thrust/4 - PIDPitch.output * sin(angleMotor4/RADS) + PIDRoll.output * cos(angleMotor4 / RADS) - PIDYaw.output) * L;
 8004dbe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004dc2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004dc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dca:	ee16 0a90 	vmov	r0, s13
 8004dce:	f7fb fbbb 	bl	8000548 <__aeabi_f2d>
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	460d      	mov	r5, r1
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <trustControl+0x4b0>)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fbb4 	bl	8000548 <__aeabi_f2d>
 8004de0:	4680      	mov	r8, r0
 8004de2:	4689      	mov	r9, r1
 8004de4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004de8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004df0:	ee16 0a90 	vmov	r0, s13
 8004df4:	f7fb fba8 	bl	8000548 <__aeabi_f2d>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	ec43 2b10 	vmov	d0, r2, r3
 8004e00:	f009 ff7e 	bl	800ed00 <sin>
 8004e04:	ec53 2b10 	vmov	r2, r3, d0
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f7fb fbf4 	bl	80005f8 <__aeabi_dmul>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fa36 	bl	8000288 <__aeabi_dsub>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4625      	mov	r5, r4
 8004e22:	461c      	mov	r4, r3
 8004e24:	e00e      	b.n	8004e44 <trustControl+0x4bc>
 8004e26:	bf00      	nop
 8004e28:	75e2046c 	.word	0x75e2046c
 8004e2c:	4048d4fd 	.word	0x4048d4fd
 8004e30:	200003b8 	.word	0x200003b8
 8004e34:	408f4000 	.word	0x408f4000
 8004e38:	20000228 	.word	0x20000228
 8004e3c:	20000cc4 	.word	0x20000cc4
 8004e40:	20000800 	.word	0x20000800
 8004e44:	4bbc      	ldr	r3, [pc, #752]	; (8005138 <trustControl+0x7b0>)
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fb fb7d 	bl	8000548 <__aeabi_f2d>
 8004e4e:	4680      	mov	r8, r0
 8004e50:	4689      	mov	r9, r1
 8004e52:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e56:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004e5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e5e:	ee16 0a90 	vmov	r0, s13
 8004e62:	f7fb fb71 	bl	8000548 <__aeabi_f2d>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	ec43 2b10 	vmov	d0, r2, r3
 8004e6e:	f009 ff03 	bl	800ec78 <cos>
 8004e72:	ec53 2b10 	vmov	r2, r3, d0
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f7fb fbbd 	bl	80005f8 <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7fb fa01 	bl	800028c <__adddf3>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	4625      	mov	r5, r4
 8004e90:	461c      	mov	r4, r3
 8004e92:	4baa      	ldr	r3, [pc, #680]	; (800513c <trustControl+0x7b4>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb56 	bl	8000548 <__aeabi_f2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f9f0 	bl	8000288 <__aeabi_dsub>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4625      	mov	r5, r4
 8004eae:	461c      	mov	r4, r3
 8004eb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004eb2:	f7fb fb49 	bl	8000548 <__aeabi_f2d>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7fb fb9b 	bl	80005f8 <__aeabi_dmul>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f7fb fe8d 	bl	8000be8 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28

	motor1Thrust = motor1Torque/L;
 8004ed2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004ed6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ede:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	motor2Thrust = motor2Torque/L;
 8004ee2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8004ee6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eee:	edc7 7a08 	vstr	s15, [r7, #32]
	motor3Thrust = motor3Torque/L;
 8004ef2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004ef6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efe:	edc7 7a07 	vstr	s15, [r7, #28]
	motor4Thrust = motor4Torque/L;
 8004f02:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8004f06:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0e:	edc7 7a06 	vstr	s15, [r7, #24]

	RPMmotor1 = sqrt(motor1Thrust / 0.023759052) / 0.001905;
 8004f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f14:	f7fb fb18 	bl	8000548 <__aeabi_f2d>
 8004f18:	a383      	add	r3, pc, #524	; (adr r3, 8005128 <trustControl+0x7a0>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fc95 	bl	800084c <__aeabi_ddiv>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	ec44 3b17 	vmov	d7, r3, r4
 8004f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f2e:	eef0 0a67 	vmov.f32	s1, s15
 8004f32:	f009 ff2d 	bl	800ed90 <sqrt>
 8004f36:	ec51 0b10 	vmov	r0, r1, d0
 8004f3a:	a37d      	add	r3, pc, #500	; (adr r3, 8005130 <trustControl+0x7a8>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb fc84 	bl	800084c <__aeabi_ddiv>
 8004f44:	4603      	mov	r3, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	f7fb fe04 	bl	8000b58 <__aeabi_d2iz>
 8004f50:	4603      	mov	r3, r0
 8004f52:	617b      	str	r3, [r7, #20]
	RPMmotor2 = sqrt(motor2Thrust / 0.023759052) / 0.001905;
 8004f54:	6a38      	ldr	r0, [r7, #32]
 8004f56:	f7fb faf7 	bl	8000548 <__aeabi_f2d>
 8004f5a:	a373      	add	r3, pc, #460	; (adr r3, 8005128 <trustControl+0x7a0>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb fc74 	bl	800084c <__aeabi_ddiv>
 8004f64:	4603      	mov	r3, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	ec44 3b17 	vmov	d7, r3, r4
 8004f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8004f70:	eef0 0a67 	vmov.f32	s1, s15
 8004f74:	f009 ff0c 	bl	800ed90 <sqrt>
 8004f78:	ec51 0b10 	vmov	r0, r1, d0
 8004f7c:	a36c      	add	r3, pc, #432	; (adr r3, 8005130 <trustControl+0x7a8>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb fc63 	bl	800084c <__aeabi_ddiv>
 8004f86:	4603      	mov	r3, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	f7fb fde3 	bl	8000b58 <__aeabi_d2iz>
 8004f92:	4603      	mov	r3, r0
 8004f94:	613b      	str	r3, [r7, #16]
	RPMmotor3 = sqrt(motor3Thrust / 0.023759052) / 0.001905;
 8004f96:	69f8      	ldr	r0, [r7, #28]
 8004f98:	f7fb fad6 	bl	8000548 <__aeabi_f2d>
 8004f9c:	a362      	add	r3, pc, #392	; (adr r3, 8005128 <trustControl+0x7a0>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb fc53 	bl	800084c <__aeabi_ddiv>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	ec44 3b17 	vmov	d7, r3, r4
 8004fae:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb2:	eef0 0a67 	vmov.f32	s1, s15
 8004fb6:	f009 feeb 	bl	800ed90 <sqrt>
 8004fba:	ec51 0b10 	vmov	r0, r1, d0
 8004fbe:	a35c      	add	r3, pc, #368	; (adr r3, 8005130 <trustControl+0x7a8>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb fc42 	bl	800084c <__aeabi_ddiv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	4621      	mov	r1, r4
 8004fd0:	f7fb fdc2 	bl	8000b58 <__aeabi_d2iz>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]
	RPMmotor4 = sqrt(motor4Thrust / 0.023759052) / 0.001905;
 8004fd8:	69b8      	ldr	r0, [r7, #24]
 8004fda:	f7fb fab5 	bl	8000548 <__aeabi_f2d>
 8004fde:	a352      	add	r3, pc, #328	; (adr r3, 8005128 <trustControl+0x7a0>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb fc32 	bl	800084c <__aeabi_ddiv>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	ec44 3b17 	vmov	d7, r3, r4
 8004ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ff4:	eef0 0a67 	vmov.f32	s1, s15
 8004ff8:	f009 feca 	bl	800ed90 <sqrt>
 8004ffc:	ec51 0b10 	vmov	r0, r1, d0
 8005000:	a34b      	add	r3, pc, #300	; (adr r3, 8005130 <trustControl+0x7a8>)
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f7fb fc21 	bl	800084c <__aeabi_ddiv>
 800500a:	4603      	mov	r3, r0
 800500c:	460c      	mov	r4, r1
 800500e:	4618      	mov	r0, r3
 8005010:	4621      	mov	r1, r4
 8005012:	f7fb fda1 	bl	8000b58 <__aeabi_d2iz>
 8005016:	4603      	mov	r3, r0
 8005018:	60bb      	str	r3, [r7, #8]

	RPMmotor1 = constrain(RPMmotor1,0,12000);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	db06      	blt.n	800502e <trustControl+0x6a6>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8005026:	4293      	cmp	r3, r2
 8005028:	bfa8      	it	ge
 800502a:	4613      	movge	r3, r2
 800502c:	e000      	b.n	8005030 <trustControl+0x6a8>
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
	RPMmotor2 = constrain(RPMmotor2,0,12000);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	db06      	blt.n	8005046 <trustControl+0x6be>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800503e:	4293      	cmp	r3, r2
 8005040:	bfa8      	it	ge
 8005042:	4613      	movge	r3, r2
 8005044:	e000      	b.n	8005048 <trustControl+0x6c0>
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
	RPMmotor3 = constrain(RPMmotor3,0,12000);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	db06      	blt.n	800505e <trustControl+0x6d6>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8005056:	4293      	cmp	r3, r2
 8005058:	bfa8      	it	ge
 800505a:	4613      	movge	r3, r2
 800505c:	e000      	b.n	8005060 <trustControl+0x6d8>
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
	RPMmotor4 = constrain(RPMmotor4,0,12000);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	db06      	blt.n	8005076 <trustControl+0x6ee>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800506e:	4293      	cmp	r3, r2
 8005070:	bfa8      	it	ge
 8005072:	4613      	movge	r3, r2
 8005074:	e000      	b.n	8005078 <trustControl+0x6f0>
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]

	pulseESC1 = map(RPMmotor1,0,12000,1000,2000);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	4a2e      	ldr	r2, [pc, #184]	; (8005140 <trustControl+0x7b8>)
 8005086:	fb82 1203 	smull	r1, r2, r2, r3
 800508a:	1212      	asrs	r2, r2, #8
 800508c:	17db      	asrs	r3, r3, #31
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <trustControl+0x7bc>)
 8005096:	6013      	str	r3, [r2, #0]
	pulseESC2 = map(RPMmotor2,0,12000,1000,2000);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <trustControl+0x7b8>)
 80050a4:	fb82 1203 	smull	r1, r2, r2, r3
 80050a8:	1212      	asrs	r2, r2, #8
 80050aa:	17db      	asrs	r3, r3, #31
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80050b2:	4a25      	ldr	r2, [pc, #148]	; (8005148 <trustControl+0x7c0>)
 80050b4:	6013      	str	r3, [r2, #0]
	pulseESC3 = map(RPMmotor3,0,12000,1000,2000);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <trustControl+0x7b8>)
 80050c2:	fb82 1203 	smull	r1, r2, r2, r3
 80050c6:	1212      	asrs	r2, r2, #8
 80050c8:	17db      	asrs	r3, r3, #31
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <trustControl+0x7c4>)
 80050d2:	6013      	str	r3, [r2, #0]
	pulseESC4 = map(RPMmotor4,0,12000,1000,2000);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	4a18      	ldr	r2, [pc, #96]	; (8005140 <trustControl+0x7b8>)
 80050e0:	fb82 1203 	smull	r1, r2, r2, r3
 80050e4:	1212      	asrs	r2, r2, #8
 80050e6:	17db      	asrs	r3, r3, #31
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <trustControl+0x7c8>)
 80050f0:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulseESC1);
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <trustControl+0x7bc>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <trustControl+0x7cc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pulseESC2);
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <trustControl+0x7c0>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <trustControl+0x7cc>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,pulseESC3);
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <trustControl+0x7c4>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <trustControl+0x7cc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,pulseESC4);
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <trustControl+0x7c8>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <trustControl+0x7cc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40

}
 800511a:	bf00      	nop
 800511c:	3758      	adds	r7, #88	; 0x58
 800511e:	46bd      	mov	sp, r7
 8005120:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005124:	f3af 8000 	nop.w
 8005128:	fd4bbd0f 	.word	0xfd4bbd0f
 800512c:	3f98544a 	.word	0x3f98544a
 8005130:	2cba732e 	.word	0x2cba732e
 8005134:	3f5f3626 	.word	0x3f5f3626
 8005138:	20000cc4 	.word	0x20000cc4
 800513c:	20000800 	.word	0x20000800
 8005140:	057619f1 	.word	0x057619f1
 8005144:	20000ec0 	.word	0x20000ec0
 8005148:	20000250 	.word	0x20000250
 800514c:	20000ee0 	.word	0x20000ee0
 8005150:	200009f8 	.word	0x200009f8
 8005154:	20000d58 	.word	0x20000d58

08005158 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_MspInit+0x4c>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <HAL_MspInit+0x4c>)
 8005168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800516c:	6453      	str	r3, [r2, #68]	; 0x44
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_MspInit+0x4c>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800517a:	2300      	movs	r3, #0
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_MspInit+0x4c>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <HAL_MspInit+0x4c>)
 8005184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005188:	6413      	str	r3, [r2, #64]	; 0x40
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_MspInit+0x4c>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800

080051a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b0:	f107 0314 	add.w	r3, r7, #20
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <HAL_ADC_MspInit+0xdc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d157      	bne.n	800527a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_ADC_MspInit+0xe0>)
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <HAL_ADC_MspInit+0xe0>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6453      	str	r3, [r2, #68]	; 0x44
 80051da:	4b2b      	ldr	r3, [pc, #172]	; (8005288 <HAL_ADC_MspInit+0xe0>)
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <HAL_ADC_MspInit+0xe0>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	4a26      	ldr	r2, [pc, #152]	; (8005288 <HAL_ADC_MspInit+0xe0>)
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	6313      	str	r3, [r2, #48]	; 0x30
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <HAL_ADC_MspInit+0xe0>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005202:	2330      	movs	r3, #48	; 0x30
 8005204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005206:	2303      	movs	r3, #3
 8005208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	4619      	mov	r1, r3
 8005214:	481d      	ldr	r0, [pc, #116]	; (800528c <HAL_ADC_MspInit+0xe4>)
 8005216:	f001 ff63 	bl	80070e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800521a:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_ADC_MspInit+0xec>)
 800521e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005220:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800522c:	4b18      	ldr	r3, [pc, #96]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005238:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800523a:	4b15      	ldr	r3, [pc, #84]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 800523c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005240:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005248:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 800524c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005250:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005252:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 800525a:	2200      	movs	r2, #0
 800525c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800525e:	480c      	ldr	r0, [pc, #48]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005260:	f001 fb60 	bl	8006924 <HAL_DMA_Init>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800526a:	f7ff f9c3 	bl	80045f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a07      	ldr	r2, [pc, #28]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
 8005274:	4a06      	ldr	r2, [pc, #24]	; (8005290 <HAL_ADC_MspInit+0xe8>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800527a:	bf00      	nop
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40012000 	.word	0x40012000
 8005288:	40023800 	.word	0x40023800
 800528c:	40020800 	.word	0x40020800
 8005290:	20000998 	.word	0x20000998
 8005294:	40026470 	.word	0x40026470

08005298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 031c 	add.w	r3, r7, #28
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a42      	ldr	r2, [pc, #264]	; (80053c0 <HAL_I2C_MspInit+0x128>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d12d      	bne.n	8005316 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a40      	ldr	r2, [pc, #256]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b3e      	ldr	r3, [pc, #248]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80052d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052dc:	2312      	movs	r3, #18
 80052de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052e0:	2301      	movs	r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e4:	2303      	movs	r3, #3
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052e8:	2304      	movs	r3, #4
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ec:	f107 031c 	add.w	r3, r7, #28
 80052f0:	4619      	mov	r1, r3
 80052f2:	4835      	ldr	r0, [pc, #212]	; (80053c8 <HAL_I2C_MspInit+0x130>)
 80052f4:	f001 fef4 	bl	80070e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 8005302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005306:	6413      	str	r3, [r2, #64]	; 0x40
 8005308:	4b2e      	ldr	r3, [pc, #184]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005314:	e050      	b.n	80053b8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <HAL_I2C_MspInit+0x134>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d14b      	bne.n	80053b8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	4b27      	ldr	r3, [pc, #156]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	4a26      	ldr	r2, [pc, #152]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 800532a:	f043 0304 	orr.w	r3, r3, #4
 800532e:	6313      	str	r3, [r2, #48]	; 0x30
 8005330:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6313      	str	r3, [r2, #48]	; 0x30
 800534c:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800535e:	2312      	movs	r3, #18
 8005360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005362:	2301      	movs	r3, #1
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005366:	2303      	movs	r3, #3
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800536a:	2304      	movs	r3, #4
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800536e:	f107 031c 	add.w	r3, r7, #28
 8005372:	4619      	mov	r1, r3
 8005374:	4816      	ldr	r0, [pc, #88]	; (80053d0 <HAL_I2C_MspInit+0x138>)
 8005376:	f001 feb3 	bl	80070e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800537a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800537e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005380:	2312      	movs	r3, #18
 8005382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005384:	2301      	movs	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005388:	2303      	movs	r3, #3
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800538c:	2304      	movs	r3, #4
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005390:	f107 031c 	add.w	r3, r7, #28
 8005394:	4619      	mov	r1, r3
 8005396:	480f      	ldr	r0, [pc, #60]	; (80053d4 <HAL_I2C_MspInit+0x13c>)
 8005398:	f001 fea2 	bl	80070e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80053a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053aa:	6413      	str	r3, [r2, #64]	; 0x40
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_I2C_MspInit+0x12c>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
}
 80053b8:	bf00      	nop
 80053ba:	3730      	adds	r7, #48	; 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40005400 	.word	0x40005400
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40020400 	.word	0x40020400
 80053cc:	40005c00 	.word	0x40005c00
 80053d0:	40020800 	.word	0x40020800
 80053d4:	40020000 	.word	0x40020000

080053d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a25      	ldr	r2, [pc, #148]	; (800548c <HAL_TIM_IC_MspInit+0xb4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d144      	bne.n	8005484 <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_TIM_IC_MspInit+0xb8>)
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	4a23      	ldr	r2, [pc, #140]	; (8005490 <HAL_TIM_IC_MspInit+0xb8>)
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	6453      	str	r3, [r2, #68]	; 0x44
 800540a:	4b21      	ldr	r3, [pc, #132]	; (8005490 <HAL_TIM_IC_MspInit+0xb8>)
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <HAL_TIM_IC_MspInit+0xb8>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_TIM_IC_MspInit+0xb8>)
 8005420:	f043 0310 	orr.w	r3, r3, #16
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <HAL_TIM_IC_MspInit+0xb8>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005438:	2302      	movs	r3, #2
 800543a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005440:	2300      	movs	r3, #0
 8005442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005444:	2301      	movs	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	4619      	mov	r1, r3
 800544e:	4811      	ldr	r0, [pc, #68]	; (8005494 <HAL_TIM_IC_MspInit+0xbc>)
 8005450:	f001 fe46 	bl	80070e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005454:	2200      	movs	r2, #0
 8005456:	2100      	movs	r1, #0
 8005458:	2018      	movs	r0, #24
 800545a:	f001 fa2c 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800545e:	2018      	movs	r0, #24
 8005460:	f001 fa45 	bl	80068ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8005464:	2200      	movs	r2, #0
 8005466:	2102      	movs	r1, #2
 8005468:	2019      	movs	r0, #25
 800546a:	f001 fa24 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800546e:	2019      	movs	r0, #25
 8005470:	f001 fa3d 	bl	80068ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005474:	2200      	movs	r2, #0
 8005476:	2100      	movs	r1, #0
 8005478:	201b      	movs	r0, #27
 800547a:	f001 fa1c 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800547e:	201b      	movs	r0, #27
 8005480:	f001 fa35 	bl	80068ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005484:	bf00      	nop
 8005486:	3728      	adds	r7, #40	; 0x28
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40010000 	.word	0x40010000
 8005490:	40023800 	.word	0x40023800
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b094      	sub	sp, #80	; 0x50
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d116      	bne.n	80054e8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80054be:	4ba6      	ldr	r3, [pc, #664]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	4aa5      	ldr	r2, [pc, #660]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ca:	4ba3      	ldr	r3, [pc, #652]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	201c      	movs	r0, #28
 80054dc:	f001 f9eb 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054e0:	201c      	movs	r0, #28
 80054e2:	f001 fa04 	bl	80068ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80054e6:	e16a      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM3)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a9b      	ldr	r2, [pc, #620]	; (800575c <HAL_TIM_Base_MspInit+0x2c4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d152      	bne.n	8005598 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	4b98      	ldr	r3, [pc, #608]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	4a97      	ldr	r2, [pc, #604]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6413      	str	r3, [r2, #64]	; 0x40
 8005502:	4b95      	ldr	r3, [pc, #596]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
 8005512:	4b91      	ldr	r3, [pc, #580]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	4a90      	ldr	r2, [pc, #576]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005518:	f043 0304 	orr.w	r3, r3, #4
 800551c:	6313      	str	r3, [r2, #48]	; 0x30
 800551e:	4b8e      	ldr	r3, [pc, #568]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	633b      	str	r3, [r7, #48]	; 0x30
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552e:	4b8a      	ldr	r3, [pc, #552]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4a89      	ldr	r2, [pc, #548]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	6313      	str	r3, [r2, #48]	; 0x30
 800553a:	4b87      	ldr	r3, [pc, #540]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005552:	2300      	movs	r3, #0
 8005554:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005556:	2302      	movs	r3, #2
 8005558:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800555a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800555e:	4619      	mov	r1, r3
 8005560:	487f      	ldr	r0, [pc, #508]	; (8005760 <HAL_TIM_Base_MspInit+0x2c8>)
 8005562:	f001 fdbd 	bl	80070e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005566:	2310      	movs	r3, #16
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2302      	movs	r3, #2
 800556c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005572:	2300      	movs	r3, #0
 8005574:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005576:	2302      	movs	r3, #2
 8005578:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800557e:	4619      	mov	r1, r3
 8005580:	4878      	ldr	r0, [pc, #480]	; (8005764 <HAL_TIM_Base_MspInit+0x2cc>)
 8005582:	f001 fdad 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005586:	2200      	movs	r2, #0
 8005588:	2100      	movs	r1, #0
 800558a:	201d      	movs	r0, #29
 800558c:	f001 f993 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005590:	201d      	movs	r0, #29
 8005592:	f001 f9ac 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 8005596:	e112      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM4)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a72      	ldr	r2, [pc, #456]	; (8005768 <HAL_TIM_Base_MspInit+0x2d0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d135      	bne.n	800560e <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055a2:	2300      	movs	r3, #0
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a6:	4b6c      	ldr	r3, [pc, #432]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	4a6b      	ldr	r2, [pc, #428]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	6413      	str	r3, [r2, #64]	; 0x40
 80055b2:	4b69      	ldr	r3, [pc, #420]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	4b65      	ldr	r3, [pc, #404]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	4a64      	ldr	r2, [pc, #400]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80055c8:	f043 0308 	orr.w	r3, r3, #8
 80055cc:	6313      	str	r3, [r2, #48]	; 0x30
 80055ce:	4b62      	ldr	r3, [pc, #392]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e0:	2302      	movs	r3, #2
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e8:	2300      	movs	r3, #0
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055ec:	2302      	movs	r3, #2
 80055ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80055f4:	4619      	mov	r1, r3
 80055f6:	485d      	ldr	r0, [pc, #372]	; (800576c <HAL_TIM_Base_MspInit+0x2d4>)
 80055f8:	f001 fd72 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	201e      	movs	r0, #30
 8005602:	f001 f958 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005606:	201e      	movs	r0, #30
 8005608:	f001 f971 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 800560c:	e0d7      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM5)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a57      	ldr	r2, [pc, #348]	; (8005770 <HAL_TIM_Base_MspInit+0x2d8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d134      	bne.n	8005682 <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005618:	2300      	movs	r3, #0
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	4b4e      	ldr	r3, [pc, #312]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	4a4d      	ldr	r2, [pc, #308]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005622:	f043 0308 	orr.w	r3, r3, #8
 8005626:	6413      	str	r3, [r2, #64]	; 0x40
 8005628:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	623b      	str	r3, [r7, #32]
 8005632:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	4a46      	ldr	r2, [pc, #280]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	6313      	str	r3, [r2, #48]	; 0x30
 8005644:	4b44      	ldr	r3, [pc, #272]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005650:	2301      	movs	r3, #1
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005654:	2302      	movs	r3, #2
 8005656:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005658:	2300      	movs	r3, #0
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565c:	2300      	movs	r3, #0
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005660:	2302      	movs	r3, #2
 8005662:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005664:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005668:	4619      	mov	r1, r3
 800566a:	4842      	ldr	r0, [pc, #264]	; (8005774 <HAL_TIM_Base_MspInit+0x2dc>)
 800566c:	f001 fd38 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005670:	2200      	movs	r2, #0
 8005672:	2100      	movs	r1, #0
 8005674:	2032      	movs	r0, #50	; 0x32
 8005676:	f001 f91e 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800567a:	2032      	movs	r0, #50	; 0x32
 800567c:	f001 f937 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 8005680:	e09d      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM6)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3c      	ldr	r2, [pc, #240]	; (8005778 <HAL_TIM_Base_MspInit+0x2e0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10e      	bne.n	80056aa <HAL_TIM_Base_MspInit+0x212>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	4b31      	ldr	r3, [pc, #196]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	4a30      	ldr	r2, [pc, #192]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005696:	f043 0310 	orr.w	r3, r3, #16
 800569a:	6413      	str	r3, [r2, #64]	; 0x40
 800569c:	4b2e      	ldr	r3, [pc, #184]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	69bb      	ldr	r3, [r7, #24]
}
 80056a8:	e089      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM7)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a33      	ldr	r2, [pc, #204]	; (800577c <HAL_TIM_Base_MspInit+0x2e4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d116      	bne.n	80056e2 <HAL_TIM_Base_MspInit+0x24a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	4b27      	ldr	r3, [pc, #156]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80056be:	f043 0320 	orr.w	r3, r3, #32
 80056c2:	6413      	str	r3, [r2, #64]	; 0x40
 80056c4:	4b24      	ldr	r3, [pc, #144]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80056d0:	2200      	movs	r2, #0
 80056d2:	2101      	movs	r1, #1
 80056d4:	2037      	movs	r0, #55	; 0x37
 80056d6:	f001 f8ee 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80056da:	2037      	movs	r0, #55	; 0x37
 80056dc:	f001 f907 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 80056e0:	e06d      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
  else if(htim_base->Instance==TIM9)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a26      	ldr	r2, [pc, #152]	; (8005780 <HAL_TIM_Base_MspInit+0x2e8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d14d      	bne.n	8005788 <HAL_TIM_Base_MspInit+0x2f0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80056f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fa:	6453      	str	r3, [r2, #68]	; 0x44
 80056fc:	4b16      	ldr	r3, [pc, #88]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	4b12      	ldr	r3, [pc, #72]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4a11      	ldr	r2, [pc, #68]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 8005712:	f043 0310 	orr.w	r3, r3, #16
 8005716:	6313      	str	r3, [r2, #48]	; 0x30
 8005718:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_TIM_Base_MspInit+0x2c0>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005728:	2302      	movs	r3, #2
 800572a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572c:	2300      	movs	r3, #0
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005730:	2300      	movs	r3, #0
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005734:	2303      	movs	r3, #3
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800573c:	4619      	mov	r1, r3
 800573e:	4811      	ldr	r0, [pc, #68]	; (8005784 <HAL_TIM_Base_MspInit+0x2ec>)
 8005740:	f001 fcce 	bl	80070e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005744:	2200      	movs	r2, #0
 8005746:	2100      	movs	r1, #0
 8005748:	2018      	movs	r0, #24
 800574a:	f001 f8b4 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800574e:	2018      	movs	r0, #24
 8005750:	f001 f8cd 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 8005754:	e033      	b.n	80057be <HAL_TIM_Base_MspInit+0x326>
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40000400 	.word	0x40000400
 8005760:	40020800 	.word	0x40020800
 8005764:	40020400 	.word	0x40020400
 8005768:	40000800 	.word	0x40000800
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40020000 	.word	0x40020000
 8005778:	40001000 	.word	0x40001000
 800577c:	40001400 	.word	0x40001400
 8005780:	40014000 	.word	0x40014000
 8005784:	40021000 	.word	0x40021000
  else if(htim_base->Instance==TIM10)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0e      	ldr	r2, [pc, #56]	; (80057c8 <HAL_TIM_Base_MspInit+0x330>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d115      	bne.n	80057be <HAL_TIM_Base_MspInit+0x326>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <HAL_TIM_Base_MspInit+0x334>)
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <HAL_TIM_Base_MspInit+0x334>)
 800579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a0:	6453      	str	r3, [r2, #68]	; 0x44
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_TIM_Base_MspInit+0x334>)
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	2102      	movs	r1, #2
 80057b2:	2019      	movs	r0, #25
 80057b4:	f001 f87f 	bl	80068b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80057b8:	2019      	movs	r0, #25
 80057ba:	f001 f898 	bl	80068ee <HAL_NVIC_EnableIRQ>
}
 80057be:	bf00      	nop
 80057c0:	3750      	adds	r7, #80	; 0x50
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40023800 	.word	0x40023800

080057d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a0b      	ldr	r2, [pc, #44]	; (800580c <HAL_TIM_PWM_MspInit+0x3c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10d      	bne.n	80057fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <HAL_TIM_PWM_MspInit+0x40>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	4a09      	ldr	r2, [pc, #36]	; (8005810 <HAL_TIM_PWM_MspInit+0x40>)
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	6413      	str	r3, [r2, #64]	; 0x40
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_TIM_PWM_MspInit+0x40>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40001800 	.word	0x40001800
 8005810:	40023800 	.word	0x40023800

08005814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	; 0x28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800581c:	f107 0314 	add.w	r3, r7, #20
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	609a      	str	r2, [r3, #8]
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d11f      	bne.n	8005876 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	4b23      	ldr	r3, [pc, #140]	; (80058c8 <HAL_TIM_MspPostInit+0xb4>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_TIM_MspPostInit+0xb4>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6313      	str	r3, [r2, #48]	; 0x30
 8005846:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <HAL_TIM_MspPostInit+0xb4>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8005852:	f248 030e 	movw	r3, #32782	; 0x800e
 8005856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005858:	2302      	movs	r3, #2
 800585a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005860:	2300      	movs	r3, #0
 8005862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005864:	2301      	movs	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	4619      	mov	r1, r3
 800586e:	4817      	ldr	r0, [pc, #92]	; (80058cc <HAL_TIM_MspPostInit+0xb8>)
 8005870:	f001 fc36 	bl	80070e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8005874:	e023      	b.n	80058be <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <HAL_TIM_MspPostInit+0xbc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d11e      	bne.n	80058be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_TIM_MspPostInit+0xb4>)
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	4a0f      	ldr	r2, [pc, #60]	; (80058c8 <HAL_TIM_MspPostInit+0xb4>)
 800588a:	f043 0302 	orr.w	r3, r3, #2
 800588e:	6313      	str	r3, [r2, #48]	; 0x30
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_TIM_MspPostInit+0xb4>)
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800589c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a2:	2302      	movs	r3, #2
 80058a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058aa:	2300      	movs	r3, #0
 80058ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80058ae:	2309      	movs	r3, #9
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058b2:	f107 0314 	add.w	r3, r7, #20
 80058b6:	4619      	mov	r1, r3
 80058b8:	4806      	ldr	r0, [pc, #24]	; (80058d4 <HAL_TIM_MspPostInit+0xc0>)
 80058ba:	f001 fc11 	bl	80070e0 <HAL_GPIO_Init>
}
 80058be:	bf00      	nop
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40020000 	.word	0x40020000
 80058d0:	40001800 	.word	0x40001800
 80058d4:	40020400 	.word	0x40020400

080058d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08e      	sub	sp, #56	; 0x38
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a71      	ldr	r2, [pc, #452]	; (8005abc <HAL_UART_MspInit+0x1e4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d16e      	bne.n	80059d8 <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	4b70      	ldr	r3, [pc, #448]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	4a6f      	ldr	r2, [pc, #444]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005904:	f043 0310 	orr.w	r3, r3, #16
 8005908:	6453      	str	r3, [r2, #68]	; 0x44
 800590a:	4b6d      	ldr	r3, [pc, #436]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	4b69      	ldr	r3, [pc, #420]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4a68      	ldr	r2, [pc, #416]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6313      	str	r3, [r2, #48]	; 0x30
 8005926:	4b66      	ldr	r3, [pc, #408]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005938:	2302      	movs	r3, #2
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	2300      	movs	r3, #0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005940:	2303      	movs	r3, #3
 8005942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005944:	2307      	movs	r3, #7
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800594c:	4619      	mov	r1, r3
 800594e:	485d      	ldr	r0, [pc, #372]	; (8005ac4 <HAL_UART_MspInit+0x1ec>)
 8005950:	f001 fbc6 	bl	80070e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800595e:	2301      	movs	r3, #1
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005962:	2303      	movs	r3, #3
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005966:	2307      	movs	r3, #7
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800596a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800596e:	4619      	mov	r1, r3
 8005970:	4854      	ldr	r0, [pc, #336]	; (8005ac4 <HAL_UART_MspInit+0x1ec>)
 8005972:	f001 fbb5 	bl	80070e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005976:	4b54      	ldr	r3, [pc, #336]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 8005978:	4a54      	ldr	r2, [pc, #336]	; (8005acc <HAL_UART_MspInit+0x1f4>)
 800597a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800597c:	4b52      	ldr	r3, [pc, #328]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 800597e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005982:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005984:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800598a:	4b4f      	ldr	r3, [pc, #316]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 800598c:	2200      	movs	r2, #0
 800598e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005990:	4b4d      	ldr	r3, [pc, #308]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 8005992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005996:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005998:	4b4b      	ldr	r3, [pc, #300]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 800599a:	2200      	movs	r2, #0
 800599c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800599e:	4b4a      	ldr	r3, [pc, #296]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80059a4:	4b48      	ldr	r3, [pc, #288]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059b4:	4b44      	ldr	r3, [pc, #272]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80059ba:	4843      	ldr	r0, [pc, #268]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059bc:	f000 ffb2 	bl	8006924 <HAL_DMA_Init>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80059c6:	f7fe fe15 	bl	80045f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a3e      	ldr	r2, [pc, #248]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059ce:	635a      	str	r2, [r3, #52]	; 0x34
 80059d0:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <HAL_UART_MspInit+0x1f0>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80059d6:	e0e5      	b.n	8005ba4 <HAL_UART_MspInit+0x2cc>
  else if(huart->Instance==USART2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <HAL_UART_MspInit+0x1f8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d17e      	bne.n	8005ae0 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART2_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a35      	ldr	r2, [pc, #212]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 80059ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f0:	6413      	str	r3, [r2, #64]	; 0x40
 80059f2:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	4a2e      	ldr	r2, [pc, #184]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005a08:	f043 0308 	orr.w	r3, r3, #8
 8005a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <HAL_UART_MspInit+0x1e8>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a26:	2303      	movs	r3, #3
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a2a:	2307      	movs	r3, #7
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a32:	4619      	mov	r1, r3
 8005a34:	4827      	ldr	r0, [pc, #156]	; (8005ad4 <HAL_UART_MspInit+0x1fc>)
 8005a36:	f001 fb53 	bl	80070e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a3a:	2340      	movs	r3, #64	; 0x40
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a42:	2301      	movs	r3, #1
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a46:	2303      	movs	r3, #3
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a4a:	2307      	movs	r3, #7
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a52:	4619      	mov	r1, r3
 8005a54:	481f      	ldr	r0, [pc, #124]	; (8005ad4 <HAL_UART_MspInit+0x1fc>)
 8005a56:	f001 fb43 	bl	80070e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005a5a:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <HAL_UART_MspInit+0x204>)
 8005a5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005a60:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a66:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a74:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a7c:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a82:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005a90:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a96:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a98:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005a9e:	480e      	ldr	r0, [pc, #56]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005aa0:	f000 ff40 	bl	8006924 <HAL_DMA_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8005aaa:	f7fe fda3 	bl	80045f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <HAL_UART_MspInit+0x200>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005aba:	e073      	b.n	8005ba4 <HAL_UART_MspInit+0x2cc>
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40020000 	.word	0x40020000
 8005ac8:	20000828 	.word	0x20000828
 8005acc:	40026440 	.word	0x40026440
 8005ad0:	40004400 	.word	0x40004400
 8005ad4:	40020c00 	.word	0x40020c00
 8005ad8:	20000264 	.word	0x20000264
 8005adc:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a31      	ldr	r2, [pc, #196]	; (8005bac <HAL_UART_MspInit+0x2d4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d15c      	bne.n	8005ba4 <HAL_UART_MspInit+0x2cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_UART_MspInit+0x2d8>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <HAL_UART_MspInit+0x2d8>)
 8005af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af8:	6413      	str	r3, [r2, #64]	; 0x40
 8005afa:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <HAL_UART_MspInit+0x2d8>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b29      	ldr	r3, [pc, #164]	; (8005bb0 <HAL_UART_MspInit+0x2d8>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	4a28      	ldr	r2, [pc, #160]	; (8005bb0 <HAL_UART_MspInit+0x2d8>)
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	6313      	str	r3, [r2, #48]	; 0x30
 8005b16:	4b26      	ldr	r3, [pc, #152]	; (8005bb0 <HAL_UART_MspInit+0x2d8>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005b22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b28:	2302      	movs	r3, #2
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b30:	2303      	movs	r3, #3
 8005b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b34:	2307      	movs	r3, #7
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	481d      	ldr	r0, [pc, #116]	; (8005bb4 <HAL_UART_MspInit+0x2dc>)
 8005b40:	f001 face 	bl	80070e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_UART_MspInit+0x2e4>)
 8005b48:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b50:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b58:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b5e:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005b72:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b78:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005b88:	480b      	ldr	r0, [pc, #44]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b8a:	f000 fecb 	bl	8006924 <HAL_DMA_Init>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_UART_MspInit+0x2c0>
      Error_Handler();
 8005b94:	f7fe fd2e 	bl	80045f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a07      	ldr	r2, [pc, #28]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8005b9e:	4a06      	ldr	r2, [pc, #24]	; (8005bb8 <HAL_UART_MspInit+0x2e0>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ba4:	bf00      	nop
 8005ba6:	3738      	adds	r7, #56	; 0x38
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40004800 	.word	0x40004800
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40020800 	.word	0x40020800
 8005bb8:	20000358 	.word	0x20000358
 8005bbc:	40026028 	.word	0x40026028

08005bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bd2:	e7fe      	b.n	8005bd2 <HardFault_Handler+0x4>

08005bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bd8:	e7fe      	b.n	8005bd8 <MemManage_Handler+0x4>

08005bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bde:	e7fe      	b.n	8005bde <BusFault_Handler+0x4>

08005be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005be4:	e7fe      	b.n	8005be4 <UsageFault_Handler+0x4>

08005be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bea:	bf00      	nop
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8005c14:	f000 f948 	bl	8005ea8 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c18:	bf00      	nop
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005c20:	2008      	movs	r0, #8
 8005c22:	f001 fc11 	bl	8007448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005c26:	bf00      	nop
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <DMA1_Stream1_IRQHandler+0x10>)
 8005c32:	f000 ffed 	bl	8006c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000358 	.word	0x20000358

08005c40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005c44:	4802      	ldr	r0, [pc, #8]	; (8005c50 <DMA1_Stream5_IRQHandler+0x10>)
 8005c46:	f000 ffe3 	bl	8006c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000264 	.word	0x20000264

08005c54 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c58:	4803      	ldr	r0, [pc, #12]	; (8005c68 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8005c5a:	f003 fe2b 	bl	80098b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8005c5e:	4803      	ldr	r0, [pc, #12]	; (8005c6c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8005c60:	f003 fe28 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005c64:	bf00      	nop
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000c84 	.word	0x20000c84
 8005c6c:	20000cec 	.word	0x20000cec

08005c70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c74:	4803      	ldr	r0, [pc, #12]	; (8005c84 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005c76:	f003 fe1d 	bl	80098b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005c7a:	4803      	ldr	r0, [pc, #12]	; (8005c88 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005c7c:	f003 fe1a 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000c84 	.word	0x20000c84
 8005c88:	2000046c 	.word	0x2000046c

08005c8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c90:	4802      	ldr	r0, [pc, #8]	; (8005c9c <TIM1_CC_IRQHandler+0x10>)
 8005c92:	f003 fe0f 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000c84 	.word	0x20000c84

08005ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ca4:	4802      	ldr	r0, [pc, #8]	; (8005cb0 <TIM2_IRQHandler+0x10>)
 8005ca6:	f003 fe05 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005caa:	bf00      	nop
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000d58 	.word	0x20000d58

08005cb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005cb8:	4802      	ldr	r0, [pc, #8]	; (8005cc4 <TIM3_IRQHandler+0x10>)
 8005cba:	f003 fdfb 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000748 	.word	0x20000748

08005cc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005ccc:	4802      	ldr	r0, [pc, #8]	; (8005cd8 <TIM4_IRQHandler+0x10>)
 8005cce:	f003 fdf1 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000318 	.word	0x20000318

08005cdc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005ce0:	4802      	ldr	r0, [pc, #8]	; (8005cec <TIM5_IRQHandler+0x10>)
 8005ce2:	f003 fde7 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200006ec 	.word	0x200006ec

08005cf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005cf4:	4802      	ldr	r0, [pc, #8]	; (8005d00 <TIM7_IRQHandler+0x10>)
 8005cf6:	f003 fddd 	bl	80098b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000e80 	.word	0x20000e80

08005d04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005d08:	4802      	ldr	r0, [pc, #8]	; (8005d14 <DMA2_Stream2_IRQHandler+0x10>)
 8005d0a:	f000 ff81 	bl	8006c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000828 	.word	0x20000828

08005d18 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005d1c:	4802      	ldr	r0, [pc, #8]	; (8005d28 <DMA2_Stream4_IRQHandler+0x10>)
 8005d1e:	f000 ff77 	bl	8006c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000998 	.word	0x20000998

08005d2c <_sbrk>:
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <_sbrk+0x50>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <_sbrk+0x16>
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <_sbrk+0x50>)
 8005d3e:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <_sbrk+0x54>)
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <_sbrk+0x50>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <_sbrk+0x50>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	466a      	mov	r2, sp
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d907      	bls.n	8005d66 <_sbrk+0x3a>
 8005d56:	f005 fc57 	bl	800b608 <__errno>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	f04f 33ff 	mov.w	r3, #4294967295
 8005d64:	e006      	b.n	8005d74 <_sbrk+0x48>
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <_sbrk+0x50>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4a03      	ldr	r2, [pc, #12]	; (8005d7c <_sbrk+0x50>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000021c 	.word	0x2000021c
 8005d80:	20000f30 	.word	0x20000f30

08005d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <SystemInit+0x28>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	4a07      	ldr	r2, [pc, #28]	; (8005dac <SystemInit+0x28>)
 8005d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <SystemInit+0x28>)
 8005d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <Reset_Handler>:
 8005db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005de8 <LoopFillZerobss+0x14>
 8005db4:	2100      	movs	r1, #0
 8005db6:	e003      	b.n	8005dc0 <LoopCopyDataInit>

08005db8 <CopyDataInit>:
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <LoopFillZerobss+0x18>)
 8005dba:	585b      	ldr	r3, [r3, r1]
 8005dbc:	5043      	str	r3, [r0, r1]
 8005dbe:	3104      	adds	r1, #4

08005dc0 <LoopCopyDataInit>:
 8005dc0:	480b      	ldr	r0, [pc, #44]	; (8005df0 <LoopFillZerobss+0x1c>)
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <LoopFillZerobss+0x20>)
 8005dc4:	1842      	adds	r2, r0, r1
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3f6      	bcc.n	8005db8 <CopyDataInit>
 8005dca:	4a0b      	ldr	r2, [pc, #44]	; (8005df8 <LoopFillZerobss+0x24>)
 8005dcc:	e002      	b.n	8005dd4 <LoopFillZerobss>

08005dce <FillZerobss>:
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f842 3b04 	str.w	r3, [r2], #4

08005dd4 <LoopFillZerobss>:
 8005dd4:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <LoopFillZerobss+0x28>)
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d3f9      	bcc.n	8005dce <FillZerobss>
 8005dda:	f7ff ffd3 	bl	8005d84 <SystemInit>
 8005dde:	f005 fc19 	bl	800b614 <__libc_init_array>
 8005de2:	f7fb ff69 	bl	8001cb8 <main>
 8005de6:	4770      	bx	lr
 8005de8:	20020000 	.word	0x20020000
 8005dec:	080105c0 	.word	0x080105c0
 8005df0:	20000000 	.word	0x20000000
 8005df4:	200001e0 	.word	0x200001e0
 8005df8:	200001e0 	.word	0x200001e0
 8005dfc:	20000f30 	.word	0x20000f30

08005e00 <ADC_IRQHandler>:
 8005e00:	e7fe      	b.n	8005e00 <ADC_IRQHandler>
	...

08005e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <HAL_Init+0x40>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <HAL_Init+0x40>)
 8005e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_Init+0x40>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <HAL_Init+0x40>)
 8005e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <HAL_Init+0x40>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <HAL_Init+0x40>)
 8005e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e2c:	2003      	movs	r0, #3
 8005e2e:	f000 fd37 	bl	80068a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e32:	2000      	movs	r0, #0
 8005e34:	f000 f808 	bl	8005e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e38:	f7ff f98e 	bl	8005158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023c00 	.word	0x40023c00

08005e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_InitTick+0x54>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_InitTick+0x58>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fd4f 	bl	800690a <HAL_SYSTICK_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e00e      	b.n	8005e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d80a      	bhi.n	8005e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	f000 fd17 	bl	80068b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e88:	4a06      	ldr	r2, [pc, #24]	; (8005ea4 <HAL_InitTick+0x5c>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e000      	b.n	8005e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000000 	.word	0x20000000
 8005ea0:	20000008 	.word	0x20000008
 8005ea4:	20000004 	.word	0x20000004

08005ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005eac:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_IncTick+0x20>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_IncTick+0x24>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <HAL_IncTick+0x24>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000008 	.word	0x20000008
 8005ecc:	20000f28 	.word	0x20000f28

08005ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_GetTick+0x14>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000f28 	.word	0x20000f28

08005ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ef0:	f7ff ffee 	bl	8005ed0 <HAL_GetTick>
 8005ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d005      	beq.n	8005f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_Delay+0x40>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f0e:	bf00      	nop
 8005f10:	f7ff ffde 	bl	8005ed0 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d8f7      	bhi.n	8005f10 <HAL_Delay+0x28>
  {
  }
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000008 	.word	0x20000008

08005f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e033      	b.n	8005faa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff f92c 	bl	80051a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d118      	bne.n	8005f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f72:	f023 0302 	bic.w	r3, r3, #2
 8005f76:	f043 0202 	orr.w	r2, r3, #2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa40 	bl	8006404 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
 8005f9a:	e001      	b.n	8005fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_ADC_Start_DMA+0x1e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0cc      	b.n	800616c <HAL_ADC_Start_DMA+0x1b8>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d018      	beq.n	800601a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ff8:	4b5e      	ldr	r3, [pc, #376]	; (8006174 <HAL_ADC_Start_DMA+0x1c0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <HAL_ADC_Start_DMA+0x1c4>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	0c9a      	lsrs	r2, r3, #18
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800600c:	e002      	b.n	8006014 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3b01      	subs	r3, #1
 8006012:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f9      	bne.n	800600e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b01      	cmp	r3, #1
 8006026:	f040 80a0 	bne.w	800616a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006054:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006068:	d106      	bne.n	8006078 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	f023 0206 	bic.w	r2, r3, #6
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	645a      	str	r2, [r3, #68]	; 0x44
 8006076:	e002      	b.n	800607e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006086:	4b3d      	ldr	r3, [pc, #244]	; (800617c <HAL_ADC_Start_DMA+0x1c8>)
 8006088:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	4a3c      	ldr	r2, [pc, #240]	; (8006180 <HAL_ADC_Start_DMA+0x1cc>)
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	4a3b      	ldr	r2, [pc, #236]	; (8006184 <HAL_ADC_Start_DMA+0x1d0>)
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	4a3a      	ldr	r2, [pc, #232]	; (8006188 <HAL_ADC_Start_DMA+0x1d4>)
 80060a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80060ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	334c      	adds	r3, #76	; 0x4c
 80060d6:	4619      	mov	r1, r3
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f000 fcd0 	bl	8006a80 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d12a      	bne.n	8006142 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a26      	ldr	r2, [pc, #152]	; (800618c <HAL_ADC_Start_DMA+0x1d8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d015      	beq.n	8006122 <HAL_ADC_Start_DMA+0x16e>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a25      	ldr	r2, [pc, #148]	; (8006190 <HAL_ADC_Start_DMA+0x1dc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d105      	bne.n	800610c <HAL_ADC_Start_DMA+0x158>
 8006100:	4b1e      	ldr	r3, [pc, #120]	; (800617c <HAL_ADC_Start_DMA+0x1c8>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <HAL_ADC_Start_DMA+0x1e0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d129      	bne.n	800616a <HAL_ADC_Start_DMA+0x1b6>
 8006116:	4b19      	ldr	r3, [pc, #100]	; (800617c <HAL_ADC_Start_DMA+0x1c8>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d823      	bhi.n	800616a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11c      	bne.n	800616a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	e013      	b.n	800616a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a11      	ldr	r2, [pc, #68]	; (800618c <HAL_ADC_Start_DMA+0x1d8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10e      	bne.n	800616a <HAL_ADC_Start_DMA+0x1b6>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006168:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000000 	.word	0x20000000
 8006178:	431bde83 	.word	0x431bde83
 800617c:	40012300 	.word	0x40012300
 8006180:	080065fd 	.word	0x080065fd
 8006184:	080066b7 	.word	0x080066b7
 8006188:	080066d3 	.word	0x080066d3
 800618c:	40012000 	.word	0x40012000
 8006190:	40012100 	.word	0x40012100
 8006194:	40012200 	.word	0x40012200

08006198 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x1c>
 80061d8:	2302      	movs	r3, #2
 80061da:	e105      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x228>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b09      	cmp	r3, #9
 80061ea:	d925      	bls.n	8006238 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68d9      	ldr	r1, [r3, #12]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	4613      	mov	r3, r2
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	4413      	add	r3, r2
 8006200:	3b1e      	subs	r3, #30
 8006202:	2207      	movs	r2, #7
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	43da      	mvns	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	400a      	ands	r2, r1
 8006210:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68d9      	ldr	r1, [r3, #12]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	4618      	mov	r0, r3
 8006224:	4603      	mov	r3, r0
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4403      	add	r3, r0
 800622a:	3b1e      	subs	r3, #30
 800622c:	409a      	lsls	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e022      	b.n	800627e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6919      	ldr	r1, [r3, #16]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	4613      	mov	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	2207      	movs	r2, #7
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43da      	mvns	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	400a      	ands	r2, r1
 800625a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6919      	ldr	r1, [r3, #16]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	4618      	mov	r0, r3
 800626e:	4603      	mov	r3, r0
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4403      	add	r3, r0
 8006274:	409a      	lsls	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b06      	cmp	r3, #6
 8006284:	d824      	bhi.n	80062d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	3b05      	subs	r3, #5
 8006298:	221f      	movs	r2, #31
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43da      	mvns	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	400a      	ands	r2, r1
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4618      	mov	r0, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	3b05      	subs	r3, #5
 80062c2:	fa00 f203 	lsl.w	r2, r0, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34
 80062ce:	e04c      	b.n	800636a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d824      	bhi.n	8006322 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	3b23      	subs	r3, #35	; 0x23
 80062ea:	221f      	movs	r2, #31
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43da      	mvns	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	400a      	ands	r2, r1
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	4618      	mov	r0, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	3b23      	subs	r3, #35	; 0x23
 8006314:	fa00 f203 	lsl.w	r2, r0, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
 8006320:	e023      	b.n	800636a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	3b41      	subs	r3, #65	; 0x41
 8006334:	221f      	movs	r2, #31
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43da      	mvns	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	400a      	ands	r2, r1
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	4618      	mov	r0, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	3b41      	subs	r3, #65	; 0x41
 800635e:	fa00 f203 	lsl.w	r2, r0, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800636a:	4b22      	ldr	r3, [pc, #136]	; (80063f4 <HAL_ADC_ConfigChannel+0x234>)
 800636c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <HAL_ADC_ConfigChannel+0x238>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d109      	bne.n	800638c <HAL_ADC_ConfigChannel+0x1cc>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b12      	cmp	r3, #18
 800637e:	d105      	bne.n	800638c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <HAL_ADC_ConfigChannel+0x238>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d123      	bne.n	80063de <HAL_ADC_ConfigChannel+0x21e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b10      	cmp	r3, #16
 800639c:	d003      	beq.n	80063a6 <HAL_ADC_ConfigChannel+0x1e6>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b11      	cmp	r3, #17
 80063a4:	d11b      	bne.n	80063de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d111      	bne.n	80063de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <HAL_ADC_ConfigChannel+0x23c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <HAL_ADC_ConfigChannel+0x240>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	0c9a      	lsrs	r2, r3, #18
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063d0:	e002      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f9      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40012300 	.word	0x40012300
 80063f8:	40012000 	.word	0x40012000
 80063fc:	20000000 	.word	0x20000000
 8006400:	431bde83 	.word	0x431bde83

08006404 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800640c:	4b79      	ldr	r3, [pc, #484]	; (80065f4 <ADC_Init+0x1f0>)
 800640e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	431a      	orrs	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800645c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6859      	ldr	r1, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6899      	ldr	r1, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	4a58      	ldr	r2, [pc, #352]	; (80065f8 <ADC_Init+0x1f4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d022      	beq.n	80064e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6899      	ldr	r1, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
 80064e0:	e00f      	b.n	8006502 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006500:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0202 	bic.w	r2, r2, #2
 8006510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6899      	ldr	r1, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	7e1b      	ldrb	r3, [r3, #24]
 800651c:	005a      	lsls	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800654e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	3b01      	subs	r3, #1
 800655c:	035a      	lsls	r2, r3, #13
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	e007      	b.n	8006578 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006576:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	3b01      	subs	r3, #1
 8006594:	051a      	lsls	r2, r3, #20
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6899      	ldr	r1, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065ba:	025a      	lsls	r2, r3, #9
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6899      	ldr	r1, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	029a      	lsls	r2, r3, #10
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	40012300 	.word	0x40012300
 80065f8:	0f000001 	.word	0x0f000001

080065fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006612:	2b00      	cmp	r3, #0
 8006614:	d13c      	bne.n	8006690 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d12b      	bne.n	8006688 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006634:	2b00      	cmp	r3, #0
 8006636:	d127      	bne.n	8006688 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006650:	2b00      	cmp	r3, #0
 8006652:	d119      	bne.n	8006688 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0220 	bic.w	r2, r2, #32
 8006662:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	f043 0201 	orr.w	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7fd ff51 	bl	8004530 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800668e:	e00e      	b.n	80066ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fd85 	bl	80061ac <HAL_ADC_ErrorCallback>
}
 80066a2:	e004      	b.n	80066ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
}
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fd67 	bl	8006198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2240      	movs	r2, #64	; 0x40
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f043 0204 	orr.w	r2, r3, #4
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fd5a 	bl	80061ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <__NVIC_SetPriorityGrouping+0x44>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800671c:	4013      	ands	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800672c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <__NVIC_SetPriorityGrouping+0x44>)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	60d3      	str	r3, [r2, #12]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	e000ed00 	.word	0xe000ed00

08006748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <__NVIC_GetPriorityGrouping+0x18>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	0a1b      	lsrs	r3, r3, #8
 8006752:	f003 0307 	and.w	r3, r3, #7
}
 8006756:	4618      	mov	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	e000ed00 	.word	0xe000ed00

08006764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800676e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006772:	2b00      	cmp	r3, #0
 8006774:	db0b      	blt.n	800678e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	f003 021f 	and.w	r2, r3, #31
 800677c:	4907      	ldr	r1, [pc, #28]	; (800679c <__NVIC_EnableIRQ+0x38>)
 800677e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	2001      	movs	r0, #1
 8006786:	fa00 f202 	lsl.w	r2, r0, r2
 800678a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	e000e100 	.word	0xe000e100

080067a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	db0a      	blt.n	80067ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	490c      	ldr	r1, [pc, #48]	; (80067ec <__NVIC_SetPriority+0x4c>)
 80067ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067be:	0112      	lsls	r2, r2, #4
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	440b      	add	r3, r1
 80067c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067c8:	e00a      	b.n	80067e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	4908      	ldr	r1, [pc, #32]	; (80067f0 <__NVIC_SetPriority+0x50>)
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	3b04      	subs	r3, #4
 80067d8:	0112      	lsls	r2, r2, #4
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	440b      	add	r3, r1
 80067de:	761a      	strb	r2, [r3, #24]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	e000e100 	.word	0xe000e100
 80067f0:	e000ed00 	.word	0xe000ed00

080067f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b089      	sub	sp, #36	; 0x24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f1c3 0307 	rsb	r3, r3, #7
 800680e:	2b04      	cmp	r3, #4
 8006810:	bf28      	it	cs
 8006812:	2304      	movcs	r3, #4
 8006814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	3304      	adds	r3, #4
 800681a:	2b06      	cmp	r3, #6
 800681c:	d902      	bls.n	8006824 <NVIC_EncodePriority+0x30>
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3b03      	subs	r3, #3
 8006822:	e000      	b.n	8006826 <NVIC_EncodePriority+0x32>
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43da      	mvns	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	401a      	ands	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800683c:	f04f 31ff 	mov.w	r1, #4294967295
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	fa01 f303 	lsl.w	r3, r1, r3
 8006846:	43d9      	mvns	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800684c:	4313      	orrs	r3, r2
         );
}
 800684e:	4618      	mov	r0, r3
 8006850:	3724      	adds	r7, #36	; 0x24
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3b01      	subs	r3, #1
 8006868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800686c:	d301      	bcc.n	8006872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800686e:	2301      	movs	r3, #1
 8006870:	e00f      	b.n	8006892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <SysTick_Config+0x40>)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3b01      	subs	r3, #1
 8006878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800687a:	210f      	movs	r1, #15
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	f7ff ff8e 	bl	80067a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <SysTick_Config+0x40>)
 8006886:	2200      	movs	r2, #0
 8006888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800688a:	4b04      	ldr	r3, [pc, #16]	; (800689c <SysTick_Config+0x40>)
 800688c:	2207      	movs	r2, #7
 800688e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	e000e010 	.word	0xe000e010

080068a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff ff29 	bl	8006700 <__NVIC_SetPriorityGrouping>
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	4603      	mov	r3, r0
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068c8:	f7ff ff3e 	bl	8006748 <__NVIC_GetPriorityGrouping>
 80068cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	6978      	ldr	r0, [r7, #20]
 80068d4:	f7ff ff8e 	bl	80067f4 <NVIC_EncodePriority>
 80068d8:	4602      	mov	r2, r0
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ff5d 	bl	80067a0 <__NVIC_SetPriority>
}
 80068e6:	bf00      	nop
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	4603      	mov	r3, r0
 80068f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff31 	bl	8006764 <__NVIC_EnableIRQ>
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ffa2 	bl	800685c <SysTick_Config>
 8006918:	4603      	mov	r3, r0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006930:	f7ff face 	bl	8005ed0 <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e099      	b.n	8006a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006960:	e00f      	b.n	8006982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006962:	f7ff fab5 	bl	8005ed0 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b05      	cmp	r3, #5
 800696e:	d908      	bls.n	8006982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2203      	movs	r2, #3
 800697a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e078      	b.n	8006a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e8      	bne.n	8006962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4b38      	ldr	r3, [pc, #224]	; (8006a7c <HAL_DMA_Init+0x158>)
 800699c:	4013      	ands	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d107      	bne.n	80069ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	4313      	orrs	r3, r2
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0307 	bic.w	r3, r3, #7
 8006a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d117      	bne.n	8006a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fadf 	bl	8006fec <DMA_CheckFifoParam>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a42:	2301      	movs	r3, #1
 8006a44:	e016      	b.n	8006a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa96 	bl	8006f80 <DMA_CalcBaseAndBitshift>
 8006a54:	4603      	mov	r3, r0
 8006a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5c:	223f      	movs	r2, #63	; 0x3f
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	f010803f 	.word	0xf010803f

08006a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_DMA_Start_IT+0x26>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e040      	b.n	8006b28 <HAL_DMA_Start_IT+0xa8>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d12f      	bne.n	8006b1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fa28 	bl	8006f24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad8:	223f      	movs	r2, #63	; 0x3f
 8006ada:	409a      	lsls	r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0216 	orr.w	r2, r2, #22
 8006aee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d007      	beq.n	8006b08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e005      	b.n	8006b26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b22:	2302      	movs	r3, #2
 8006b24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b3e:	f7ff f9c7 	bl	8005ed0 <HAL_GetTick>
 8006b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d008      	beq.n	8006b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e052      	b.n	8006c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0216 	bic.w	r2, r2, #22
 8006b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <HAL_DMA_Abort+0x62>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0208 	bic.w	r2, r2, #8
 8006ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bb2:	e013      	b.n	8006bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bb4:	f7ff f98c 	bl	8005ed0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	d90c      	bls.n	8006bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e015      	b.n	8006c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e4      	bne.n	8006bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bee:	223f      	movs	r2, #63	; 0x3f
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c1c:	4b92      	ldr	r3, [pc, #584]	; (8006e68 <HAL_DMA_IRQHandler+0x258>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a92      	ldr	r2, [pc, #584]	; (8006e6c <HAL_DMA_IRQHandler+0x25c>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	0a9b      	lsrs	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01a      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0204 	bic.w	r2, r2, #4
 8006c62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c68:	2208      	movs	r2, #8
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	2201      	movs	r2, #1
 8006c82:	409a      	lsls	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d012      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	409a      	lsls	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006caa:	f043 0202 	orr.w	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d012      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f043 0204 	orr.w	r2, r3, #4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	2210      	movs	r2, #16
 8006cee:	409a      	lsls	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d043      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03c      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	409a      	lsls	r2, r3
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d018      	beq.n	8006d52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d108      	bne.n	8006d40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d024      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	e01f      	b.n	8006d80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
 8006d50:	e016      	b.n	8006d80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0208 	bic.w	r2, r2, #8
 8006d6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	2220      	movs	r2, #32
 8006d86:	409a      	lsls	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 808e 	beq.w	8006eae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8086 	beq.w	8006eae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da6:	2220      	movs	r2, #32
 8006da8:	409a      	lsls	r2, r3
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d136      	bne.n	8006e28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0216 	bic.w	r2, r2, #22
 8006dc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <HAL_DMA_IRQHandler+0x1da>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0208 	bic.w	r2, r2, #8
 8006df8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfe:	223f      	movs	r2, #63	; 0x3f
 8006e00:	409a      	lsls	r2, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d07d      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
        }
        return;
 8006e26:	e078      	b.n	8006f1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01c      	beq.n	8006e70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d108      	bne.n	8006e56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d030      	beq.n	8006eae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
 8006e54:	e02b      	b.n	8006eae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d027      	beq.n	8006eae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
 8006e66:	e022      	b.n	8006eae <HAL_DMA_IRQHandler+0x29e>
 8006e68:	20000000 	.word	0x20000000
 8006e6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0210 	bic.w	r2, r2, #16
 8006e8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d032      	beq.n	8006f1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d022      	beq.n	8006f08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2205      	movs	r2, #5
 8006ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0201 	bic.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d307      	bcc.n	8006ef6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f2      	bne.n	8006eda <HAL_DMA_IRQHandler+0x2ca>
 8006ef4:	e000      	b.n	8006ef8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006ef6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8006f1a:	bf00      	nop
    }
  }
}
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop

08006f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d108      	bne.n	8006f64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f62:	e007      	b.n	8006f74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]
}
 8006f74:	bf00      	nop
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	3b10      	subs	r3, #16
 8006f90:	4a14      	ldr	r2, [pc, #80]	; (8006fe4 <DMA_CalcBaseAndBitshift+0x64>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f9a:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d909      	bls.n	8006fc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	659a      	str	r2, [r3, #88]	; 0x58
 8006fc0:	e007      	b.n	8006fd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	aaaaaaab 	.word	0xaaaaaaab
 8006fe8:	08010118 	.word	0x08010118

08006fec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d11f      	bne.n	8007046 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d855      	bhi.n	80070b8 <DMA_CheckFifoParam+0xcc>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <DMA_CheckFifoParam+0x28>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007025 	.word	0x08007025
 8007018:	08007037 	.word	0x08007037
 800701c:	08007025 	.word	0x08007025
 8007020:	080070b9 	.word	0x080070b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d045      	beq.n	80070bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007034:	e042      	b.n	80070bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800703e:	d13f      	bne.n	80070c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007044:	e03c      	b.n	80070c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704e:	d121      	bne.n	8007094 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d836      	bhi.n	80070c4 <DMA_CheckFifoParam+0xd8>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <DMA_CheckFifoParam+0x70>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	0800706d 	.word	0x0800706d
 8007060:	08007073 	.word	0x08007073
 8007064:	0800706d 	.word	0x0800706d
 8007068:	08007085 	.word	0x08007085
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
      break;
 8007070:	e02f      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d024      	beq.n	80070c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007082:	e021      	b.n	80070c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800708c:	d11e      	bne.n	80070cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007092:	e01b      	b.n	80070cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d902      	bls.n	80070a0 <DMA_CheckFifoParam+0xb4>
 800709a:	2b03      	cmp	r3, #3
 800709c:	d003      	beq.n	80070a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800709e:	e018      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
      break;
 80070a4:	e015      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	73fb      	strb	r3, [r7, #15]
      break;
 80070b6:	e00b      	b.n	80070d0 <DMA_CheckFifoParam+0xe4>
      break;
 80070b8:	bf00      	nop
 80070ba:	e00a      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      break;
 80070bc:	bf00      	nop
 80070be:	e008      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      break;
 80070c0:	bf00      	nop
 80070c2:	e006      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      break;
 80070c4:	bf00      	nop
 80070c6:	e004      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      break;
 80070c8:	bf00      	nop
 80070ca:	e002      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <DMA_CheckFifoParam+0xe6>
      break;
 80070d0:	bf00      	nop
    }
  } 
  
  return status; 
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b089      	sub	sp, #36	; 0x24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	e16b      	b.n	80073d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070fc:	2201      	movs	r2, #1
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4013      	ands	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	429a      	cmp	r2, r3
 8007116:	f040 815a 	bne.w	80073ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d00b      	beq.n	800713a <HAL_GPIO_Init+0x5a>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d007      	beq.n	800713a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800712e:	2b11      	cmp	r3, #17
 8007130:	d003      	beq.n	800713a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b12      	cmp	r3, #18
 8007138:	d130      	bne.n	800719c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	2203      	movs	r2, #3
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	43db      	mvns	r3, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4013      	ands	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4313      	orrs	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007170:	2201      	movs	r2, #1
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	f003 0201 	and.w	r2, r3, #1
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	2203      	movs	r2, #3
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	43db      	mvns	r3, r3
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4013      	ands	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	fa02 f303 	lsl.w	r3, r2, r3
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d003      	beq.n	80071dc <HAL_GPIO_Init+0xfc>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b12      	cmp	r3, #18
 80071da:	d123      	bne.n	8007224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	08da      	lsrs	r2, r3, #3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3208      	adds	r2, #8
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	220f      	movs	r2, #15
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	43db      	mvns	r3, r3
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	4013      	ands	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	4313      	orrs	r3, r2
 8007214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	08da      	lsrs	r2, r3, #3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3208      	adds	r2, #8
 800721e:	69b9      	ldr	r1, [r7, #24]
 8007220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	2203      	movs	r2, #3
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	4013      	ands	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f003 0203 	and.w	r2, r3, #3
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4313      	orrs	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80b4 	beq.w	80073ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	4b5f      	ldr	r3, [pc, #380]	; (80073e8 <HAL_GPIO_Init+0x308>)
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	4a5e      	ldr	r2, [pc, #376]	; (80073e8 <HAL_GPIO_Init+0x308>)
 8007270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007274:	6453      	str	r3, [r2, #68]	; 0x44
 8007276:	4b5c      	ldr	r3, [pc, #368]	; (80073e8 <HAL_GPIO_Init+0x308>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007282:	4a5a      	ldr	r2, [pc, #360]	; (80073ec <HAL_GPIO_Init+0x30c>)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	089b      	lsrs	r3, r3, #2
 8007288:	3302      	adds	r3, #2
 800728a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	220f      	movs	r2, #15
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	43db      	mvns	r3, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4013      	ands	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a51      	ldr	r2, [pc, #324]	; (80073f0 <HAL_GPIO_Init+0x310>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d02b      	beq.n	8007306 <HAL_GPIO_Init+0x226>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a50      	ldr	r2, [pc, #320]	; (80073f4 <HAL_GPIO_Init+0x314>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d025      	beq.n	8007302 <HAL_GPIO_Init+0x222>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a4f      	ldr	r2, [pc, #316]	; (80073f8 <HAL_GPIO_Init+0x318>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01f      	beq.n	80072fe <HAL_GPIO_Init+0x21e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a4e      	ldr	r2, [pc, #312]	; (80073fc <HAL_GPIO_Init+0x31c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d019      	beq.n	80072fa <HAL_GPIO_Init+0x21a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_GPIO_Init+0x320>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <HAL_GPIO_Init+0x216>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a4c      	ldr	r2, [pc, #304]	; (8007404 <HAL_GPIO_Init+0x324>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00d      	beq.n	80072f2 <HAL_GPIO_Init+0x212>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a4b      	ldr	r2, [pc, #300]	; (8007408 <HAL_GPIO_Init+0x328>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <HAL_GPIO_Init+0x20e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a4a      	ldr	r2, [pc, #296]	; (800740c <HAL_GPIO_Init+0x32c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d101      	bne.n	80072ea <HAL_GPIO_Init+0x20a>
 80072e6:	2307      	movs	r3, #7
 80072e8:	e00e      	b.n	8007308 <HAL_GPIO_Init+0x228>
 80072ea:	2308      	movs	r3, #8
 80072ec:	e00c      	b.n	8007308 <HAL_GPIO_Init+0x228>
 80072ee:	2306      	movs	r3, #6
 80072f0:	e00a      	b.n	8007308 <HAL_GPIO_Init+0x228>
 80072f2:	2305      	movs	r3, #5
 80072f4:	e008      	b.n	8007308 <HAL_GPIO_Init+0x228>
 80072f6:	2304      	movs	r3, #4
 80072f8:	e006      	b.n	8007308 <HAL_GPIO_Init+0x228>
 80072fa:	2303      	movs	r3, #3
 80072fc:	e004      	b.n	8007308 <HAL_GPIO_Init+0x228>
 80072fe:	2302      	movs	r3, #2
 8007300:	e002      	b.n	8007308 <HAL_GPIO_Init+0x228>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <HAL_GPIO_Init+0x228>
 8007306:	2300      	movs	r3, #0
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	f002 0203 	and.w	r2, r2, #3
 800730e:	0092      	lsls	r2, r2, #2
 8007310:	4093      	lsls	r3, r2
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	4313      	orrs	r3, r2
 8007316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007318:	4934      	ldr	r1, [pc, #208]	; (80073ec <HAL_GPIO_Init+0x30c>)
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	089b      	lsrs	r3, r3, #2
 800731e:	3302      	adds	r3, #2
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007326:	4b3a      	ldr	r3, [pc, #232]	; (8007410 <HAL_GPIO_Init+0x330>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	43db      	mvns	r3, r3
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	4013      	ands	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800734a:	4a31      	ldr	r2, [pc, #196]	; (8007410 <HAL_GPIO_Init+0x330>)
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007350:	4b2f      	ldr	r3, [pc, #188]	; (8007410 <HAL_GPIO_Init+0x330>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	43db      	mvns	r3, r3
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	4013      	ands	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007374:	4a26      	ldr	r2, [pc, #152]	; (8007410 <HAL_GPIO_Init+0x330>)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800737a:	4b25      	ldr	r3, [pc, #148]	; (8007410 <HAL_GPIO_Init+0x330>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	43db      	mvns	r3, r3
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	4013      	ands	r3, r2
 8007388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800739e:	4a1c      	ldr	r2, [pc, #112]	; (8007410 <HAL_GPIO_Init+0x330>)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <HAL_GPIO_Init+0x330>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4013      	ands	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80073c8:	4a11      	ldr	r2, [pc, #68]	; (8007410 <HAL_GPIO_Init+0x330>)
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	3301      	adds	r3, #1
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	f67f ae90 	bls.w	80070fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80073dc:	bf00      	nop
 80073de:	3724      	adds	r7, #36	; 0x24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40023800 	.word	0x40023800
 80073ec:	40013800 	.word	0x40013800
 80073f0:	40020000 	.word	0x40020000
 80073f4:	40020400 	.word	0x40020400
 80073f8:	40020800 	.word	0x40020800
 80073fc:	40020c00 	.word	0x40020c00
 8007400:	40021000 	.word	0x40021000
 8007404:	40021400 	.word	0x40021400
 8007408:	40021800 	.word	0x40021800
 800740c:	40021c00 	.word	0x40021c00
 8007410:	40013c00 	.word	0x40013c00

08007414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	807b      	strh	r3, [r7, #2]
 8007420:	4613      	mov	r3, r2
 8007422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007424:	787b      	ldrb	r3, [r7, #1]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800742a:	887a      	ldrh	r2, [r7, #2]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007430:	e003      	b.n	800743a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007432:	887b      	ldrh	r3, [r7, #2]
 8007434:	041a      	lsls	r2, r3, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	619a      	str	r2, [r3, #24]
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	4013      	ands	r3, r2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d006      	beq.n	800746c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800745e:	4a05      	ldr	r2, [pc, #20]	; (8007474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fd f810 	bl	800448c <HAL_GPIO_EXTI_Callback>
  }
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40013c00 	.word	0x40013c00

08007478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e11f      	b.n	80076ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fd fefa 	bl	8005298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	; 0x24
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074dc:	f002 f826 	bl	800952c <HAL_RCC_GetPCLK1Freq>
 80074e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4a7b      	ldr	r2, [pc, #492]	; (80076d4 <HAL_I2C_Init+0x25c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d807      	bhi.n	80074fc <HAL_I2C_Init+0x84>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a7a      	ldr	r2, [pc, #488]	; (80076d8 <HAL_I2C_Init+0x260>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bf94      	ite	ls
 80074f4:	2301      	movls	r3, #1
 80074f6:	2300      	movhi	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	e006      	b.n	800750a <HAL_I2C_Init+0x92>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4a77      	ldr	r2, [pc, #476]	; (80076dc <HAL_I2C_Init+0x264>)
 8007500:	4293      	cmp	r3, r2
 8007502:	bf94      	ite	ls
 8007504:	2301      	movls	r3, #1
 8007506:	2300      	movhi	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e0db      	b.n	80076ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a72      	ldr	r2, [pc, #456]	; (80076e0 <HAL_I2C_Init+0x268>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	0c9b      	lsrs	r3, r3, #18
 800751c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a64      	ldr	r2, [pc, #400]	; (80076d4 <HAL_I2C_Init+0x25c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d802      	bhi.n	800754c <HAL_I2C_Init+0xd4>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	3301      	adds	r3, #1
 800754a:	e009      	b.n	8007560 <HAL_I2C_Init+0xe8>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	4a63      	ldr	r2, [pc, #396]	; (80076e4 <HAL_I2C_Init+0x26c>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	099b      	lsrs	r3, r3, #6
 800755e:	3301      	adds	r3, #1
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	430b      	orrs	r3, r1
 8007566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	4956      	ldr	r1, [pc, #344]	; (80076d4 <HAL_I2C_Init+0x25c>)
 800757c:	428b      	cmp	r3, r1
 800757e:	d80d      	bhi.n	800759c <HAL_I2C_Init+0x124>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1e59      	subs	r1, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	fbb1 f3f3 	udiv	r3, r1, r3
 800758e:	3301      	adds	r3, #1
 8007590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007594:	2b04      	cmp	r3, #4
 8007596:	bf38      	it	cc
 8007598:	2304      	movcc	r3, #4
 800759a:	e04f      	b.n	800763c <HAL_I2C_Init+0x1c4>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d111      	bne.n	80075c8 <HAL_I2C_Init+0x150>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	1e58      	subs	r0, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6859      	ldr	r1, [r3, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	440b      	add	r3, r1
 80075b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b6:	3301      	adds	r3, #1
 80075b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf0c      	ite	eq
 80075c0:	2301      	moveq	r3, #1
 80075c2:	2300      	movne	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e012      	b.n	80075ee <HAL_I2C_Init+0x176>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	1e58      	subs	r0, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6859      	ldr	r1, [r3, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	0099      	lsls	r1, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	fbb0 f3f3 	udiv	r3, r0, r3
 80075de:	3301      	adds	r3, #1
 80075e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_I2C_Init+0x17e>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e022      	b.n	800763c <HAL_I2C_Init+0x1c4>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10e      	bne.n	800761c <HAL_I2C_Init+0x1a4>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1e58      	subs	r0, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	440b      	add	r3, r1
 800760c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007610:	3301      	adds	r3, #1
 8007612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	e00f      	b.n	800763c <HAL_I2C_Init+0x1c4>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	1e58      	subs	r0, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	0099      	lsls	r1, r3, #2
 800762c:	440b      	add	r3, r1
 800762e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007632:	3301      	adds	r3, #1
 8007634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	6809      	ldr	r1, [r1, #0]
 8007640:	4313      	orrs	r3, r2
 8007642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69da      	ldr	r2, [r3, #28]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800766a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6911      	ldr	r1, [r2, #16]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68d2      	ldr	r2, [r2, #12]
 8007676:	4311      	orrs	r1, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	430b      	orrs	r3, r1
 800767e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	000186a0 	.word	0x000186a0
 80076d8:	001e847f 	.word	0x001e847f
 80076dc:	003d08ff 	.word	0x003d08ff
 80076e0:	431bde83 	.word	0x431bde83
 80076e4:	10624dd3 	.word	0x10624dd3

080076e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	461a      	mov	r2, r3
 80076f4:	460b      	mov	r3, r1
 80076f6:	817b      	strh	r3, [r7, #10]
 80076f8:	4613      	mov	r3, r2
 80076fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076fc:	f7fe fbe8 	bl	8005ed0 <HAL_GetTick>
 8007700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b20      	cmp	r3, #32
 800770c:	f040 80e0 	bne.w	80078d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	2319      	movs	r3, #25
 8007716:	2201      	movs	r2, #1
 8007718:	4970      	ldr	r1, [pc, #448]	; (80078dc <HAL_I2C_Master_Transmit+0x1f4>)
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f001 f8f0 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
 8007728:	e0d3      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_I2C_Master_Transmit+0x50>
 8007734:	2302      	movs	r3, #2
 8007736:	e0cc      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d007      	beq.n	800775e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0201 	orr.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800776c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2221      	movs	r2, #33	; 0x21
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2210      	movs	r2, #16
 800777a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	893a      	ldrh	r2, [r7, #8]
 800778e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4a50      	ldr	r2, [pc, #320]	; (80078e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800779e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077a0:	8979      	ldrh	r1, [r7, #10]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	6a3a      	ldr	r2, [r7, #32]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fde2 	bl	8008370 <I2C_MasterRequestWrite>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e08d      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80077cc:	e066      	b.n	800789c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	6a39      	ldr	r1, [r7, #32]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f001 f96a 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d107      	bne.n	80077f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e06b      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d11b      	bne.n	8007870 <HAL_I2C_Master_Transmit+0x188>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783c:	2b00      	cmp	r3, #0
 800783e:	d017      	beq.n	8007870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	6a39      	ldr	r1, [r7, #32]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 f95a 	bl	8008b2e <I2C_WaitOnBTFFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00d      	beq.n	800789c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	2b04      	cmp	r3, #4
 8007886:	d107      	bne.n	8007898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e01a      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d194      	bne.n	80077ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	00100002 	.word	0x00100002
 80078e0:	ffff0000 	.word	0xffff0000

080078e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	; 0x30
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	461a      	mov	r2, r3
 80078f0:	460b      	mov	r3, r1
 80078f2:	817b      	strh	r3, [r7, #10]
 80078f4:	4613      	mov	r3, r2
 80078f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078f8:	f7fe faea 	bl	8005ed0 <HAL_GetTick>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b20      	cmp	r3, #32
 8007908:	f040 820b 	bne.w	8007d22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2319      	movs	r3, #25
 8007912:	2201      	movs	r2, #1
 8007914:	497c      	ldr	r1, [pc, #496]	; (8007b08 <HAL_I2C_Master_Receive+0x224>)
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fff2 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
 8007924:	e1fe      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_I2C_Master_Receive+0x50>
 8007930:	2302      	movs	r3, #2
 8007932:	e1f7      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b01      	cmp	r3, #1
 8007948:	d007      	beq.n	800795a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2222      	movs	r2, #34	; 0x22
 800796e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2210      	movs	r2, #16
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	893a      	ldrh	r2, [r7, #8]
 800798a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <HAL_I2C_Master_Receive+0x228>)
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800799c:	8979      	ldrh	r1, [r7, #10]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fd66 	bl	8008474 <I2C_MasterRequestRead>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e1b8      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d113      	bne.n	80079e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ba:	2300      	movs	r3, #0
 80079bc:	623b      	str	r3, [r7, #32]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	623b      	str	r3, [r7, #32]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	e18c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d11b      	bne.n	8007a22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e16c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d11b      	bne.n	8007a62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	e14c      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a88:	e138      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	f200 80f1 	bhi.w	8007c76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d123      	bne.n	8007ae4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f001 f885 	bl	8008bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e139      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ae2:	e10b      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d14e      	bne.n	8007b8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2200      	movs	r2, #0
 8007af4:	4906      	ldr	r1, [pc, #24]	; (8007b10 <HAL_I2C_Master_Receive+0x22c>)
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 ff02 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e10e      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
 8007b06:	bf00      	nop
 8007b08:	00100002 	.word	0x00100002
 8007b0c:	ffff0000 	.word	0xffff0000
 8007b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b88:	e0b8      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2200      	movs	r2, #0
 8007b92:	4966      	ldr	r1, [pc, #408]	; (8007d2c <HAL_I2C_Master_Receive+0x448>)
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 feb3 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0bf      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	2200      	movs	r2, #0
 8007bee:	494f      	ldr	r1, [pc, #316]	; (8007d2c <HAL_I2C_Master_Receive+0x448>)
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fe85 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e091      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691a      	ldr	r2, [r3, #16]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	b2d2      	uxtb	r2, r2
 8007c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c74:	e042      	b.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 ff98 	bl	8008bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e04c      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d118      	bne.n	8007cfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f47f aec2 	bne.w	8007a8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e000      	b.n	8007d24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007d22:	2302      	movs	r3, #2
  }
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3728      	adds	r7, #40	; 0x28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	00010004 	.word	0x00010004

08007d30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	817b      	strh	r3, [r7, #10]
 8007d42:	460b      	mov	r3, r1
 8007d44:	813b      	strh	r3, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d4a:	f7fe f8c1 	bl	8005ed0 <HAL_GetTick>
 8007d4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	f040 80d9 	bne.w	8007f10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2319      	movs	r3, #25
 8007d64:	2201      	movs	r2, #1
 8007d66:	496d      	ldr	r1, [pc, #436]	; (8007f1c <HAL_I2C_Mem_Write+0x1ec>)
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fdc9 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d74:	2302      	movs	r3, #2
 8007d76:	e0cc      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_I2C_Mem_Write+0x56>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0c5      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d007      	beq.n	8007dac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2221      	movs	r2, #33	; 0x21
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2240      	movs	r2, #64	; 0x40
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a3a      	ldr	r2, [r7, #32]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a4d      	ldr	r2, [pc, #308]	; (8007f20 <HAL_I2C_Mem_Write+0x1f0>)
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dee:	88f8      	ldrh	r0, [r7, #6]
 8007df0:	893a      	ldrh	r2, [r7, #8]
 8007df2:	8979      	ldrh	r1, [r7, #10]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fc04 	bl	800860c <I2C_RequestMemoryWrite>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d052      	beq.n	8007eb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e081      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fe4a 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00d      	beq.n	8007e3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d107      	bne.n	8007e36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e06b      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d11b      	bne.n	8007eb0 <HAL_I2C_Mem_Write+0x180>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d017      	beq.n	8007eb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1aa      	bne.n	8007e0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fe36 	bl	8008b2e <I2C_WaitOnBTFFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00d      	beq.n	8007ee4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d107      	bne.n	8007ee0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ede:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e016      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e000      	b.n	8007f12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f10:	2302      	movs	r3, #2
  }
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	00100002 	.word	0x00100002
 8007f20:	ffff0000 	.word	0xffff0000

08007f24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08c      	sub	sp, #48	; 0x30
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	4611      	mov	r1, r2
 8007f30:	461a      	mov	r2, r3
 8007f32:	4603      	mov	r3, r0
 8007f34:	817b      	strh	r3, [r7, #10]
 8007f36:	460b      	mov	r3, r1
 8007f38:	813b      	strh	r3, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f3e:	f7fd ffc7 	bl	8005ed0 <HAL_GetTick>
 8007f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	f040 8208 	bne.w	8008362 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	2319      	movs	r3, #25
 8007f58:	2201      	movs	r2, #1
 8007f5a:	497b      	ldr	r1, [pc, #492]	; (8008148 <HAL_I2C_Mem_Read+0x224>)
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fccf 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e1fb      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_I2C_Mem_Read+0x56>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e1f4      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d007      	beq.n	8007fa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2222      	movs	r2, #34	; 0x22
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2240      	movs	r2, #64	; 0x40
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a5b      	ldr	r2, [pc, #364]	; (800814c <HAL_I2C_Mem_Read+0x228>)
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fe2:	88f8      	ldrh	r0, [r7, #6]
 8007fe4:	893a      	ldrh	r2, [r7, #8]
 8007fe6:	8979      	ldrh	r1, [r7, #10]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fb9e 	bl	8008734 <I2C_RequestMemoryRead>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e1b0      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d113      	bne.n	8008032 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800800a:	2300      	movs	r3, #0
 800800c:	623b      	str	r3, [r7, #32]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	623b      	str	r3, [r7, #32]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	623b      	str	r3, [r7, #32]
 800801e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e184      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008036:	2b01      	cmp	r3, #1
 8008038:	d11b      	bne.n	8008072 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e164      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008076:	2b02      	cmp	r3, #2
 8008078:	d11b      	bne.n	80080b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008088:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809a:	2300      	movs	r3, #0
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	e144      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b2:	2300      	movs	r3, #0
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80080c8:	e138      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	f200 80f1 	bhi.w	80082b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d123      	bne.n	8008124 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fd65 	bl	8008bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e139      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008122:	e10b      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008128:	2b02      	cmp	r3, #2
 800812a:	d14e      	bne.n	80081ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	2200      	movs	r2, #0
 8008134:	4906      	ldr	r1, [pc, #24]	; (8008150 <HAL_I2C_Mem_Read+0x22c>)
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fbe2 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e10e      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
 8008146:	bf00      	nop
 8008148:	00100002 	.word	0x00100002
 800814c:	ffff0000 	.word	0xffff0000
 8008150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081c8:	e0b8      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2200      	movs	r2, #0
 80081d2:	4966      	ldr	r1, [pc, #408]	; (800836c <HAL_I2C_Mem_Read+0x448>)
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fb93 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0bf      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	2200      	movs	r2, #0
 800822e:	494f      	ldr	r1, [pc, #316]	; (800836c <HAL_I2C_Mem_Read+0x448>)
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fb65 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e091      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800824e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082b4:	e042      	b.n	800833c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fc78 	bl	8008bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e04c      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b04      	cmp	r3, #4
 8008308:	d118      	bne.n	800833c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f aec2 	bne.w	80080ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	e000      	b.n	8008364 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008362:	2302      	movs	r3, #2
  }
}
 8008364:	4618      	mov	r0, r3
 8008366:	3728      	adds	r7, #40	; 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	00010004 	.word	0x00010004

08008370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	460b      	mov	r3, r1
 800837e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d006      	beq.n	800839a <I2C_MasterRequestWrite+0x2a>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d003      	beq.n	800839a <I2C_MasterRequestWrite+0x2a>
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008398:	d108      	bne.n	80083ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	e00b      	b.n	80083c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	2b12      	cmp	r3, #18
 80083b2:	d107      	bne.n	80083c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fa95 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e035      	b.n	8008462 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083fe:	d108      	bne.n	8008412 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008400:	897b      	ldrh	r3, [r7, #10]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800840e:	611a      	str	r2, [r3, #16]
 8008410:	e01b      	b.n	800844a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008412:	897b      	ldrh	r3, [r7, #10]
 8008414:	11db      	asrs	r3, r3, #7
 8008416:	b2db      	uxtb	r3, r3
 8008418:	f003 0306 	and.w	r3, r3, #6
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f063 030f 	orn	r3, r3, #15
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	490f      	ldr	r1, [pc, #60]	; (800846c <I2C_MasterRequestWrite+0xfc>)
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fabc 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e010      	b.n	8008462 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008440:	897b      	ldrh	r3, [r7, #10]
 8008442:	b2da      	uxtb	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	4908      	ldr	r1, [pc, #32]	; (8008470 <I2C_MasterRequestWrite+0x100>)
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 faac 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e000      	b.n	8008462 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	00010008 	.word	0x00010008
 8008470:	00010002 	.word	0x00010002

08008474 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af02      	add	r7, sp, #8
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	460b      	mov	r3, r1
 8008482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008498:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b08      	cmp	r3, #8
 800849e:	d006      	beq.n	80084ae <I2C_MasterRequestRead+0x3a>
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d003      	beq.n	80084ae <I2C_MasterRequestRead+0x3a>
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084ac:	d108      	bne.n	80084c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e00b      	b.n	80084d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	2b11      	cmp	r3, #17
 80084c6:	d107      	bne.n	80084d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fa0b 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00c      	beq.n	800850a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e078      	b.n	80085fc <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008512:	d108      	bne.n	8008526 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008514:	897b      	ldrh	r3, [r7, #10]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	611a      	str	r2, [r3, #16]
 8008524:	e05e      	b.n	80085e4 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008526:	897b      	ldrh	r3, [r7, #10]
 8008528:	11db      	asrs	r3, r3, #7
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f003 0306 	and.w	r3, r3, #6
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f063 030f 	orn	r3, r3, #15
 8008536:	b2da      	uxtb	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4930      	ldr	r1, [pc, #192]	; (8008604 <I2C_MasterRequestRead+0x190>)
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fa32 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e053      	b.n	80085fc <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008554:	897b      	ldrh	r3, [r7, #10]
 8008556:	b2da      	uxtb	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	4929      	ldr	r1, [pc, #164]	; (8008608 <I2C_MasterRequestRead+0x194>)
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fa22 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e043      	b.n	80085fc <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008574:	2300      	movs	r3, #0
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008598:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 f9aa 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00c      	beq.n	80085cc <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e017      	b.n	80085fc <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80085cc:	897b      	ldrh	r3, [r7, #10]
 80085ce:	11db      	asrs	r3, r3, #7
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f003 0306 	and.w	r3, r3, #6
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f063 030e 	orn	r3, r3, #14
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4907      	ldr	r1, [pc, #28]	; (8008608 <I2C_MasterRequestRead+0x194>)
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f9df 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	00010008 	.word	0x00010008
 8008608:	00010002 	.word	0x00010002

0800860c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af02      	add	r7, sp, #8
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	4608      	mov	r0, r1
 8008616:	4611      	mov	r1, r2
 8008618:	461a      	mov	r2, r3
 800861a:	4603      	mov	r3, r0
 800861c:	817b      	strh	r3, [r7, #10]
 800861e:	460b      	mov	r3, r1
 8008620:	813b      	strh	r3, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	2200      	movs	r2, #0
 800863e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f95c 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00c      	beq.n	8008668 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e05f      	b.n	8008728 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008668:	897b      	ldrh	r3, [r7, #10]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	6a3a      	ldr	r2, [r7, #32]
 800867c:	492c      	ldr	r1, [pc, #176]	; (8008730 <I2C_RequestMemoryWrite+0x124>)
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f995 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e04c      	b.n	8008728 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a6:	6a39      	ldr	r1, [r7, #32]
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f9ff 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00d      	beq.n	80086d0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d107      	bne.n	80086cc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e02b      	b.n	8008728 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d105      	bne.n	80086e2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086d6:	893b      	ldrh	r3, [r7, #8]
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	611a      	str	r2, [r3, #16]
 80086e0:	e021      	b.n	8008726 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086e2:	893b      	ldrh	r3, [r7, #8]
 80086e4:	0a1b      	lsrs	r3, r3, #8
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f2:	6a39      	ldr	r1, [r7, #32]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f9d9 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00d      	beq.n	800871c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	2b04      	cmp	r3, #4
 8008706:	d107      	bne.n	8008718 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e005      	b.n	8008728 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800871c:	893b      	ldrh	r3, [r7, #8]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	00010002 	.word	0x00010002

08008734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	461a      	mov	r2, r3
 8008742:	4603      	mov	r3, r0
 8008744:	817b      	strh	r3, [r7, #10]
 8008746:	460b      	mov	r3, r1
 8008748:	813b      	strh	r3, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800875c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800876c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	2200      	movs	r2, #0
 8008776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f8c0 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00c      	beq.n	80087a0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800879a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e0a9      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087a0:	897b      	ldrh	r3, [r7, #10]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	6a3a      	ldr	r2, [r7, #32]
 80087b4:	4951      	ldr	r1, [pc, #324]	; (80088fc <I2C_RequestMemoryRead+0x1c8>)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f8f9 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e096      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087de:	6a39      	ldr	r1, [r7, #32]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 f963 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00d      	beq.n	8008808 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d107      	bne.n	8008804 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008802:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e075      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d105      	bne.n	800881a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800880e:	893b      	ldrh	r3, [r7, #8]
 8008810:	b2da      	uxtb	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	611a      	str	r2, [r3, #16]
 8008818:	e021      	b.n	800885e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800881a:	893b      	ldrh	r3, [r7, #8]
 800881c:	0a1b      	lsrs	r3, r3, #8
 800881e:	b29b      	uxth	r3, r3
 8008820:	b2da      	uxtb	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	6a39      	ldr	r1, [r7, #32]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f93d 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00d      	beq.n	8008854 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	2b04      	cmp	r3, #4
 800883e:	d107      	bne.n	8008850 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800884e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e04f      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008854:	893b      	ldrh	r3, [r7, #8]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800885e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008860:	6a39      	ldr	r1, [r7, #32]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f922 	bl	8008aac <I2C_WaitOnTXEFlagUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00d      	beq.n	800888a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	2b04      	cmp	r3, #4
 8008874:	d107      	bne.n	8008886 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e034      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008898:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f82a 	bl	8008900 <I2C_WaitOnFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00c      	beq.n	80088cc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e013      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088cc:	897b      	ldrh	r3, [r7, #10]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	6a3a      	ldr	r2, [r7, #32]
 80088e0:	4906      	ldr	r1, [pc, #24]	; (80088fc <I2C_RequestMemoryRead+0x1c8>)
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f863 	bl	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	00010002 	.word	0x00010002

08008900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008910:	e025      	b.n	800895e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008918:	d021      	beq.n	800895e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800891a:	f7fd fad9 	bl	8005ed0 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d302      	bcc.n	8008930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d116      	bne.n	800895e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	f043 0220 	orr.w	r2, r3, #32
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e023      	b.n	80089a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	0c1b      	lsrs	r3, r3, #16
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	d10d      	bne.n	8008984 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	43da      	mvns	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4013      	ands	r3, r2
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	bf0c      	ite	eq
 800897a:	2301      	moveq	r3, #1
 800897c:	2300      	movne	r3, #0
 800897e:	b2db      	uxtb	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	e00c      	b.n	800899e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	43da      	mvns	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4013      	ands	r3, r2
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	bf0c      	ite	eq
 8008996:	2301      	moveq	r3, #1
 8008998:	2300      	movne	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d0b6      	beq.n	8008912 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089bc:	e051      	b.n	8008a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089cc:	d123      	bne.n	8008a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f043 0204 	orr.w	r2, r3, #4
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e046      	b.n	8008aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d021      	beq.n	8008a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1e:	f7fd fa57 	bl	8005ed0 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d116      	bne.n	8008a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	f043 0220 	orr.w	r2, r3, #32
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e020      	b.n	8008aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	0c1b      	lsrs	r3, r3, #16
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d10c      	bne.n	8008a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	43da      	mvns	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4013      	ands	r3, r2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bf14      	ite	ne
 8008a7e:	2301      	movne	r3, #1
 8008a80:	2300      	moveq	r3, #0
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	e00b      	b.n	8008a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	43da      	mvns	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4013      	ands	r3, r2
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bf14      	ite	ne
 8008a98:	2301      	movne	r3, #1
 8008a9a:	2300      	moveq	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d18d      	bne.n	80089be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ab8:	e02d      	b.n	8008b16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 f8ce 	bl	8008c5c <I2C_IsAcknowledgeFailed>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e02d      	b.n	8008b26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d021      	beq.n	8008b16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad2:	f7fd f9fd 	bl	8005ed0 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d302      	bcc.n	8008ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d116      	bne.n	8008b16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	f043 0220 	orr.w	r2, r3, #32
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e007      	b.n	8008b26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d1ca      	bne.n	8008aba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b3a:	e02d      	b.n	8008b98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f88d 	bl	8008c5c <I2C_IsAcknowledgeFailed>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e02d      	b.n	8008ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d021      	beq.n	8008b98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b54:	f7fd f9bc 	bl	8005ed0 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d302      	bcc.n	8008b6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d116      	bne.n	8008b98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	f043 0220 	orr.w	r2, r3, #32
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e007      	b.n	8008ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d1ca      	bne.n	8008b3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bbc:	e042      	b.n	8008c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	d119      	bne.n	8008c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f06f 0210 	mvn.w	r2, #16
 8008bd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e029      	b.n	8008c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c00:	f7fd f966 	bl	8005ed0 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d302      	bcc.n	8008c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d116      	bne.n	8008c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	f043 0220 	orr.w	r2, r3, #32
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e007      	b.n	8008c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b40      	cmp	r3, #64	; 0x40
 8008c50:	d1b5      	bne.n	8008bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c72:	d11b      	bne.n	8008cac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	f043 0204 	orr.w	r2, r3, #4
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
	...

08008cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e25b      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d075      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cda:	4ba3      	ldr	r3, [pc, #652]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 030c 	and.w	r3, r3, #12
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d00c      	beq.n	8008d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ce6:	4ba0      	ldr	r3, [pc, #640]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	d112      	bne.n	8008d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cf2:	4b9d      	ldr	r3, [pc, #628]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cfe:	d10b      	bne.n	8008d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d00:	4b99      	ldr	r3, [pc, #612]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d05b      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x108>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d157      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e236      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d20:	d106      	bne.n	8008d30 <HAL_RCC_OscConfig+0x74>
 8008d22:	4b91      	ldr	r3, [pc, #580]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a90      	ldr	r2, [pc, #576]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	e01d      	b.n	8008d6c <HAL_RCC_OscConfig+0xb0>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d38:	d10c      	bne.n	8008d54 <HAL_RCC_OscConfig+0x98>
 8008d3a:	4b8b      	ldr	r3, [pc, #556]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a8a      	ldr	r2, [pc, #552]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	4b88      	ldr	r3, [pc, #544]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a87      	ldr	r2, [pc, #540]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	e00b      	b.n	8008d6c <HAL_RCC_OscConfig+0xb0>
 8008d54:	4b84      	ldr	r3, [pc, #528]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a83      	ldr	r2, [pc, #524]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	4b81      	ldr	r3, [pc, #516]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a80      	ldr	r2, [pc, #512]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d013      	beq.n	8008d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d74:	f7fd f8ac 	bl	8005ed0 <HAL_GetTick>
 8008d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d7a:	e008      	b.n	8008d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d7c:	f7fd f8a8 	bl	8005ed0 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b64      	cmp	r3, #100	; 0x64
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e1fb      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d8e:	4b76      	ldr	r3, [pc, #472]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f0      	beq.n	8008d7c <HAL_RCC_OscConfig+0xc0>
 8008d9a:	e014      	b.n	8008dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d9c:	f7fd f898 	bl	8005ed0 <HAL_GetTick>
 8008da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008da4:	f7fd f894 	bl	8005ed0 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b64      	cmp	r3, #100	; 0x64
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e1e7      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008db6:	4b6c      	ldr	r3, [pc, #432]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f0      	bne.n	8008da4 <HAL_RCC_OscConfig+0xe8>
 8008dc2:	e000      	b.n	8008dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d063      	beq.n	8008e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dd2:	4b65      	ldr	r3, [pc, #404]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 030c 	and.w	r3, r3, #12
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00b      	beq.n	8008df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dde:	4b62      	ldr	r3, [pc, #392]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008de6:	2b08      	cmp	r3, #8
 8008de8:	d11c      	bne.n	8008e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dea:	4b5f      	ldr	r3, [pc, #380]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d116      	bne.n	8008e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008df6:	4b5c      	ldr	r3, [pc, #368]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_RCC_OscConfig+0x152>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d001      	beq.n	8008e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e1bb      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e0e:	4b56      	ldr	r3, [pc, #344]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	4952      	ldr	r1, [pc, #328]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e22:	e03a      	b.n	8008e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d020      	beq.n	8008e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e2c:	4b4f      	ldr	r3, [pc, #316]	; (8008f6c <HAL_RCC_OscConfig+0x2b0>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e32:	f7fd f84d 	bl	8005ed0 <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e3a:	f7fd f849 	bl	8005ed0 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e19c      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e4c:	4b46      	ldr	r3, [pc, #280]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0f0      	beq.n	8008e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e58:	4b43      	ldr	r3, [pc, #268]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	4940      	ldr	r1, [pc, #256]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	600b      	str	r3, [r1, #0]
 8008e6c:	e015      	b.n	8008e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e6e:	4b3f      	ldr	r3, [pc, #252]	; (8008f6c <HAL_RCC_OscConfig+0x2b0>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e74:	f7fd f82c 	bl	8005ed0 <HAL_GetTick>
 8008e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e7c:	f7fd f828 	bl	8005ed0 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e17b      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f0      	bne.n	8008e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d030      	beq.n	8008f08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d016      	beq.n	8008edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eae:	4b30      	ldr	r3, [pc, #192]	; (8008f70 <HAL_RCC_OscConfig+0x2b4>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb4:	f7fd f80c 	bl	8005ed0 <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ebc:	f7fd f808 	bl	8005ed0 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e15b      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ece:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f0      	beq.n	8008ebc <HAL_RCC_OscConfig+0x200>
 8008eda:	e015      	b.n	8008f08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008edc:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <HAL_RCC_OscConfig+0x2b4>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ee2:	f7fc fff5 	bl	8005ed0 <HAL_GetTick>
 8008ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ee8:	e008      	b.n	8008efc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eea:	f7fc fff1 	bl	8005ed0 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d901      	bls.n	8008efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e144      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008efc:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1f0      	bne.n	8008eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 80a0 	beq.w	8009056 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f1a:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10f      	bne.n	8008f46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f26:	2300      	movs	r3, #0
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	4a0e      	ldr	r2, [pc, #56]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f34:	6413      	str	r3, [r2, #64]	; 0x40
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <HAL_RCC_OscConfig+0x2ac>)
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f3e:	60bb      	str	r3, [r7, #8]
 8008f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f42:	2301      	movs	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <HAL_RCC_OscConfig+0x2b8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d121      	bne.n	8008f96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f52:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <HAL_RCC_OscConfig+0x2b8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a07      	ldr	r2, [pc, #28]	; (8008f74 <HAL_RCC_OscConfig+0x2b8>)
 8008f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f5e:	f7fc ffb7 	bl	8005ed0 <HAL_GetTick>
 8008f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f64:	e011      	b.n	8008f8a <HAL_RCC_OscConfig+0x2ce>
 8008f66:	bf00      	nop
 8008f68:	40023800 	.word	0x40023800
 8008f6c:	42470000 	.word	0x42470000
 8008f70:	42470e80 	.word	0x42470e80
 8008f74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f78:	f7fc ffaa 	bl	8005ed0 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e0fd      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f8a:	4b81      	ldr	r3, [pc, #516]	; (8009190 <HAL_RCC_OscConfig+0x4d4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d106      	bne.n	8008fac <HAL_RCC_OscConfig+0x2f0>
 8008f9e:	4b7d      	ldr	r3, [pc, #500]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa2:	4a7c      	ldr	r2, [pc, #496]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fa4:	f043 0301 	orr.w	r3, r3, #1
 8008fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8008faa:	e01c      	b.n	8008fe6 <HAL_RCC_OscConfig+0x32a>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	2b05      	cmp	r3, #5
 8008fb2:	d10c      	bne.n	8008fce <HAL_RCC_OscConfig+0x312>
 8008fb4:	4b77      	ldr	r3, [pc, #476]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb8:	4a76      	ldr	r2, [pc, #472]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fba:	f043 0304 	orr.w	r3, r3, #4
 8008fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc0:	4b74      	ldr	r3, [pc, #464]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc4:	4a73      	ldr	r2, [pc, #460]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fc6:	f043 0301 	orr.w	r3, r3, #1
 8008fca:	6713      	str	r3, [r2, #112]	; 0x70
 8008fcc:	e00b      	b.n	8008fe6 <HAL_RCC_OscConfig+0x32a>
 8008fce:	4b71      	ldr	r3, [pc, #452]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd2:	4a70      	ldr	r2, [pc, #448]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8008fda:	4b6e      	ldr	r3, [pc, #440]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fde:	4a6d      	ldr	r2, [pc, #436]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8008fe0:	f023 0304 	bic.w	r3, r3, #4
 8008fe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d015      	beq.n	800901a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fee:	f7fc ff6f 	bl	8005ed0 <HAL_GetTick>
 8008ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff4:	e00a      	b.n	800900c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ff6:	f7fc ff6b 	bl	8005ed0 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	f241 3288 	movw	r2, #5000	; 0x1388
 8009004:	4293      	cmp	r3, r2
 8009006:	d901      	bls.n	800900c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e0bc      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800900c:	4b61      	ldr	r3, [pc, #388]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 800900e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0ee      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x33a>
 8009018:	e014      	b.n	8009044 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800901a:	f7fc ff59 	bl	8005ed0 <HAL_GetTick>
 800901e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009020:	e00a      	b.n	8009038 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009022:	f7fc ff55 	bl	8005ed0 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009030:	4293      	cmp	r3, r2
 8009032:	d901      	bls.n	8009038 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e0a6      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009038:	4b56      	ldr	r3, [pc, #344]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 800903a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1ee      	bne.n	8009022 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d105      	bne.n	8009056 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800904a:	4b52      	ldr	r3, [pc, #328]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	4a51      	ldr	r2, [pc, #324]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8009050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009054:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8092 	beq.w	8009184 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009060:	4b4c      	ldr	r3, [pc, #304]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f003 030c 	and.w	r3, r3, #12
 8009068:	2b08      	cmp	r3, #8
 800906a:	d05c      	beq.n	8009126 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d141      	bne.n	80090f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009074:	4b48      	ldr	r3, [pc, #288]	; (8009198 <HAL_RCC_OscConfig+0x4dc>)
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800907a:	f7fc ff29 	bl	8005ed0 <HAL_GetTick>
 800907e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009080:	e008      	b.n	8009094 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009082:	f7fc ff25 	bl	8005ed0 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d901      	bls.n	8009094 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e078      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009094:	4b3f      	ldr	r3, [pc, #252]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f0      	bne.n	8009082 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	019b      	lsls	r3, r3, #6
 80090b0:	431a      	orrs	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	3b01      	subs	r3, #1
 80090ba:	041b      	lsls	r3, r3, #16
 80090bc:	431a      	orrs	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	4933      	ldr	r1, [pc, #204]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090ca:	4b33      	ldr	r3, [pc, #204]	; (8009198 <HAL_RCC_OscConfig+0x4dc>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090d0:	f7fc fefe 	bl	8005ed0 <HAL_GetTick>
 80090d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090d6:	e008      	b.n	80090ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090d8:	f7fc fefa 	bl	8005ed0 <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e04d      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ea:	4b2a      	ldr	r3, [pc, #168]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f0      	beq.n	80090d8 <HAL_RCC_OscConfig+0x41c>
 80090f6:	e045      	b.n	8009184 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090f8:	4b27      	ldr	r3, [pc, #156]	; (8009198 <HAL_RCC_OscConfig+0x4dc>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090fe:	f7fc fee7 	bl	8005ed0 <HAL_GetTick>
 8009102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009104:	e008      	b.n	8009118 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009106:	f7fc fee3 	bl	8005ed0 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e036      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009118:	4b1e      	ldr	r3, [pc, #120]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f0      	bne.n	8009106 <HAL_RCC_OscConfig+0x44a>
 8009124:	e02e      	b.n	8009184 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e029      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <HAL_RCC_OscConfig+0x4d8>)
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	429a      	cmp	r2, r3
 8009144:	d11c      	bne.n	8009180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009150:	429a      	cmp	r2, r3
 8009152:	d115      	bne.n	8009180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800915a:	4013      	ands	r3, r2
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009160:	4293      	cmp	r3, r2
 8009162:	d10d      	bne.n	8009180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800916e:	429a      	cmp	r2, r3
 8009170:	d106      	bne.n	8009180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800917c:	429a      	cmp	r2, r3
 800917e:	d001      	beq.n	8009184 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	40007000 	.word	0x40007000
 8009194:	40023800 	.word	0x40023800
 8009198:	42470060 	.word	0x42470060

0800919c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e0cc      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091b0:	4b68      	ldr	r3, [pc, #416]	; (8009354 <HAL_RCC_ClockConfig+0x1b8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d90c      	bls.n	80091d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091be:	4b65      	ldr	r3, [pc, #404]	; (8009354 <HAL_RCC_ClockConfig+0x1b8>)
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	b2d2      	uxtb	r2, r2
 80091c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091c6:	4b63      	ldr	r3, [pc, #396]	; (8009354 <HAL_RCC_ClockConfig+0x1b8>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d001      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e0b8      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d020      	beq.n	8009226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091f0:	4b59      	ldr	r3, [pc, #356]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4a58      	ldr	r2, [pc, #352]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 80091f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009208:	4b53      	ldr	r3, [pc, #332]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	4a52      	ldr	r2, [pc, #328]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800920e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009214:	4b50      	ldr	r3, [pc, #320]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	494d      	ldr	r1, [pc, #308]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 8009222:	4313      	orrs	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d044      	beq.n	80092bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d107      	bne.n	800924a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800923a:	4b47      	ldr	r3, [pc, #284]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d119      	bne.n	800927a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e07f      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d003      	beq.n	800925a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009256:	2b03      	cmp	r3, #3
 8009258:	d107      	bne.n	800926a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800925a:	4b3f      	ldr	r3, [pc, #252]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e06f      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800926a:	4b3b      	ldr	r3, [pc, #236]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e067      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800927a:	4b37      	ldr	r3, [pc, #220]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f023 0203 	bic.w	r2, r3, #3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	4934      	ldr	r1, [pc, #208]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 8009288:	4313      	orrs	r3, r2
 800928a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800928c:	f7fc fe20 	bl	8005ed0 <HAL_GetTick>
 8009290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009292:	e00a      	b.n	80092aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009294:	f7fc fe1c 	bl	8005ed0 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e04f      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092aa:	4b2b      	ldr	r3, [pc, #172]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 020c 	and.w	r2, r3, #12
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d1eb      	bne.n	8009294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092bc:	4b25      	ldr	r3, [pc, #148]	; (8009354 <HAL_RCC_ClockConfig+0x1b8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d20c      	bcs.n	80092e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ca:	4b22      	ldr	r3, [pc, #136]	; (8009354 <HAL_RCC_ClockConfig+0x1b8>)
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	b2d2      	uxtb	r2, r2
 80092d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092d2:	4b20      	ldr	r3, [pc, #128]	; (8009354 <HAL_RCC_ClockConfig+0x1b8>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d001      	beq.n	80092e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e032      	b.n	800934a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d008      	beq.n	8009302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092f0:	4b19      	ldr	r3, [pc, #100]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	4916      	ldr	r1, [pc, #88]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0308 	and.w	r3, r3, #8
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800930e:	4b12      	ldr	r3, [pc, #72]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	490e      	ldr	r1, [pc, #56]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800931e:	4313      	orrs	r3, r2
 8009320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009322:	f000 f821 	bl	8009368 <HAL_RCC_GetSysClockFreq>
 8009326:	4601      	mov	r1, r0
 8009328:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <HAL_RCC_ClockConfig+0x1bc>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	091b      	lsrs	r3, r3, #4
 800932e:	f003 030f 	and.w	r3, r3, #15
 8009332:	4a0a      	ldr	r2, [pc, #40]	; (800935c <HAL_RCC_ClockConfig+0x1c0>)
 8009334:	5cd3      	ldrb	r3, [r2, r3]
 8009336:	fa21 f303 	lsr.w	r3, r1, r3
 800933a:	4a09      	ldr	r2, [pc, #36]	; (8009360 <HAL_RCC_ClockConfig+0x1c4>)
 800933c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <HAL_RCC_ClockConfig+0x1c8>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f7fc fd80 	bl	8005e48 <HAL_InitTick>

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	40023c00 	.word	0x40023c00
 8009358:	40023800 	.word	0x40023800
 800935c:	08010100 	.word	0x08010100
 8009360:	20000000 	.word	0x20000000
 8009364:	20000004 	.word	0x20000004

08009368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	607b      	str	r3, [r7, #4]
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	2300      	movs	r3, #0
 8009378:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800937e:	4b63      	ldr	r3, [pc, #396]	; (800950c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 030c 	and.w	r3, r3, #12
 8009386:	2b04      	cmp	r3, #4
 8009388:	d007      	beq.n	800939a <HAL_RCC_GetSysClockFreq+0x32>
 800938a:	2b08      	cmp	r3, #8
 800938c:	d008      	beq.n	80093a0 <HAL_RCC_GetSysClockFreq+0x38>
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 80b4 	bne.w	80094fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009394:	4b5e      	ldr	r3, [pc, #376]	; (8009510 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009396:	60bb      	str	r3, [r7, #8]
       break;
 8009398:	e0b3      	b.n	8009502 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800939a:	4b5d      	ldr	r3, [pc, #372]	; (8009510 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800939c:	60bb      	str	r3, [r7, #8]
      break;
 800939e:	e0b0      	b.n	8009502 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093a0:	4b5a      	ldr	r3, [pc, #360]	; (800950c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093aa:	4b58      	ldr	r3, [pc, #352]	; (800950c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d04a      	beq.n	800944c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093b6:	4b55      	ldr	r3, [pc, #340]	; (800950c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	099b      	lsrs	r3, r3, #6
 80093bc:	f04f 0400 	mov.w	r4, #0
 80093c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	ea03 0501 	and.w	r5, r3, r1
 80093cc:	ea04 0602 	and.w	r6, r4, r2
 80093d0:	4629      	mov	r1, r5
 80093d2:	4632      	mov	r2, r6
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	f04f 0400 	mov.w	r4, #0
 80093dc:	0154      	lsls	r4, r2, #5
 80093de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80093e2:	014b      	lsls	r3, r1, #5
 80093e4:	4619      	mov	r1, r3
 80093e6:	4622      	mov	r2, r4
 80093e8:	1b49      	subs	r1, r1, r5
 80093ea:	eb62 0206 	sbc.w	r2, r2, r6
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	f04f 0400 	mov.w	r4, #0
 80093f6:	0194      	lsls	r4, r2, #6
 80093f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80093fc:	018b      	lsls	r3, r1, #6
 80093fe:	1a5b      	subs	r3, r3, r1
 8009400:	eb64 0402 	sbc.w	r4, r4, r2
 8009404:	f04f 0100 	mov.w	r1, #0
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	00e2      	lsls	r2, r4, #3
 800940e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009412:	00d9      	lsls	r1, r3, #3
 8009414:	460b      	mov	r3, r1
 8009416:	4614      	mov	r4, r2
 8009418:	195b      	adds	r3, r3, r5
 800941a:	eb44 0406 	adc.w	r4, r4, r6
 800941e:	f04f 0100 	mov.w	r1, #0
 8009422:	f04f 0200 	mov.w	r2, #0
 8009426:	02a2      	lsls	r2, r4, #10
 8009428:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800942c:	0299      	lsls	r1, r3, #10
 800942e:	460b      	mov	r3, r1
 8009430:	4614      	mov	r4, r2
 8009432:	4618      	mov	r0, r3
 8009434:	4621      	mov	r1, r4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f04f 0400 	mov.w	r4, #0
 800943c:	461a      	mov	r2, r3
 800943e:	4623      	mov	r3, r4
 8009440:	f7f7 fc72 	bl	8000d28 <__aeabi_uldivmod>
 8009444:	4603      	mov	r3, r0
 8009446:	460c      	mov	r4, r1
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e049      	b.n	80094e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800944c:	4b2f      	ldr	r3, [pc, #188]	; (800950c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	099b      	lsrs	r3, r3, #6
 8009452:	f04f 0400 	mov.w	r4, #0
 8009456:	f240 11ff 	movw	r1, #511	; 0x1ff
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	ea03 0501 	and.w	r5, r3, r1
 8009462:	ea04 0602 	and.w	r6, r4, r2
 8009466:	4629      	mov	r1, r5
 8009468:	4632      	mov	r2, r6
 800946a:	f04f 0300 	mov.w	r3, #0
 800946e:	f04f 0400 	mov.w	r4, #0
 8009472:	0154      	lsls	r4, r2, #5
 8009474:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009478:	014b      	lsls	r3, r1, #5
 800947a:	4619      	mov	r1, r3
 800947c:	4622      	mov	r2, r4
 800947e:	1b49      	subs	r1, r1, r5
 8009480:	eb62 0206 	sbc.w	r2, r2, r6
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	f04f 0400 	mov.w	r4, #0
 800948c:	0194      	lsls	r4, r2, #6
 800948e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009492:	018b      	lsls	r3, r1, #6
 8009494:	1a5b      	subs	r3, r3, r1
 8009496:	eb64 0402 	sbc.w	r4, r4, r2
 800949a:	f04f 0100 	mov.w	r1, #0
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	00e2      	lsls	r2, r4, #3
 80094a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80094a8:	00d9      	lsls	r1, r3, #3
 80094aa:	460b      	mov	r3, r1
 80094ac:	4614      	mov	r4, r2
 80094ae:	195b      	adds	r3, r3, r5
 80094b0:	eb44 0406 	adc.w	r4, r4, r6
 80094b4:	f04f 0100 	mov.w	r1, #0
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	02a2      	lsls	r2, r4, #10
 80094be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80094c2:	0299      	lsls	r1, r3, #10
 80094c4:	460b      	mov	r3, r1
 80094c6:	4614      	mov	r4, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	4621      	mov	r1, r4
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f04f 0400 	mov.w	r4, #0
 80094d2:	461a      	mov	r2, r3
 80094d4:	4623      	mov	r3, r4
 80094d6:	f7f7 fc27 	bl	8000d28 <__aeabi_uldivmod>
 80094da:	4603      	mov	r3, r0
 80094dc:	460c      	mov	r4, r1
 80094de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	3301      	adds	r3, #1
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f8:	60bb      	str	r3, [r7, #8]
      break;
 80094fa:	e002      	b.n	8009502 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80094fe:	60bb      	str	r3, [r7, #8]
      break;
 8009500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009502:	68bb      	ldr	r3, [r7, #8]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950c:	40023800 	.word	0x40023800
 8009510:	00f42400 	.word	0x00f42400

08009514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009518:	4b03      	ldr	r3, [pc, #12]	; (8009528 <HAL_RCC_GetHCLKFreq+0x14>)
 800951a:	681b      	ldr	r3, [r3, #0]
}
 800951c:	4618      	mov	r0, r3
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	20000000 	.word	0x20000000

0800952c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009530:	f7ff fff0 	bl	8009514 <HAL_RCC_GetHCLKFreq>
 8009534:	4601      	mov	r1, r0
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	0a9b      	lsrs	r3, r3, #10
 800953c:	f003 0307 	and.w	r3, r3, #7
 8009540:	4a03      	ldr	r2, [pc, #12]	; (8009550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009542:	5cd3      	ldrb	r3, [r2, r3]
 8009544:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009548:	4618      	mov	r0, r3
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40023800 	.word	0x40023800
 8009550:	08010110 	.word	0x08010110

08009554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009558:	f7ff ffdc 	bl	8009514 <HAL_RCC_GetHCLKFreq>
 800955c:	4601      	mov	r1, r0
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	0b5b      	lsrs	r3, r3, #13
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	4a03      	ldr	r2, [pc, #12]	; (8009578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800956a:	5cd3      	ldrb	r3, [r2, r3]
 800956c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009570:	4618      	mov	r0, r3
 8009572:	bd80      	pop	{r7, pc}
 8009574:	40023800 	.word	0x40023800
 8009578:	08010110 	.word	0x08010110

0800957c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e01d      	b.n	80095ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7fb ff78 	bl	8005498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f000 fcfe 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2202      	movs	r2, #2
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b06      	cmp	r3, #6
 80095f2:	d007      	beq.n	8009604 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0201 	orr.w	r2, r2, #1
 8009602:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f042 0201 	orr.w	r2, r2, #1
 8009630:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b06      	cmp	r3, #6
 8009642:	d007      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0201 	bic.w	r2, r2, #1
 8009678:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a1a      	ldr	r2, [r3, #32]
 8009680:	f241 1311 	movw	r3, #4369	; 0x1111
 8009684:	4013      	ands	r3, r2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10f      	bne.n	80096aa <HAL_TIM_Base_Stop_IT+0x48>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6a1a      	ldr	r2, [r3, #32]
 8009690:	f240 4344 	movw	r3, #1092	; 0x444
 8009694:	4013      	ands	r3, r2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d107      	bne.n	80096aa <HAL_TIM_Base_Stop_IT+0x48>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0201 	bic.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e01d      	b.n	8009706 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d106      	bne.n	80096e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fc f876 	bl	80057d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f000 fc60 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2201      	movs	r2, #1
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f001 f85e 	bl	800a7e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a15      	ldr	r2, [pc, #84]	; (8009784 <HAL_TIM_PWM_Start+0x74>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <HAL_TIM_PWM_Start+0x2c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a14      	ldr	r2, [pc, #80]	; (8009788 <HAL_TIM_PWM_Start+0x78>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d101      	bne.n	8009740 <HAL_TIM_PWM_Start+0x30>
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <HAL_TIM_PWM_Start+0x32>
 8009740:	2300      	movs	r3, #0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d007      	beq.n	8009756 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b06      	cmp	r3, #6
 8009766:	d007      	beq.n	8009778 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0201 	orr.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40010000 	.word	0x40010000
 8009788:	40010400 	.word	0x40010400

0800978c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e01d      	b.n	80097da <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fb fe10 	bl	80053d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f000 fbf6 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b0c      	cmp	r3, #12
 80097f2:	d841      	bhi.n	8009878 <HAL_TIM_IC_Start_IT+0x94>
 80097f4:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <HAL_TIM_IC_Start_IT+0x18>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	08009831 	.word	0x08009831
 8009800:	08009879 	.word	0x08009879
 8009804:	08009879 	.word	0x08009879
 8009808:	08009879 	.word	0x08009879
 800980c:	08009843 	.word	0x08009843
 8009810:	08009879 	.word	0x08009879
 8009814:	08009879 	.word	0x08009879
 8009818:	08009879 	.word	0x08009879
 800981c:	08009855 	.word	0x08009855
 8009820:	08009879 	.word	0x08009879
 8009824:	08009879 	.word	0x08009879
 8009828:	08009879 	.word	0x08009879
 800982c:	08009867 	.word	0x08009867
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0202 	orr.w	r2, r2, #2
 800983e:	60da      	str	r2, [r3, #12]
      break;
 8009840:	e01b      	b.n	800987a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0204 	orr.w	r2, r2, #4
 8009850:	60da      	str	r2, [r3, #12]
      break;
 8009852:	e012      	b.n	800987a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0208 	orr.w	r2, r2, #8
 8009862:	60da      	str	r2, [r3, #12]
      break;
 8009864:	e009      	b.n	800987a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0210 	orr.w	r2, r2, #16
 8009874:	60da      	str	r2, [r3, #12]
      break;
 8009876:	e000      	b.n	800987a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8009878:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2201      	movs	r2, #1
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 ffae 	bl	800a7e4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b06      	cmp	r3, #6
 8009898:	d007      	beq.n	80098aa <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f042 0201 	orr.w	r2, r2, #1
 80098a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d122      	bne.n	8009910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d11b      	bne.n	8009910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0202 	mvn.w	r2, #2
 80098e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7fa fba4 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 80098fc:	e005      	b.n	800990a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fb3e 	bl	8009f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb45 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d122      	bne.n	8009964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b04      	cmp	r3, #4
 800992a:	d11b      	bne.n	8009964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f06f 0204 	mvn.w	r2, #4
 8009934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2202      	movs	r2, #2
 800993a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fa fb7a 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 8009950:	e005      	b.n	800995e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fb14 	bl	8009f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fb1b 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	2b08      	cmp	r3, #8
 8009970:	d122      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b08      	cmp	r3, #8
 800997e:	d11b      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f06f 0208 	mvn.w	r2, #8
 8009988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2204      	movs	r2, #4
 800998e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fa fb50 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 80099a4:	e005      	b.n	80099b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 faea 	bl	8009f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 faf1 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d122      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0310 	and.w	r3, r3, #16
 80099d0:	2b10      	cmp	r3, #16
 80099d2:	d11b      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0210 	mvn.w	r2, #16
 80099dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2208      	movs	r2, #8
 80099e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fa fb26 	bl	8004044 <HAL_TIM_IC_CaptureCallback>
 80099f8:	e005      	b.n	8009a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fac0 	bl	8009f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fac7 	bl	8009f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d10e      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0201 	mvn.w	r2, #1
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7fa fc2a 	bl	800428c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d10e      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a50:	2b80      	cmp	r3, #128	; 0x80
 8009a52:	d107      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 ff6c 	bl	800a93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6e:	2b40      	cmp	r3, #64	; 0x40
 8009a70:	d10e      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d107      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa8c 	bl	8009fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d10e      	bne.n	8009abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b20      	cmp	r3, #32
 8009aaa:	d107      	bne.n	8009abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0220 	mvn.w	r2, #32
 8009ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 ff36 	bl	800a928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_TIM_IC_ConfigChannel+0x1a>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e08a      	b.n	8009bf4 <HAL_TIM_IC_ConfigChannel+0x130>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d11b      	bne.n	8009b2c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f000 fcaa 	bl	800a45c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 020c 	bic.w	r2, r2, #12
 8009b16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6999      	ldr	r1, [r3, #24]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	619a      	str	r2, [r3, #24]
 8009b2a:	e05a      	b.n	8009be2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d11c      	bne.n	8009b6c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6819      	ldr	r1, [r3, #0]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f000 fd2e 	bl	800a5a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6999      	ldr	r1, [r3, #24]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	021a      	lsls	r2, r3, #8
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	619a      	str	r2, [r3, #24]
 8009b6a:	e03a      	b.n	8009be2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b08      	cmp	r3, #8
 8009b70:	d11b      	bne.n	8009baa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f000 fd7b 	bl	800a67c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69da      	ldr	r2, [r3, #28]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 020c 	bic.w	r2, r2, #12
 8009b94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69d9      	ldr	r1, [r3, #28]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	61da      	str	r2, [r3, #28]
 8009ba8:	e01b      	b.n	8009be2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6818      	ldr	r0, [r3, #0]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	6819      	ldr	r1, [r3, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f000 fd9b 	bl	800a6f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009bcc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69d9      	ldr	r1, [r3, #28]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	021a      	lsls	r2, r3, #8
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e0b4      	b.n	8009d80 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2202      	movs	r2, #2
 8009c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b0c      	cmp	r3, #12
 8009c2a:	f200 809f 	bhi.w	8009d6c <HAL_TIM_PWM_ConfigChannel+0x170>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009d6d 	.word	0x08009d6d
 8009c3c:	08009d6d 	.word	0x08009d6d
 8009c40:	08009d6d 	.word	0x08009d6d
 8009c44:	08009ca9 	.word	0x08009ca9
 8009c48:	08009d6d 	.word	0x08009d6d
 8009c4c:	08009d6d 	.word	0x08009d6d
 8009c50:	08009d6d 	.word	0x08009d6d
 8009c54:	08009ceb 	.word	0x08009ceb
 8009c58:	08009d6d 	.word	0x08009d6d
 8009c5c:	08009d6d 	.word	0x08009d6d
 8009c60:	08009d6d 	.word	0x08009d6d
 8009c64:	08009d2b 	.word	0x08009d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68b9      	ldr	r1, [r7, #8]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fa44 	bl	800a0fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699a      	ldr	r2, [r3, #24]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0208 	orr.w	r2, r2, #8
 8009c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699a      	ldr	r2, [r3, #24]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0204 	bic.w	r2, r2, #4
 8009c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6999      	ldr	r1, [r3, #24]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	691a      	ldr	r2, [r3, #16]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	619a      	str	r2, [r3, #24]
      break;
 8009ca6:	e062      	b.n	8009d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fa94 	bl	800a1dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699a      	ldr	r2, [r3, #24]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699a      	ldr	r2, [r3, #24]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6999      	ldr	r1, [r3, #24]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	021a      	lsls	r2, r3, #8
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	619a      	str	r2, [r3, #24]
      break;
 8009ce8:	e041      	b.n	8009d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fae9 	bl	800a2c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69da      	ldr	r2, [r3, #28]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0208 	orr.w	r2, r2, #8
 8009d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0204 	bic.w	r2, r2, #4
 8009d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69d9      	ldr	r1, [r3, #28]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	430a      	orrs	r2, r1
 8009d26:	61da      	str	r2, [r3, #28]
      break;
 8009d28:	e021      	b.n	8009d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fb3d 	bl	800a3b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69d9      	ldr	r1, [r3, #28]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	021a      	lsls	r2, r3, #8
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	61da      	str	r2, [r3, #28]
      break;
 8009d6a:	e000      	b.n	8009d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009d6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d101      	bne.n	8009da0 <HAL_TIM_ConfigClockSource+0x18>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	e0a6      	b.n	8009eee <HAL_TIM_ConfigClockSource+0x166>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2202      	movs	r2, #2
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	d067      	beq.n	8009ea8 <HAL_TIM_ConfigClockSource+0x120>
 8009dd8:	2b40      	cmp	r3, #64	; 0x40
 8009dda:	d80b      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x6c>
 8009ddc:	2b10      	cmp	r3, #16
 8009dde:	d073      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0x140>
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	d802      	bhi.n	8009dea <HAL_TIM_ConfigClockSource+0x62>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d06f      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009de8:	e078      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	d06c      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0x140>
 8009dee:	2b30      	cmp	r3, #48	; 0x30
 8009df0:	d06a      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009df2:	e073      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009df4:	2b70      	cmp	r3, #112	; 0x70
 8009df6:	d00d      	beq.n	8009e14 <HAL_TIM_ConfigClockSource+0x8c>
 8009df8:	2b70      	cmp	r3, #112	; 0x70
 8009dfa:	d804      	bhi.n	8009e06 <HAL_TIM_ConfigClockSource+0x7e>
 8009dfc:	2b50      	cmp	r3, #80	; 0x50
 8009dfe:	d033      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0xe0>
 8009e00:	2b60      	cmp	r3, #96	; 0x60
 8009e02:	d041      	beq.n	8009e88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009e04:	e06a      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e0a:	d066      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x152>
 8009e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e10:	d017      	beq.n	8009e42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009e12:	e063      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	6899      	ldr	r1, [r3, #8]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f000 fcbe 	bl	800a7a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	609a      	str	r2, [r3, #8]
      break;
 8009e40:	e04c      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6899      	ldr	r1, [r3, #8]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f000 fca7 	bl	800a7a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e64:	609a      	str	r2, [r3, #8]
      break;
 8009e66:	e039      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	6859      	ldr	r1, [r3, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	461a      	mov	r2, r3
 8009e76:	f000 fb65 	bl	800a544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2150      	movs	r1, #80	; 0x50
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fc74 	bl	800a76e <TIM_ITRx_SetConfig>
      break;
 8009e86:	e029      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6859      	ldr	r1, [r3, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	461a      	mov	r2, r3
 8009e96:	f000 fbc1 	bl	800a61c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2160      	movs	r1, #96	; 0x60
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fc64 	bl	800a76e <TIM_ITRx_SetConfig>
      break;
 8009ea6:	e019      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	6859      	ldr	r1, [r3, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f000 fb45 	bl	800a544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2140      	movs	r1, #64	; 0x40
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fc54 	bl	800a76e <TIM_ITRx_SetConfig>
      break;
 8009ec6:	e009      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f000 fc4b 	bl	800a76e <TIM_ITRx_SetConfig>
      break;
 8009ed8:	e000      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b0c      	cmp	r3, #12
 8009f0a:	d831      	bhi.n	8009f70 <HAL_TIM_ReadCapturedValue+0x78>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f49 	.word	0x08009f49
 8009f18:	08009f71 	.word	0x08009f71
 8009f1c:	08009f71 	.word	0x08009f71
 8009f20:	08009f71 	.word	0x08009f71
 8009f24:	08009f53 	.word	0x08009f53
 8009f28:	08009f71 	.word	0x08009f71
 8009f2c:	08009f71 	.word	0x08009f71
 8009f30:	08009f71 	.word	0x08009f71
 8009f34:	08009f5d 	.word	0x08009f5d
 8009f38:	08009f71 	.word	0x08009f71
 8009f3c:	08009f71 	.word	0x08009f71
 8009f40:	08009f71 	.word	0x08009f71
 8009f44:	08009f67 	.word	0x08009f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	60fb      	str	r3, [r7, #12]

      break;
 8009f50:	e00f      	b.n	8009f72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	60fb      	str	r3, [r7, #12]

      break;
 8009f5a:	e00a      	b.n	8009f72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f62:	60fb      	str	r3, [r7, #12]

      break;
 8009f64:	e005      	b.n	8009f72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6c:	60fb      	str	r3, [r7, #12]

      break;
 8009f6e:	e000      	b.n	8009f72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009f70:	bf00      	nop
  }

  return tmpreg;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a40      	ldr	r2, [pc, #256]	; (800a0d0 <TIM_Base_SetConfig+0x114>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d013      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fda:	d00f      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a3d      	ldr	r2, [pc, #244]	; (800a0d4 <TIM_Base_SetConfig+0x118>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00b      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a3c      	ldr	r2, [pc, #240]	; (800a0d8 <TIM_Base_SetConfig+0x11c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d007      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a3b      	ldr	r2, [pc, #236]	; (800a0dc <TIM_Base_SetConfig+0x120>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d003      	beq.n	8009ffc <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a3a      	ldr	r2, [pc, #232]	; (800a0e0 <TIM_Base_SetConfig+0x124>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d108      	bne.n	800a00e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a2f      	ldr	r2, [pc, #188]	; (800a0d0 <TIM_Base_SetConfig+0x114>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d02b      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01c:	d027      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a2c      	ldr	r2, [pc, #176]	; (800a0d4 <TIM_Base_SetConfig+0x118>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d023      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a2b      	ldr	r2, [pc, #172]	; (800a0d8 <TIM_Base_SetConfig+0x11c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d01f      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a2a      	ldr	r2, [pc, #168]	; (800a0dc <TIM_Base_SetConfig+0x120>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01b      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a29      	ldr	r2, [pc, #164]	; (800a0e0 <TIM_Base_SetConfig+0x124>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d017      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a28      	ldr	r2, [pc, #160]	; (800a0e4 <TIM_Base_SetConfig+0x128>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d013      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a27      	ldr	r2, [pc, #156]	; (800a0e8 <TIM_Base_SetConfig+0x12c>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00f      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a26      	ldr	r2, [pc, #152]	; (800a0ec <TIM_Base_SetConfig+0x130>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00b      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a25      	ldr	r2, [pc, #148]	; (800a0f0 <TIM_Base_SetConfig+0x134>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d007      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a24      	ldr	r2, [pc, #144]	; (800a0f4 <TIM_Base_SetConfig+0x138>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d003      	beq.n	800a06e <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a23      	ldr	r2, [pc, #140]	; (800a0f8 <TIM_Base_SetConfig+0x13c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d108      	bne.n	800a080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a0a      	ldr	r2, [pc, #40]	; (800a0d0 <TIM_Base_SetConfig+0x114>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d003      	beq.n	800a0b4 <TIM_Base_SetConfig+0xf8>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a0c      	ldr	r2, [pc, #48]	; (800a0e0 <TIM_Base_SetConfig+0x124>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d103      	bne.n	800a0bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	691a      	ldr	r2, [r3, #16]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	615a      	str	r2, [r3, #20]
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40000400 	.word	0x40000400
 800a0d8:	40000800 	.word	0x40000800
 800a0dc:	40000c00 	.word	0x40000c00
 800a0e0:	40010400 	.word	0x40010400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800
 800a0f0:	40001800 	.word	0x40001800
 800a0f4:	40001c00 	.word	0x40001c00
 800a0f8:	40002000 	.word	0x40002000

0800a0fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	f023 0201 	bic.w	r2, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f023 0302 	bic.w	r3, r3, #2
 800a144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a20      	ldr	r2, [pc, #128]	; (800a1d4 <TIM_OC1_SetConfig+0xd8>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_OC1_SetConfig+0x64>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a1f      	ldr	r2, [pc, #124]	; (800a1d8 <TIM_OC1_SetConfig+0xdc>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d10c      	bne.n	800a17a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f023 0308 	bic.w	r3, r3, #8
 800a166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	4313      	orrs	r3, r2
 800a170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f023 0304 	bic.w	r3, r3, #4
 800a178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a15      	ldr	r2, [pc, #84]	; (800a1d4 <TIM_OC1_SetConfig+0xd8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d003      	beq.n	800a18a <TIM_OC1_SetConfig+0x8e>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <TIM_OC1_SetConfig+0xdc>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d111      	bne.n	800a1ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	621a      	str	r2, [r3, #32]
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40010400 	.word	0x40010400

0800a1dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f023 0210 	bic.w	r2, r3, #16
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f023 0320 	bic.w	r3, r3, #32
 800a226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a22      	ldr	r2, [pc, #136]	; (800a2c0 <TIM_OC2_SetConfig+0xe4>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC2_SetConfig+0x68>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <TIM_OC2_SetConfig+0xe8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d10d      	bne.n	800a260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a25e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a17      	ldr	r2, [pc, #92]	; (800a2c0 <TIM_OC2_SetConfig+0xe4>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d003      	beq.n	800a270 <TIM_OC2_SetConfig+0x94>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <TIM_OC2_SetConfig+0xe8>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d113      	bne.n	800a298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a27e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4313      	orrs	r3, r2
 800a28a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	4313      	orrs	r3, r2
 800a296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	621a      	str	r2, [r3, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40010400 	.word	0x40010400

0800a2c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0303 	bic.w	r3, r3, #3
 800a2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a21      	ldr	r2, [pc, #132]	; (800a3a8 <TIM_OC3_SetConfig+0xe0>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d003      	beq.n	800a32e <TIM_OC3_SetConfig+0x66>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a20      	ldr	r2, [pc, #128]	; (800a3ac <TIM_OC3_SetConfig+0xe4>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d10d      	bne.n	800a34a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <TIM_OC3_SetConfig+0xe0>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d003      	beq.n	800a35a <TIM_OC3_SetConfig+0x92>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a15      	ldr	r2, [pc, #84]	; (800a3ac <TIM_OC3_SetConfig+0xe4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d113      	bne.n	800a382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	621a      	str	r2, [r3, #32]
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	40010000 	.word	0x40010000
 800a3ac:	40010400 	.word	0x40010400

0800a3b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	031b      	lsls	r3, r3, #12
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a12      	ldr	r2, [pc, #72]	; (800a454 <TIM_OC4_SetConfig+0xa4>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d003      	beq.n	800a418 <TIM_OC4_SetConfig+0x68>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a11      	ldr	r2, [pc, #68]	; (800a458 <TIM_OC4_SetConfig+0xa8>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d109      	bne.n	800a42c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a41e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	019b      	lsls	r3, r3, #6
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	4313      	orrs	r3, r2
 800a42a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40010000 	.word	0x40010000
 800a458:	40010400 	.word	0x40010400

0800a45c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	f023 0201 	bic.w	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	4a28      	ldr	r2, [pc, #160]	; (800a528 <TIM_TI1_SetConfig+0xcc>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d01b      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a490:	d017      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4a25      	ldr	r2, [pc, #148]	; (800a52c <TIM_TI1_SetConfig+0xd0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d013      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4a24      	ldr	r2, [pc, #144]	; (800a530 <TIM_TI1_SetConfig+0xd4>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00f      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4a23      	ldr	r2, [pc, #140]	; (800a534 <TIM_TI1_SetConfig+0xd8>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00b      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4a22      	ldr	r2, [pc, #136]	; (800a538 <TIM_TI1_SetConfig+0xdc>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d007      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4a21      	ldr	r2, [pc, #132]	; (800a53c <TIM_TI1_SetConfig+0xe0>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d003      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x66>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4a20      	ldr	r2, [pc, #128]	; (800a540 <TIM_TI1_SetConfig+0xe4>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d101      	bne.n	800a4c6 <TIM_TI1_SetConfig+0x6a>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <TIM_TI1_SetConfig+0x6c>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d008      	beq.n	800a4de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f023 0303 	bic.w	r3, r3, #3
 800a4d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	e003      	b.n	800a4e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f023 030a 	bic.w	r3, r3, #10
 800a500:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f003 030a 	and.w	r3, r3, #10
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	621a      	str	r2, [r3, #32]
}
 800a51a:	bf00      	nop
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	40010000 	.word	0x40010000
 800a52c:	40000400 	.word	0x40000400
 800a530:	40000800 	.word	0x40000800
 800a534:	40000c00 	.word	0x40000c00
 800a538:	40010400 	.word	0x40010400
 800a53c:	40014000 	.word	0x40014000
 800a540:	40001800 	.word	0x40001800

0800a544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	f023 0201 	bic.w	r2, r3, #1
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a56e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	011b      	lsls	r3, r3, #4
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	4313      	orrs	r3, r2
 800a578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f023 030a 	bic.w	r3, r3, #10
 800a580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4313      	orrs	r3, r2
 800a588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	621a      	str	r2, [r3, #32]
}
 800a596:	bf00      	nop
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b087      	sub	sp, #28
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
 800a5ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	f023 0210 	bic.w	r2, r3, #16
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	031b      	lsls	r3, r3, #12
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	4313      	orrs	r3, r2
 800a602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	621a      	str	r2, [r3, #32]
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	f023 0210 	bic.w	r2, r3, #16
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	031b      	lsls	r3, r3, #12
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	4313      	orrs	r3, r2
 800a650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a658:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	011b      	lsls	r3, r3, #4
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	621a      	str	r2, [r3, #32]
}
 800a670:	bf00      	nop
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f023 0303 	bic.w	r3, r3, #3
 800a6a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	011b      	lsls	r3, r3, #4
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a6cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	621a      	str	r2, [r3, #32]
}
 800a6e8:	bf00      	nop
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a720:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	021b      	lsls	r3, r3, #8
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4313      	orrs	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a732:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	031b      	lsls	r3, r3, #12
 800a738:	b29b      	uxth	r3, r3
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a746:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	031b      	lsls	r3, r3, #12
 800a74c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a76e:	b480      	push	{r7}
 800a770:	b085      	sub	sp, #20
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	f043 0307 	orr.w	r3, r3, #7
 800a790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	609a      	str	r2, [r3, #8]
}
 800a798:	bf00      	nop
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	021a      	lsls	r2, r3, #8
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	609a      	str	r2, [r3, #8]
}
 800a7d8:	bf00      	nop
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f003 031f 	and.w	r3, r3, #31
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a1a      	ldr	r2, [r3, #32]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	43db      	mvns	r3, r3
 800a806:	401a      	ands	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a1a      	ldr	r2, [r3, #32]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f003 031f 	and.w	r3, r3, #31
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	fa01 f303 	lsl.w	r3, r1, r3
 800a81c:	431a      	orrs	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	621a      	str	r2, [r3, #32]
}
 800a822:	bf00      	nop
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e05a      	b.n	800a8fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a21      	ldr	r2, [pc, #132]	; (800a90c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d022      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a894:	d01d      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a1d      	ldr	r2, [pc, #116]	; (800a910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d018      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a1b      	ldr	r2, [pc, #108]	; (800a914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d013      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a1a      	ldr	r2, [pc, #104]	; (800a918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00e      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a18      	ldr	r2, [pc, #96]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d009      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a17      	ldr	r2, [pc, #92]	; (800a920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d004      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a15      	ldr	r2, [pc, #84]	; (800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d10c      	bne.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	40010000 	.word	0x40010000
 800a910:	40000400 	.word	0x40000400
 800a914:	40000800 	.word	0x40000800
 800a918:	40000c00 	.word	0x40000c00
 800a91c:	40010400 	.word	0x40010400
 800a920:	40014000 	.word	0x40014000
 800a924:	40001800 	.word	0x40001800

0800a928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e03f      	b.n	800a9e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d106      	bne.n	800a97c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7fa ffae 	bl	80058d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2224      	movs	r2, #36	; 0x24
 800a980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68da      	ldr	r2, [r3, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fabb 	bl	800af10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	695a      	ldr	r2, [r3, #20]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b088      	sub	sp, #32
 800a9ee:	af02      	add	r7, sp, #8
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	603b      	str	r3, [r7, #0]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	f040 8083 	bne.w	800ab12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <HAL_UART_Transmit+0x2e>
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e07b      	b.n	800ab14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d101      	bne.n	800aa2a <HAL_UART_Transmit+0x40>
 800aa26:	2302      	movs	r3, #2
 800aa28:	e074      	b.n	800ab14 <HAL_UART_Transmit+0x12a>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2221      	movs	r2, #33	; 0x21
 800aa3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800aa40:	f7fb fa46 	bl	8005ed0 <HAL_GetTick>
 800aa44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	88fa      	ldrh	r2, [r7, #6]
 800aa4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	88fa      	ldrh	r2, [r7, #6]
 800aa50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800aa5a:	e042      	b.n	800aae2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa72:	d122      	bne.n	800aaba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2180      	movs	r1, #128	; 0x80
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 f9c7 	bl	800ae12 <UART_WaitOnFlagUntilTimeout>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e042      	b.n	800ab14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	881b      	ldrh	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaa0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d103      	bne.n	800aab2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	3302      	adds	r3, #2
 800aaae:	60bb      	str	r3, [r7, #8]
 800aab0:	e017      	b.n	800aae2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	3301      	adds	r3, #1
 800aab6:	60bb      	str	r3, [r7, #8]
 800aab8:	e013      	b.n	800aae2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2200      	movs	r2, #0
 800aac2:	2180      	movs	r1, #128	; 0x80
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 f9a4 	bl	800ae12 <UART_WaitOnFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e01f      	b.n	800ab14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	60ba      	str	r2, [r7, #8]
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1b7      	bne.n	800aa5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2140      	movs	r1, #64	; 0x40
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f000 f98b 	bl	800ae12 <UART_WaitOnFlagUntilTimeout>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e006      	b.n	800ab14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	e000      	b.n	800ab14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ab12:	2302      	movs	r3, #2
  }
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	4613      	mov	r3, r2
 800ab28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b20      	cmp	r3, #32
 800ab34:	d166      	bne.n	800ac04 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <HAL_UART_Receive_DMA+0x26>
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e05f      	b.n	800ac06 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d101      	bne.n	800ab54 <HAL_UART_Receive_DMA+0x38>
 800ab50:	2302      	movs	r3, #2
 800ab52:	e058      	b.n	800ac06 <HAL_UART_Receive_DMA+0xea>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	88fa      	ldrh	r2, [r7, #6]
 800ab66:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2222      	movs	r2, #34	; 0x22
 800ab72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7a:	4a25      	ldr	r2, [pc, #148]	; (800ac10 <HAL_UART_Receive_DMA+0xf4>)
 800ab7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab82:	4a24      	ldr	r2, [pc, #144]	; (800ac14 <HAL_UART_Receive_DMA+0xf8>)
 800ab84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab8a:	4a23      	ldr	r2, [pc, #140]	; (800ac18 <HAL_UART_Receive_DMA+0xfc>)
 800ab8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab92:	2200      	movs	r2, #0
 800ab94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800ab96:	f107 0308 	add.w	r3, r7, #8
 800ab9a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4619      	mov	r1, r3
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	f7fb ff67 	bl	8006a80 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800abb2:	2300      	movs	r3, #0
 800abb4:	613b      	str	r3, [r7, #16]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	613b      	str	r3, [r7, #16]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abde:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	695a      	ldr	r2, [r3, #20]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f042 0201 	orr.w	r2, r2, #1
 800abee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	695a      	ldr	r2, [r3, #20]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abfe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	e000      	b.n	800ac06 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ac04:	2302      	movs	r3, #2
  }
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	0800acfb 	.word	0x0800acfb
 800ac14:	0800ad63 	.word	0x0800ad63
 800ac18:	0800ad7f 	.word	0x0800ad7f

0800ac1c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac32:	2b80      	cmp	r3, #128	; 0x80
 800ac34:	bf0c      	ite	eq
 800ac36:	2301      	moveq	r3, #1
 800ac38:	2300      	movne	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b21      	cmp	r3, #33	; 0x21
 800ac48:	d116      	bne.n	800ac78 <HAL_UART_DMAStop+0x5c>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d013      	beq.n	800ac78 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695a      	ldr	r2, [r3, #20]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac5e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d004      	beq.n	800ac72 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fb ff5f 	bl	8006b30 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f917 	bl	800aea6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac82:	2b40      	cmp	r3, #64	; 0x40
 800ac84:	bf0c      	ite	eq
 800ac86:	2301      	moveq	r3, #1
 800ac88:	2300      	movne	r3, #0
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b22      	cmp	r3, #34	; 0x22
 800ac98:	d116      	bne.n	800acc8 <HAL_UART_DMAStop+0xac>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d013      	beq.n	800acc8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695a      	ldr	r2, [r3, #20]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acae:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fb ff37 	bl	8006b30 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f905 	bl	800aed2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800acda:	bf00      	nop
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b083      	sub	sp, #12
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acee:	bf00      	nop
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d11e      	bne.n	800ad54 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad2a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695a      	ldr	r2, [r3, #20]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0201 	bic.w	r2, r2, #1
 800ad3a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	695a      	ldr	r2, [r3, #20]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad4a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7f9 f83b 	bl	8003dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7ff ffae 	bl	800acd2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad9a:	2b80      	cmp	r3, #128	; 0x80
 800ad9c:	bf0c      	ite	eq
 800ad9e:	2301      	moveq	r3, #1
 800ada0:	2300      	movne	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b21      	cmp	r3, #33	; 0x21
 800adb0:	d108      	bne.n	800adc4 <UART_DMAError+0x46>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800adbe:	68b8      	ldr	r0, [r7, #8]
 800adc0:	f000 f871 	bl	800aea6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adce:	2b40      	cmp	r3, #64	; 0x40
 800add0:	bf0c      	ite	eq
 800add2:	2301      	moveq	r3, #1
 800add4:	2300      	movne	r3, #0
 800add6:	b2db      	uxtb	r3, r3
 800add8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b22      	cmp	r3, #34	; 0x22
 800ade4:	d108      	bne.n	800adf8 <UART_DMAError+0x7a>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800adf2:	68b8      	ldr	r0, [r7, #8]
 800adf4:	f000 f86d 	bl	800aed2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfc:	f043 0210 	orr.w	r2, r3, #16
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae04:	68b8      	ldr	r0, [r7, #8]
 800ae06:	f7ff ff6e 	bl	800ace6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	603b      	str	r3, [r7, #0]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae22:	e02c      	b.n	800ae7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2a:	d028      	beq.n	800ae7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d007      	beq.n	800ae42 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae32:	f7fb f84d 	bl	8005ed0 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d21d      	bcs.n	800ae7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68da      	ldr	r2, [r3, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	695a      	ldr	r2, [r3, #20]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 0201 	bic.w	r2, r2, #1
 800ae60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e00f      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4013      	ands	r3, r2
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	bf0c      	ite	eq
 800ae8e:	2301      	moveq	r3, #1
 800ae90:	2300      	movne	r3, #0
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	461a      	mov	r2, r3
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d0c3      	beq.n	800ae24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aebc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2220      	movs	r2, #32
 800aec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aee8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	695a      	ldr	r2, [r3, #20]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f022 0201 	bic.w	r2, r2, #1
 800aef8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
	...

0800af10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	4313      	orrs	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800af52:	f023 030c 	bic.w	r3, r3, #12
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	6812      	ldr	r2, [r2, #0]
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	430b      	orrs	r3, r1
 800af5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af7e:	f040 818b 	bne.w	800b298 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4ac1      	ldr	r2, [pc, #772]	; (800b28c <UART_SetConfig+0x37c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d005      	beq.n	800af98 <UART_SetConfig+0x88>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4abf      	ldr	r2, [pc, #764]	; (800b290 <UART_SetConfig+0x380>)
 800af92:	4293      	cmp	r3, r2
 800af94:	f040 80bd 	bne.w	800b112 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af98:	f7fe fadc 	bl	8009554 <HAL_RCC_GetPCLK2Freq>
 800af9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	461d      	mov	r5, r3
 800afa2:	f04f 0600 	mov.w	r6, #0
 800afa6:	46a8      	mov	r8, r5
 800afa8:	46b1      	mov	r9, r6
 800afaa:	eb18 0308 	adds.w	r3, r8, r8
 800afae:	eb49 0409 	adc.w	r4, r9, r9
 800afb2:	4698      	mov	r8, r3
 800afb4:	46a1      	mov	r9, r4
 800afb6:	eb18 0805 	adds.w	r8, r8, r5
 800afba:	eb49 0906 	adc.w	r9, r9, r6
 800afbe:	f04f 0100 	mov.w	r1, #0
 800afc2:	f04f 0200 	mov.w	r2, #0
 800afc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800afca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800afce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800afd2:	4688      	mov	r8, r1
 800afd4:	4691      	mov	r9, r2
 800afd6:	eb18 0005 	adds.w	r0, r8, r5
 800afda:	eb49 0106 	adc.w	r1, r9, r6
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	461d      	mov	r5, r3
 800afe4:	f04f 0600 	mov.w	r6, #0
 800afe8:	196b      	adds	r3, r5, r5
 800afea:	eb46 0406 	adc.w	r4, r6, r6
 800afee:	461a      	mov	r2, r3
 800aff0:	4623      	mov	r3, r4
 800aff2:	f7f5 fe99 	bl	8000d28 <__aeabi_uldivmod>
 800aff6:	4603      	mov	r3, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	461a      	mov	r2, r3
 800affc:	4ba5      	ldr	r3, [pc, #660]	; (800b294 <UART_SetConfig+0x384>)
 800affe:	fba3 2302 	umull	r2, r3, r3, r2
 800b002:	095b      	lsrs	r3, r3, #5
 800b004:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	461d      	mov	r5, r3
 800b00c:	f04f 0600 	mov.w	r6, #0
 800b010:	46a9      	mov	r9, r5
 800b012:	46b2      	mov	sl, r6
 800b014:	eb19 0309 	adds.w	r3, r9, r9
 800b018:	eb4a 040a 	adc.w	r4, sl, sl
 800b01c:	4699      	mov	r9, r3
 800b01e:	46a2      	mov	sl, r4
 800b020:	eb19 0905 	adds.w	r9, r9, r5
 800b024:	eb4a 0a06 	adc.w	sl, sl, r6
 800b028:	f04f 0100 	mov.w	r1, #0
 800b02c:	f04f 0200 	mov.w	r2, #0
 800b030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b03c:	4689      	mov	r9, r1
 800b03e:	4692      	mov	sl, r2
 800b040:	eb19 0005 	adds.w	r0, r9, r5
 800b044:	eb4a 0106 	adc.w	r1, sl, r6
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	461d      	mov	r5, r3
 800b04e:	f04f 0600 	mov.w	r6, #0
 800b052:	196b      	adds	r3, r5, r5
 800b054:	eb46 0406 	adc.w	r4, r6, r6
 800b058:	461a      	mov	r2, r3
 800b05a:	4623      	mov	r3, r4
 800b05c:	f7f5 fe64 	bl	8000d28 <__aeabi_uldivmod>
 800b060:	4603      	mov	r3, r0
 800b062:	460c      	mov	r4, r1
 800b064:	461a      	mov	r2, r3
 800b066:	4b8b      	ldr	r3, [pc, #556]	; (800b294 <UART_SetConfig+0x384>)
 800b068:	fba3 1302 	umull	r1, r3, r3, r2
 800b06c:	095b      	lsrs	r3, r3, #5
 800b06e:	2164      	movs	r1, #100	; 0x64
 800b070:	fb01 f303 	mul.w	r3, r1, r3
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	3332      	adds	r3, #50	; 0x32
 800b07a:	4a86      	ldr	r2, [pc, #536]	; (800b294 <UART_SetConfig+0x384>)
 800b07c:	fba2 2303 	umull	r2, r3, r2, r3
 800b080:	095b      	lsrs	r3, r3, #5
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b088:	4498      	add	r8, r3
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	461d      	mov	r5, r3
 800b08e:	f04f 0600 	mov.w	r6, #0
 800b092:	46a9      	mov	r9, r5
 800b094:	46b2      	mov	sl, r6
 800b096:	eb19 0309 	adds.w	r3, r9, r9
 800b09a:	eb4a 040a 	adc.w	r4, sl, sl
 800b09e:	4699      	mov	r9, r3
 800b0a0:	46a2      	mov	sl, r4
 800b0a2:	eb19 0905 	adds.w	r9, r9, r5
 800b0a6:	eb4a 0a06 	adc.w	sl, sl, r6
 800b0aa:	f04f 0100 	mov.w	r1, #0
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b0ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b0be:	4689      	mov	r9, r1
 800b0c0:	4692      	mov	sl, r2
 800b0c2:	eb19 0005 	adds.w	r0, r9, r5
 800b0c6:	eb4a 0106 	adc.w	r1, sl, r6
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	461d      	mov	r5, r3
 800b0d0:	f04f 0600 	mov.w	r6, #0
 800b0d4:	196b      	adds	r3, r5, r5
 800b0d6:	eb46 0406 	adc.w	r4, r6, r6
 800b0da:	461a      	mov	r2, r3
 800b0dc:	4623      	mov	r3, r4
 800b0de:	f7f5 fe23 	bl	8000d28 <__aeabi_uldivmod>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4b6a      	ldr	r3, [pc, #424]	; (800b294 <UART_SetConfig+0x384>)
 800b0ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b0ee:	095b      	lsrs	r3, r3, #5
 800b0f0:	2164      	movs	r1, #100	; 0x64
 800b0f2:	fb01 f303 	mul.w	r3, r1, r3
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	3332      	adds	r3, #50	; 0x32
 800b0fc:	4a65      	ldr	r2, [pc, #404]	; (800b294 <UART_SetConfig+0x384>)
 800b0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b102:	095b      	lsrs	r3, r3, #5
 800b104:	f003 0207 	and.w	r2, r3, #7
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4442      	add	r2, r8
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	e26f      	b.n	800b5f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b112:	f7fe fa0b 	bl	800952c <HAL_RCC_GetPCLK1Freq>
 800b116:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	461d      	mov	r5, r3
 800b11c:	f04f 0600 	mov.w	r6, #0
 800b120:	46a8      	mov	r8, r5
 800b122:	46b1      	mov	r9, r6
 800b124:	eb18 0308 	adds.w	r3, r8, r8
 800b128:	eb49 0409 	adc.w	r4, r9, r9
 800b12c:	4698      	mov	r8, r3
 800b12e:	46a1      	mov	r9, r4
 800b130:	eb18 0805 	adds.w	r8, r8, r5
 800b134:	eb49 0906 	adc.w	r9, r9, r6
 800b138:	f04f 0100 	mov.w	r1, #0
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b144:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b148:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b14c:	4688      	mov	r8, r1
 800b14e:	4691      	mov	r9, r2
 800b150:	eb18 0005 	adds.w	r0, r8, r5
 800b154:	eb49 0106 	adc.w	r1, r9, r6
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	461d      	mov	r5, r3
 800b15e:	f04f 0600 	mov.w	r6, #0
 800b162:	196b      	adds	r3, r5, r5
 800b164:	eb46 0406 	adc.w	r4, r6, r6
 800b168:	461a      	mov	r2, r3
 800b16a:	4623      	mov	r3, r4
 800b16c:	f7f5 fddc 	bl	8000d28 <__aeabi_uldivmod>
 800b170:	4603      	mov	r3, r0
 800b172:	460c      	mov	r4, r1
 800b174:	461a      	mov	r2, r3
 800b176:	4b47      	ldr	r3, [pc, #284]	; (800b294 <UART_SetConfig+0x384>)
 800b178:	fba3 2302 	umull	r2, r3, r3, r2
 800b17c:	095b      	lsrs	r3, r3, #5
 800b17e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	461d      	mov	r5, r3
 800b186:	f04f 0600 	mov.w	r6, #0
 800b18a:	46a9      	mov	r9, r5
 800b18c:	46b2      	mov	sl, r6
 800b18e:	eb19 0309 	adds.w	r3, r9, r9
 800b192:	eb4a 040a 	adc.w	r4, sl, sl
 800b196:	4699      	mov	r9, r3
 800b198:	46a2      	mov	sl, r4
 800b19a:	eb19 0905 	adds.w	r9, r9, r5
 800b19e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b1a2:	f04f 0100 	mov.w	r1, #0
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b1b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1b6:	4689      	mov	r9, r1
 800b1b8:	4692      	mov	sl, r2
 800b1ba:	eb19 0005 	adds.w	r0, r9, r5
 800b1be:	eb4a 0106 	adc.w	r1, sl, r6
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	461d      	mov	r5, r3
 800b1c8:	f04f 0600 	mov.w	r6, #0
 800b1cc:	196b      	adds	r3, r5, r5
 800b1ce:	eb46 0406 	adc.w	r4, r6, r6
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	f7f5 fda7 	bl	8000d28 <__aeabi_uldivmod>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	460c      	mov	r4, r1
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4b2c      	ldr	r3, [pc, #176]	; (800b294 <UART_SetConfig+0x384>)
 800b1e2:	fba3 1302 	umull	r1, r3, r3, r2
 800b1e6:	095b      	lsrs	r3, r3, #5
 800b1e8:	2164      	movs	r1, #100	; 0x64
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	3332      	adds	r3, #50	; 0x32
 800b1f4:	4a27      	ldr	r2, [pc, #156]	; (800b294 <UART_SetConfig+0x384>)
 800b1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1fa:	095b      	lsrs	r3, r3, #5
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b202:	4498      	add	r8, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	461d      	mov	r5, r3
 800b208:	f04f 0600 	mov.w	r6, #0
 800b20c:	46a9      	mov	r9, r5
 800b20e:	46b2      	mov	sl, r6
 800b210:	eb19 0309 	adds.w	r3, r9, r9
 800b214:	eb4a 040a 	adc.w	r4, sl, sl
 800b218:	4699      	mov	r9, r3
 800b21a:	46a2      	mov	sl, r4
 800b21c:	eb19 0905 	adds.w	r9, r9, r5
 800b220:	eb4a 0a06 	adc.w	sl, sl, r6
 800b224:	f04f 0100 	mov.w	r1, #0
 800b228:	f04f 0200 	mov.w	r2, #0
 800b22c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b238:	4689      	mov	r9, r1
 800b23a:	4692      	mov	sl, r2
 800b23c:	eb19 0005 	adds.w	r0, r9, r5
 800b240:	eb4a 0106 	adc.w	r1, sl, r6
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	461d      	mov	r5, r3
 800b24a:	f04f 0600 	mov.w	r6, #0
 800b24e:	196b      	adds	r3, r5, r5
 800b250:	eb46 0406 	adc.w	r4, r6, r6
 800b254:	461a      	mov	r2, r3
 800b256:	4623      	mov	r3, r4
 800b258:	f7f5 fd66 	bl	8000d28 <__aeabi_uldivmod>
 800b25c:	4603      	mov	r3, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	461a      	mov	r2, r3
 800b262:	4b0c      	ldr	r3, [pc, #48]	; (800b294 <UART_SetConfig+0x384>)
 800b264:	fba3 1302 	umull	r1, r3, r3, r2
 800b268:	095b      	lsrs	r3, r3, #5
 800b26a:	2164      	movs	r1, #100	; 0x64
 800b26c:	fb01 f303 	mul.w	r3, r1, r3
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	3332      	adds	r3, #50	; 0x32
 800b276:	4a07      	ldr	r2, [pc, #28]	; (800b294 <UART_SetConfig+0x384>)
 800b278:	fba2 2303 	umull	r2, r3, r2, r3
 800b27c:	095b      	lsrs	r3, r3, #5
 800b27e:	f003 0207 	and.w	r2, r3, #7
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4442      	add	r2, r8
 800b288:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b28a:	e1b2      	b.n	800b5f2 <UART_SetConfig+0x6e2>
 800b28c:	40011000 	.word	0x40011000
 800b290:	40011400 	.word	0x40011400
 800b294:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4ad7      	ldr	r2, [pc, #860]	; (800b5fc <UART_SetConfig+0x6ec>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d005      	beq.n	800b2ae <UART_SetConfig+0x39e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4ad6      	ldr	r2, [pc, #856]	; (800b600 <UART_SetConfig+0x6f0>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	f040 80d1 	bne.w	800b450 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2ae:	f7fe f951 	bl	8009554 <HAL_RCC_GetPCLK2Freq>
 800b2b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	469a      	mov	sl, r3
 800b2b8:	f04f 0b00 	mov.w	fp, #0
 800b2bc:	46d0      	mov	r8, sl
 800b2be:	46d9      	mov	r9, fp
 800b2c0:	eb18 0308 	adds.w	r3, r8, r8
 800b2c4:	eb49 0409 	adc.w	r4, r9, r9
 800b2c8:	4698      	mov	r8, r3
 800b2ca:	46a1      	mov	r9, r4
 800b2cc:	eb18 080a 	adds.w	r8, r8, sl
 800b2d0:	eb49 090b 	adc.w	r9, r9, fp
 800b2d4:	f04f 0100 	mov.w	r1, #0
 800b2d8:	f04f 0200 	mov.w	r2, #0
 800b2dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b2e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b2e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b2e8:	4688      	mov	r8, r1
 800b2ea:	4691      	mov	r9, r2
 800b2ec:	eb1a 0508 	adds.w	r5, sl, r8
 800b2f0:	eb4b 0609 	adc.w	r6, fp, r9
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	f04f 0200 	mov.w	r2, #0
 800b2fe:	f04f 0300 	mov.w	r3, #0
 800b302:	f04f 0400 	mov.w	r4, #0
 800b306:	0094      	lsls	r4, r2, #2
 800b308:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b30c:	008b      	lsls	r3, r1, #2
 800b30e:	461a      	mov	r2, r3
 800b310:	4623      	mov	r3, r4
 800b312:	4628      	mov	r0, r5
 800b314:	4631      	mov	r1, r6
 800b316:	f7f5 fd07 	bl	8000d28 <__aeabi_uldivmod>
 800b31a:	4603      	mov	r3, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	461a      	mov	r2, r3
 800b320:	4bb8      	ldr	r3, [pc, #736]	; (800b604 <UART_SetConfig+0x6f4>)
 800b322:	fba3 2302 	umull	r2, r3, r3, r2
 800b326:	095b      	lsrs	r3, r3, #5
 800b328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	469b      	mov	fp, r3
 800b330:	f04f 0c00 	mov.w	ip, #0
 800b334:	46d9      	mov	r9, fp
 800b336:	46e2      	mov	sl, ip
 800b338:	eb19 0309 	adds.w	r3, r9, r9
 800b33c:	eb4a 040a 	adc.w	r4, sl, sl
 800b340:	4699      	mov	r9, r3
 800b342:	46a2      	mov	sl, r4
 800b344:	eb19 090b 	adds.w	r9, r9, fp
 800b348:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b34c:	f04f 0100 	mov.w	r1, #0
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b35c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b360:	4689      	mov	r9, r1
 800b362:	4692      	mov	sl, r2
 800b364:	eb1b 0509 	adds.w	r5, fp, r9
 800b368:	eb4c 060a 	adc.w	r6, ip, sl
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	4619      	mov	r1, r3
 800b372:	f04f 0200 	mov.w	r2, #0
 800b376:	f04f 0300 	mov.w	r3, #0
 800b37a:	f04f 0400 	mov.w	r4, #0
 800b37e:	0094      	lsls	r4, r2, #2
 800b380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b384:	008b      	lsls	r3, r1, #2
 800b386:	461a      	mov	r2, r3
 800b388:	4623      	mov	r3, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	4631      	mov	r1, r6
 800b38e:	f7f5 fccb 	bl	8000d28 <__aeabi_uldivmod>
 800b392:	4603      	mov	r3, r0
 800b394:	460c      	mov	r4, r1
 800b396:	461a      	mov	r2, r3
 800b398:	4b9a      	ldr	r3, [pc, #616]	; (800b604 <UART_SetConfig+0x6f4>)
 800b39a:	fba3 1302 	umull	r1, r3, r3, r2
 800b39e:	095b      	lsrs	r3, r3, #5
 800b3a0:	2164      	movs	r1, #100	; 0x64
 800b3a2:	fb01 f303 	mul.w	r3, r1, r3
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	011b      	lsls	r3, r3, #4
 800b3aa:	3332      	adds	r3, #50	; 0x32
 800b3ac:	4a95      	ldr	r2, [pc, #596]	; (800b604 <UART_SetConfig+0x6f4>)
 800b3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b2:	095b      	lsrs	r3, r3, #5
 800b3b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3b8:	4498      	add	r8, r3
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	469b      	mov	fp, r3
 800b3be:	f04f 0c00 	mov.w	ip, #0
 800b3c2:	46d9      	mov	r9, fp
 800b3c4:	46e2      	mov	sl, ip
 800b3c6:	eb19 0309 	adds.w	r3, r9, r9
 800b3ca:	eb4a 040a 	adc.w	r4, sl, sl
 800b3ce:	4699      	mov	r9, r3
 800b3d0:	46a2      	mov	sl, r4
 800b3d2:	eb19 090b 	adds.w	r9, r9, fp
 800b3d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b3da:	f04f 0100 	mov.w	r1, #0
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3ee:	4689      	mov	r9, r1
 800b3f0:	4692      	mov	sl, r2
 800b3f2:	eb1b 0509 	adds.w	r5, fp, r9
 800b3f6:	eb4c 060a 	adc.w	r6, ip, sl
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	4619      	mov	r1, r3
 800b400:	f04f 0200 	mov.w	r2, #0
 800b404:	f04f 0300 	mov.w	r3, #0
 800b408:	f04f 0400 	mov.w	r4, #0
 800b40c:	0094      	lsls	r4, r2, #2
 800b40e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b412:	008b      	lsls	r3, r1, #2
 800b414:	461a      	mov	r2, r3
 800b416:	4623      	mov	r3, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	4631      	mov	r1, r6
 800b41c:	f7f5 fc84 	bl	8000d28 <__aeabi_uldivmod>
 800b420:	4603      	mov	r3, r0
 800b422:	460c      	mov	r4, r1
 800b424:	461a      	mov	r2, r3
 800b426:	4b77      	ldr	r3, [pc, #476]	; (800b604 <UART_SetConfig+0x6f4>)
 800b428:	fba3 1302 	umull	r1, r3, r3, r2
 800b42c:	095b      	lsrs	r3, r3, #5
 800b42e:	2164      	movs	r1, #100	; 0x64
 800b430:	fb01 f303 	mul.w	r3, r1, r3
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	3332      	adds	r3, #50	; 0x32
 800b43a:	4a72      	ldr	r2, [pc, #456]	; (800b604 <UART_SetConfig+0x6f4>)
 800b43c:	fba2 2303 	umull	r2, r3, r2, r3
 800b440:	095b      	lsrs	r3, r3, #5
 800b442:	f003 020f 	and.w	r2, r3, #15
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4442      	add	r2, r8
 800b44c:	609a      	str	r2, [r3, #8]
 800b44e:	e0d0      	b.n	800b5f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b450:	f7fe f86c 	bl	800952c <HAL_RCC_GetPCLK1Freq>
 800b454:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	469a      	mov	sl, r3
 800b45a:	f04f 0b00 	mov.w	fp, #0
 800b45e:	46d0      	mov	r8, sl
 800b460:	46d9      	mov	r9, fp
 800b462:	eb18 0308 	adds.w	r3, r8, r8
 800b466:	eb49 0409 	adc.w	r4, r9, r9
 800b46a:	4698      	mov	r8, r3
 800b46c:	46a1      	mov	r9, r4
 800b46e:	eb18 080a 	adds.w	r8, r8, sl
 800b472:	eb49 090b 	adc.w	r9, r9, fp
 800b476:	f04f 0100 	mov.w	r1, #0
 800b47a:	f04f 0200 	mov.w	r2, #0
 800b47e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b482:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b486:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b48a:	4688      	mov	r8, r1
 800b48c:	4691      	mov	r9, r2
 800b48e:	eb1a 0508 	adds.w	r5, sl, r8
 800b492:	eb4b 0609 	adc.w	r6, fp, r9
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4619      	mov	r1, r3
 800b49c:	f04f 0200 	mov.w	r2, #0
 800b4a0:	f04f 0300 	mov.w	r3, #0
 800b4a4:	f04f 0400 	mov.w	r4, #0
 800b4a8:	0094      	lsls	r4, r2, #2
 800b4aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b4ae:	008b      	lsls	r3, r1, #2
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4623      	mov	r3, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	f7f5 fc36 	bl	8000d28 <__aeabi_uldivmod>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	460c      	mov	r4, r1
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b50      	ldr	r3, [pc, #320]	; (800b604 <UART_SetConfig+0x6f4>)
 800b4c4:	fba3 2302 	umull	r2, r3, r3, r2
 800b4c8:	095b      	lsrs	r3, r3, #5
 800b4ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	469b      	mov	fp, r3
 800b4d2:	f04f 0c00 	mov.w	ip, #0
 800b4d6:	46d9      	mov	r9, fp
 800b4d8:	46e2      	mov	sl, ip
 800b4da:	eb19 0309 	adds.w	r3, r9, r9
 800b4de:	eb4a 040a 	adc.w	r4, sl, sl
 800b4e2:	4699      	mov	r9, r3
 800b4e4:	46a2      	mov	sl, r4
 800b4e6:	eb19 090b 	adds.w	r9, r9, fp
 800b4ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b4ee:	f04f 0100 	mov.w	r1, #0
 800b4f2:	f04f 0200 	mov.w	r2, #0
 800b4f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b502:	4689      	mov	r9, r1
 800b504:	4692      	mov	sl, r2
 800b506:	eb1b 0509 	adds.w	r5, fp, r9
 800b50a:	eb4c 060a 	adc.w	r6, ip, sl
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	4619      	mov	r1, r3
 800b514:	f04f 0200 	mov.w	r2, #0
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	f04f 0400 	mov.w	r4, #0
 800b520:	0094      	lsls	r4, r2, #2
 800b522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b526:	008b      	lsls	r3, r1, #2
 800b528:	461a      	mov	r2, r3
 800b52a:	4623      	mov	r3, r4
 800b52c:	4628      	mov	r0, r5
 800b52e:	4631      	mov	r1, r6
 800b530:	f7f5 fbfa 	bl	8000d28 <__aeabi_uldivmod>
 800b534:	4603      	mov	r3, r0
 800b536:	460c      	mov	r4, r1
 800b538:	461a      	mov	r2, r3
 800b53a:	4b32      	ldr	r3, [pc, #200]	; (800b604 <UART_SetConfig+0x6f4>)
 800b53c:	fba3 1302 	umull	r1, r3, r3, r2
 800b540:	095b      	lsrs	r3, r3, #5
 800b542:	2164      	movs	r1, #100	; 0x64
 800b544:	fb01 f303 	mul.w	r3, r1, r3
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	011b      	lsls	r3, r3, #4
 800b54c:	3332      	adds	r3, #50	; 0x32
 800b54e:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <UART_SetConfig+0x6f4>)
 800b550:	fba2 2303 	umull	r2, r3, r2, r3
 800b554:	095b      	lsrs	r3, r3, #5
 800b556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b55a:	4498      	add	r8, r3
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	469b      	mov	fp, r3
 800b560:	f04f 0c00 	mov.w	ip, #0
 800b564:	46d9      	mov	r9, fp
 800b566:	46e2      	mov	sl, ip
 800b568:	eb19 0309 	adds.w	r3, r9, r9
 800b56c:	eb4a 040a 	adc.w	r4, sl, sl
 800b570:	4699      	mov	r9, r3
 800b572:	46a2      	mov	sl, r4
 800b574:	eb19 090b 	adds.w	r9, r9, fp
 800b578:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b57c:	f04f 0100 	mov.w	r1, #0
 800b580:	f04f 0200 	mov.w	r2, #0
 800b584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b58c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b590:	4689      	mov	r9, r1
 800b592:	4692      	mov	sl, r2
 800b594:	eb1b 0509 	adds.w	r5, fp, r9
 800b598:	eb4c 060a 	adc.w	r6, ip, sl
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	f04f 0200 	mov.w	r2, #0
 800b5a6:	f04f 0300 	mov.w	r3, #0
 800b5aa:	f04f 0400 	mov.w	r4, #0
 800b5ae:	0094      	lsls	r4, r2, #2
 800b5b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b5b4:	008b      	lsls	r3, r1, #2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	4631      	mov	r1, r6
 800b5be:	f7f5 fbb3 	bl	8000d28 <__aeabi_uldivmod>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <UART_SetConfig+0x6f4>)
 800b5ca:	fba3 1302 	umull	r1, r3, r3, r2
 800b5ce:	095b      	lsrs	r3, r3, #5
 800b5d0:	2164      	movs	r1, #100	; 0x64
 800b5d2:	fb01 f303 	mul.w	r3, r1, r3
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	3332      	adds	r3, #50	; 0x32
 800b5dc:	4a09      	ldr	r2, [pc, #36]	; (800b604 <UART_SetConfig+0x6f4>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	095b      	lsrs	r3, r3, #5
 800b5e4:	f003 020f 	and.w	r2, r3, #15
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4442      	add	r2, r8
 800b5ee:	609a      	str	r2, [r3, #8]
}
 800b5f0:	e7ff      	b.n	800b5f2 <UART_SetConfig+0x6e2>
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fc:	40011000 	.word	0x40011000
 800b600:	40011400 	.word	0x40011400
 800b604:	51eb851f 	.word	0x51eb851f

0800b608 <__errno>:
 800b608:	4b01      	ldr	r3, [pc, #4]	; (800b610 <__errno+0x8>)
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	2000000c 	.word	0x2000000c

0800b614 <__libc_init_array>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4e0d      	ldr	r6, [pc, #52]	; (800b64c <__libc_init_array+0x38>)
 800b618:	4c0d      	ldr	r4, [pc, #52]	; (800b650 <__libc_init_array+0x3c>)
 800b61a:	1ba4      	subs	r4, r4, r6
 800b61c:	10a4      	asrs	r4, r4, #2
 800b61e:	2500      	movs	r5, #0
 800b620:	42a5      	cmp	r5, r4
 800b622:	d109      	bne.n	800b638 <__libc_init_array+0x24>
 800b624:	4e0b      	ldr	r6, [pc, #44]	; (800b654 <__libc_init_array+0x40>)
 800b626:	4c0c      	ldr	r4, [pc, #48]	; (800b658 <__libc_init_array+0x44>)
 800b628:	f004 fc8c 	bl	800ff44 <_init>
 800b62c:	1ba4      	subs	r4, r4, r6
 800b62e:	10a4      	asrs	r4, r4, #2
 800b630:	2500      	movs	r5, #0
 800b632:	42a5      	cmp	r5, r4
 800b634:	d105      	bne.n	800b642 <__libc_init_array+0x2e>
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b63c:	4798      	blx	r3
 800b63e:	3501      	adds	r5, #1
 800b640:	e7ee      	b.n	800b620 <__libc_init_array+0xc>
 800b642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b646:	4798      	blx	r3
 800b648:	3501      	adds	r5, #1
 800b64a:	e7f2      	b.n	800b632 <__libc_init_array+0x1e>
 800b64c:	080105b8 	.word	0x080105b8
 800b650:	080105b8 	.word	0x080105b8
 800b654:	080105b8 	.word	0x080105b8
 800b658:	080105bc 	.word	0x080105bc

0800b65c <memcpy>:
 800b65c:	b510      	push	{r4, lr}
 800b65e:	1e43      	subs	r3, r0, #1
 800b660:	440a      	add	r2, r1
 800b662:	4291      	cmp	r1, r2
 800b664:	d100      	bne.n	800b668 <memcpy+0xc>
 800b666:	bd10      	pop	{r4, pc}
 800b668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b66c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b670:	e7f7      	b.n	800b662 <memcpy+0x6>

0800b672 <memset>:
 800b672:	4402      	add	r2, r0
 800b674:	4603      	mov	r3, r0
 800b676:	4293      	cmp	r3, r2
 800b678:	d100      	bne.n	800b67c <memset+0xa>
 800b67a:	4770      	bx	lr
 800b67c:	f803 1b01 	strb.w	r1, [r3], #1
 800b680:	e7f9      	b.n	800b676 <memset+0x4>

0800b682 <__cvt>:
 800b682:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b686:	ec55 4b10 	vmov	r4, r5, d0
 800b68a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b68c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b690:	2d00      	cmp	r5, #0
 800b692:	460e      	mov	r6, r1
 800b694:	4691      	mov	r9, r2
 800b696:	4619      	mov	r1, r3
 800b698:	bfb8      	it	lt
 800b69a:	4622      	movlt	r2, r4
 800b69c:	462b      	mov	r3, r5
 800b69e:	f027 0720 	bic.w	r7, r7, #32
 800b6a2:	bfbb      	ittet	lt
 800b6a4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b6a8:	461d      	movlt	r5, r3
 800b6aa:	2300      	movge	r3, #0
 800b6ac:	232d      	movlt	r3, #45	; 0x2d
 800b6ae:	bfb8      	it	lt
 800b6b0:	4614      	movlt	r4, r2
 800b6b2:	2f46      	cmp	r7, #70	; 0x46
 800b6b4:	700b      	strb	r3, [r1, #0]
 800b6b6:	d004      	beq.n	800b6c2 <__cvt+0x40>
 800b6b8:	2f45      	cmp	r7, #69	; 0x45
 800b6ba:	d100      	bne.n	800b6be <__cvt+0x3c>
 800b6bc:	3601      	adds	r6, #1
 800b6be:	2102      	movs	r1, #2
 800b6c0:	e000      	b.n	800b6c4 <__cvt+0x42>
 800b6c2:	2103      	movs	r1, #3
 800b6c4:	ab03      	add	r3, sp, #12
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	ab02      	add	r3, sp, #8
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	4653      	mov	r3, sl
 800b6d0:	ec45 4b10 	vmov	d0, r4, r5
 800b6d4:	f001 fb54 	bl	800cd80 <_dtoa_r>
 800b6d8:	2f47      	cmp	r7, #71	; 0x47
 800b6da:	4680      	mov	r8, r0
 800b6dc:	d102      	bne.n	800b6e4 <__cvt+0x62>
 800b6de:	f019 0f01 	tst.w	r9, #1
 800b6e2:	d026      	beq.n	800b732 <__cvt+0xb0>
 800b6e4:	2f46      	cmp	r7, #70	; 0x46
 800b6e6:	eb08 0906 	add.w	r9, r8, r6
 800b6ea:	d111      	bne.n	800b710 <__cvt+0x8e>
 800b6ec:	f898 3000 	ldrb.w	r3, [r8]
 800b6f0:	2b30      	cmp	r3, #48	; 0x30
 800b6f2:	d10a      	bne.n	800b70a <__cvt+0x88>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f7f5 f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b700:	b918      	cbnz	r0, 800b70a <__cvt+0x88>
 800b702:	f1c6 0601 	rsb	r6, r6, #1
 800b706:	f8ca 6000 	str.w	r6, [sl]
 800b70a:	f8da 3000 	ldr.w	r3, [sl]
 800b70e:	4499      	add	r9, r3
 800b710:	2200      	movs	r2, #0
 800b712:	2300      	movs	r3, #0
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	f7f5 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b71c:	b938      	cbnz	r0, 800b72e <__cvt+0xac>
 800b71e:	2230      	movs	r2, #48	; 0x30
 800b720:	9b03      	ldr	r3, [sp, #12]
 800b722:	454b      	cmp	r3, r9
 800b724:	d205      	bcs.n	800b732 <__cvt+0xb0>
 800b726:	1c59      	adds	r1, r3, #1
 800b728:	9103      	str	r1, [sp, #12]
 800b72a:	701a      	strb	r2, [r3, #0]
 800b72c:	e7f8      	b.n	800b720 <__cvt+0x9e>
 800b72e:	f8cd 900c 	str.w	r9, [sp, #12]
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b736:	eba3 0308 	sub.w	r3, r3, r8
 800b73a:	4640      	mov	r0, r8
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	b004      	add	sp, #16
 800b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b744 <__exponent>:
 800b744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b746:	2900      	cmp	r1, #0
 800b748:	4604      	mov	r4, r0
 800b74a:	bfba      	itte	lt
 800b74c:	4249      	neglt	r1, r1
 800b74e:	232d      	movlt	r3, #45	; 0x2d
 800b750:	232b      	movge	r3, #43	; 0x2b
 800b752:	2909      	cmp	r1, #9
 800b754:	f804 2b02 	strb.w	r2, [r4], #2
 800b758:	7043      	strb	r3, [r0, #1]
 800b75a:	dd20      	ble.n	800b79e <__exponent+0x5a>
 800b75c:	f10d 0307 	add.w	r3, sp, #7
 800b760:	461f      	mov	r7, r3
 800b762:	260a      	movs	r6, #10
 800b764:	fb91 f5f6 	sdiv	r5, r1, r6
 800b768:	fb06 1115 	mls	r1, r6, r5, r1
 800b76c:	3130      	adds	r1, #48	; 0x30
 800b76e:	2d09      	cmp	r5, #9
 800b770:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b774:	f103 32ff 	add.w	r2, r3, #4294967295
 800b778:	4629      	mov	r1, r5
 800b77a:	dc09      	bgt.n	800b790 <__exponent+0x4c>
 800b77c:	3130      	adds	r1, #48	; 0x30
 800b77e:	3b02      	subs	r3, #2
 800b780:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b784:	42bb      	cmp	r3, r7
 800b786:	4622      	mov	r2, r4
 800b788:	d304      	bcc.n	800b794 <__exponent+0x50>
 800b78a:	1a10      	subs	r0, r2, r0
 800b78c:	b003      	add	sp, #12
 800b78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b790:	4613      	mov	r3, r2
 800b792:	e7e7      	b.n	800b764 <__exponent+0x20>
 800b794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b798:	f804 2b01 	strb.w	r2, [r4], #1
 800b79c:	e7f2      	b.n	800b784 <__exponent+0x40>
 800b79e:	2330      	movs	r3, #48	; 0x30
 800b7a0:	4419      	add	r1, r3
 800b7a2:	7083      	strb	r3, [r0, #2]
 800b7a4:	1d02      	adds	r2, r0, #4
 800b7a6:	70c1      	strb	r1, [r0, #3]
 800b7a8:	e7ef      	b.n	800b78a <__exponent+0x46>
	...

0800b7ac <_printf_float>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	b08d      	sub	sp, #52	; 0x34
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	461f      	mov	r7, r3
 800b7bc:	4605      	mov	r5, r0
 800b7be:	f002 fbbf 	bl	800df40 <_localeconv_r>
 800b7c2:	6803      	ldr	r3, [r0, #0]
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f4 fd52 	bl	8000270 <strlen>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d4:	9005      	str	r0, [sp, #20]
 800b7d6:	3307      	adds	r3, #7
 800b7d8:	f023 0307 	bic.w	r3, r3, #7
 800b7dc:	f103 0208 	add.w	r2, r3, #8
 800b7e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b7e4:	f8d4 b000 	ldr.w	fp, [r4]
 800b7e8:	f8c8 2000 	str.w	r2, [r8]
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b7f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b7f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7fc:	9307      	str	r3, [sp, #28]
 800b7fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800b802:	f04f 32ff 	mov.w	r2, #4294967295
 800b806:	4ba7      	ldr	r3, [pc, #668]	; (800baa4 <_printf_float+0x2f8>)
 800b808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b80c:	f7f5 f98e 	bl	8000b2c <__aeabi_dcmpun>
 800b810:	bb70      	cbnz	r0, 800b870 <_printf_float+0xc4>
 800b812:	f04f 32ff 	mov.w	r2, #4294967295
 800b816:	4ba3      	ldr	r3, [pc, #652]	; (800baa4 <_printf_float+0x2f8>)
 800b818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b81c:	f7f5 f968 	bl	8000af0 <__aeabi_dcmple>
 800b820:	bb30      	cbnz	r0, 800b870 <_printf_float+0xc4>
 800b822:	2200      	movs	r2, #0
 800b824:	2300      	movs	r3, #0
 800b826:	4640      	mov	r0, r8
 800b828:	4649      	mov	r1, r9
 800b82a:	f7f5 f957 	bl	8000adc <__aeabi_dcmplt>
 800b82e:	b110      	cbz	r0, 800b836 <_printf_float+0x8a>
 800b830:	232d      	movs	r3, #45	; 0x2d
 800b832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b836:	4a9c      	ldr	r2, [pc, #624]	; (800baa8 <_printf_float+0x2fc>)
 800b838:	4b9c      	ldr	r3, [pc, #624]	; (800baac <_printf_float+0x300>)
 800b83a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b83e:	bf8c      	ite	hi
 800b840:	4690      	movhi	r8, r2
 800b842:	4698      	movls	r8, r3
 800b844:	2303      	movs	r3, #3
 800b846:	f02b 0204 	bic.w	r2, fp, #4
 800b84a:	6123      	str	r3, [r4, #16]
 800b84c:	6022      	str	r2, [r4, #0]
 800b84e:	f04f 0900 	mov.w	r9, #0
 800b852:	9700      	str	r7, [sp, #0]
 800b854:	4633      	mov	r3, r6
 800b856:	aa0b      	add	r2, sp, #44	; 0x2c
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 f9e6 	bl	800bc2c <_printf_common>
 800b860:	3001      	adds	r0, #1
 800b862:	f040 808d 	bne.w	800b980 <_printf_float+0x1d4>
 800b866:	f04f 30ff 	mov.w	r0, #4294967295
 800b86a:	b00d      	add	sp, #52	; 0x34
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	4642      	mov	r2, r8
 800b872:	464b      	mov	r3, r9
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f5 f958 	bl	8000b2c <__aeabi_dcmpun>
 800b87c:	b110      	cbz	r0, 800b884 <_printf_float+0xd8>
 800b87e:	4a8c      	ldr	r2, [pc, #560]	; (800bab0 <_printf_float+0x304>)
 800b880:	4b8c      	ldr	r3, [pc, #560]	; (800bab4 <_printf_float+0x308>)
 800b882:	e7da      	b.n	800b83a <_printf_float+0x8e>
 800b884:	6861      	ldr	r1, [r4, #4]
 800b886:	1c4b      	adds	r3, r1, #1
 800b888:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b88c:	a80a      	add	r0, sp, #40	; 0x28
 800b88e:	d13e      	bne.n	800b90e <_printf_float+0x162>
 800b890:	2306      	movs	r3, #6
 800b892:	6063      	str	r3, [r4, #4]
 800b894:	2300      	movs	r3, #0
 800b896:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b89a:	ab09      	add	r3, sp, #36	; 0x24
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	ec49 8b10 	vmov	d0, r8, r9
 800b8a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8a6:	6022      	str	r2, [r4, #0]
 800b8a8:	f8cd a004 	str.w	sl, [sp, #4]
 800b8ac:	6861      	ldr	r1, [r4, #4]
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff fee7 	bl	800b682 <__cvt>
 800b8b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b8b8:	2b47      	cmp	r3, #71	; 0x47
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	d109      	bne.n	800b8d2 <_printf_float+0x126>
 800b8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c0:	1cd8      	adds	r0, r3, #3
 800b8c2:	db02      	blt.n	800b8ca <_printf_float+0x11e>
 800b8c4:	6862      	ldr	r2, [r4, #4]
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	dd47      	ble.n	800b95a <_printf_float+0x1ae>
 800b8ca:	f1aa 0a02 	sub.w	sl, sl, #2
 800b8ce:	fa5f fa8a 	uxtb.w	sl, sl
 800b8d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b8d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8d8:	d824      	bhi.n	800b924 <_printf_float+0x178>
 800b8da:	3901      	subs	r1, #1
 800b8dc:	4652      	mov	r2, sl
 800b8de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8e2:	9109      	str	r1, [sp, #36]	; 0x24
 800b8e4:	f7ff ff2e 	bl	800b744 <__exponent>
 800b8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8ea:	1813      	adds	r3, r2, r0
 800b8ec:	2a01      	cmp	r2, #1
 800b8ee:	4681      	mov	r9, r0
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	dc02      	bgt.n	800b8fa <_printf_float+0x14e>
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	07d1      	lsls	r1, r2, #31
 800b8f8:	d501      	bpl.n	800b8fe <_printf_float+0x152>
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	6123      	str	r3, [r4, #16]
 800b8fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0a5      	beq.n	800b852 <_printf_float+0xa6>
 800b906:	232d      	movs	r3, #45	; 0x2d
 800b908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b90c:	e7a1      	b.n	800b852 <_printf_float+0xa6>
 800b90e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b912:	f000 8177 	beq.w	800bc04 <_printf_float+0x458>
 800b916:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b91a:	d1bb      	bne.n	800b894 <_printf_float+0xe8>
 800b91c:	2900      	cmp	r1, #0
 800b91e:	d1b9      	bne.n	800b894 <_printf_float+0xe8>
 800b920:	2301      	movs	r3, #1
 800b922:	e7b6      	b.n	800b892 <_printf_float+0xe6>
 800b924:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b928:	d119      	bne.n	800b95e <_printf_float+0x1b2>
 800b92a:	2900      	cmp	r1, #0
 800b92c:	6863      	ldr	r3, [r4, #4]
 800b92e:	dd0c      	ble.n	800b94a <_printf_float+0x19e>
 800b930:	6121      	str	r1, [r4, #16]
 800b932:	b913      	cbnz	r3, 800b93a <_printf_float+0x18e>
 800b934:	6822      	ldr	r2, [r4, #0]
 800b936:	07d2      	lsls	r2, r2, #31
 800b938:	d502      	bpl.n	800b940 <_printf_float+0x194>
 800b93a:	3301      	adds	r3, #1
 800b93c:	440b      	add	r3, r1
 800b93e:	6123      	str	r3, [r4, #16]
 800b940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b942:	65a3      	str	r3, [r4, #88]	; 0x58
 800b944:	f04f 0900 	mov.w	r9, #0
 800b948:	e7d9      	b.n	800b8fe <_printf_float+0x152>
 800b94a:	b913      	cbnz	r3, 800b952 <_printf_float+0x1a6>
 800b94c:	6822      	ldr	r2, [r4, #0]
 800b94e:	07d0      	lsls	r0, r2, #31
 800b950:	d501      	bpl.n	800b956 <_printf_float+0x1aa>
 800b952:	3302      	adds	r3, #2
 800b954:	e7f3      	b.n	800b93e <_printf_float+0x192>
 800b956:	2301      	movs	r3, #1
 800b958:	e7f1      	b.n	800b93e <_printf_float+0x192>
 800b95a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b95e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b962:	4293      	cmp	r3, r2
 800b964:	db05      	blt.n	800b972 <_printf_float+0x1c6>
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	07d1      	lsls	r1, r2, #31
 800b96c:	d5e8      	bpl.n	800b940 <_printf_float+0x194>
 800b96e:	3301      	adds	r3, #1
 800b970:	e7e5      	b.n	800b93e <_printf_float+0x192>
 800b972:	2b00      	cmp	r3, #0
 800b974:	bfd4      	ite	le
 800b976:	f1c3 0302 	rsble	r3, r3, #2
 800b97a:	2301      	movgt	r3, #1
 800b97c:	4413      	add	r3, r2
 800b97e:	e7de      	b.n	800b93e <_printf_float+0x192>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	055a      	lsls	r2, r3, #21
 800b984:	d407      	bmi.n	800b996 <_printf_float+0x1ea>
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	4642      	mov	r2, r8
 800b98a:	4631      	mov	r1, r6
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b8      	blx	r7
 800b990:	3001      	adds	r0, #1
 800b992:	d12b      	bne.n	800b9ec <_printf_float+0x240>
 800b994:	e767      	b.n	800b866 <_printf_float+0xba>
 800b996:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b99a:	f240 80dc 	bls.w	800bb56 <_printf_float+0x3aa>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9a6:	f7f5 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d033      	beq.n	800ba16 <_printf_float+0x26a>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	4a41      	ldr	r2, [pc, #260]	; (800bab8 <_printf_float+0x30c>)
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b8      	blx	r7
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	f43f af54 	beq.w	800b866 <_printf_float+0xba>
 800b9be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	db02      	blt.n	800b9cc <_printf_float+0x220>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	07d8      	lsls	r0, r3, #31
 800b9ca:	d50f      	bpl.n	800b9ec <_printf_float+0x240>
 800b9cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	47b8      	blx	r7
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	f43f af45 	beq.w	800b866 <_printf_float+0xba>
 800b9dc:	f04f 0800 	mov.w	r8, #0
 800b9e0:	f104 091a 	add.w	r9, r4, #26
 800b9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	4543      	cmp	r3, r8
 800b9ea:	dc09      	bgt.n	800ba00 <_printf_float+0x254>
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	079b      	lsls	r3, r3, #30
 800b9f0:	f100 8103 	bmi.w	800bbfa <_printf_float+0x44e>
 800b9f4:	68e0      	ldr	r0, [r4, #12]
 800b9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f8:	4298      	cmp	r0, r3
 800b9fa:	bfb8      	it	lt
 800b9fc:	4618      	movlt	r0, r3
 800b9fe:	e734      	b.n	800b86a <_printf_float+0xbe>
 800ba00:	2301      	movs	r3, #1
 800ba02:	464a      	mov	r2, r9
 800ba04:	4631      	mov	r1, r6
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f43f af2b 	beq.w	800b866 <_printf_float+0xba>
 800ba10:	f108 0801 	add.w	r8, r8, #1
 800ba14:	e7e6      	b.n	800b9e4 <_printf_float+0x238>
 800ba16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	dc2b      	bgt.n	800ba74 <_printf_float+0x2c8>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4a26      	ldr	r2, [pc, #152]	; (800bab8 <_printf_float+0x30c>)
 800ba20:	4631      	mov	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	47b8      	blx	r7
 800ba26:	3001      	adds	r0, #1
 800ba28:	f43f af1d 	beq.w	800b866 <_printf_float+0xba>
 800ba2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba2e:	b923      	cbnz	r3, 800ba3a <_printf_float+0x28e>
 800ba30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba32:	b913      	cbnz	r3, 800ba3a <_printf_float+0x28e>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	07d9      	lsls	r1, r3, #31
 800ba38:	d5d8      	bpl.n	800b9ec <_printf_float+0x240>
 800ba3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4628      	mov	r0, r5
 800ba42:	47b8      	blx	r7
 800ba44:	3001      	adds	r0, #1
 800ba46:	f43f af0e 	beq.w	800b866 <_printf_float+0xba>
 800ba4a:	f04f 0900 	mov.w	r9, #0
 800ba4e:	f104 0a1a 	add.w	sl, r4, #26
 800ba52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba54:	425b      	negs	r3, r3
 800ba56:	454b      	cmp	r3, r9
 800ba58:	dc01      	bgt.n	800ba5e <_printf_float+0x2b2>
 800ba5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba5c:	e794      	b.n	800b988 <_printf_float+0x1dc>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	4652      	mov	r2, sl
 800ba62:	4631      	mov	r1, r6
 800ba64:	4628      	mov	r0, r5
 800ba66:	47b8      	blx	r7
 800ba68:	3001      	adds	r0, #1
 800ba6a:	f43f aefc 	beq.w	800b866 <_printf_float+0xba>
 800ba6e:	f109 0901 	add.w	r9, r9, #1
 800ba72:	e7ee      	b.n	800ba52 <_printf_float+0x2a6>
 800ba74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	bfa8      	it	ge
 800ba7c:	461a      	movge	r2, r3
 800ba7e:	2a00      	cmp	r2, #0
 800ba80:	4691      	mov	r9, r2
 800ba82:	dd07      	ble.n	800ba94 <_printf_float+0x2e8>
 800ba84:	4613      	mov	r3, r2
 800ba86:	4631      	mov	r1, r6
 800ba88:	4642      	mov	r2, r8
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b8      	blx	r7
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f43f aee9 	beq.w	800b866 <_printf_float+0xba>
 800ba94:	f104 031a 	add.w	r3, r4, #26
 800ba98:	f04f 0b00 	mov.w	fp, #0
 800ba9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baa0:	9306      	str	r3, [sp, #24]
 800baa2:	e015      	b.n	800bad0 <_printf_float+0x324>
 800baa4:	7fefffff 	.word	0x7fefffff
 800baa8:	08010124 	.word	0x08010124
 800baac:	08010120 	.word	0x08010120
 800bab0:	0801012c 	.word	0x0801012c
 800bab4:	08010128 	.word	0x08010128
 800bab8:	08010130 	.word	0x08010130
 800babc:	2301      	movs	r3, #1
 800babe:	9a06      	ldr	r2, [sp, #24]
 800bac0:	4631      	mov	r1, r6
 800bac2:	4628      	mov	r0, r5
 800bac4:	47b8      	blx	r7
 800bac6:	3001      	adds	r0, #1
 800bac8:	f43f aecd 	beq.w	800b866 <_printf_float+0xba>
 800bacc:	f10b 0b01 	add.w	fp, fp, #1
 800bad0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bad4:	ebaa 0309 	sub.w	r3, sl, r9
 800bad8:	455b      	cmp	r3, fp
 800bada:	dcef      	bgt.n	800babc <_printf_float+0x310>
 800badc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bae0:	429a      	cmp	r2, r3
 800bae2:	44d0      	add	r8, sl
 800bae4:	db15      	blt.n	800bb12 <_printf_float+0x366>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	07da      	lsls	r2, r3, #31
 800baea:	d412      	bmi.n	800bb12 <_printf_float+0x366>
 800baec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baf0:	eba3 020a 	sub.w	r2, r3, sl
 800baf4:	eba3 0a01 	sub.w	sl, r3, r1
 800baf8:	4592      	cmp	sl, r2
 800bafa:	bfa8      	it	ge
 800bafc:	4692      	movge	sl, r2
 800bafe:	f1ba 0f00 	cmp.w	sl, #0
 800bb02:	dc0e      	bgt.n	800bb22 <_printf_float+0x376>
 800bb04:	f04f 0800 	mov.w	r8, #0
 800bb08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb0c:	f104 091a 	add.w	r9, r4, #26
 800bb10:	e019      	b.n	800bb46 <_printf_float+0x39a>
 800bb12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb16:	4631      	mov	r1, r6
 800bb18:	4628      	mov	r0, r5
 800bb1a:	47b8      	blx	r7
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d1e5      	bne.n	800baec <_printf_float+0x340>
 800bb20:	e6a1      	b.n	800b866 <_printf_float+0xba>
 800bb22:	4653      	mov	r3, sl
 800bb24:	4642      	mov	r2, r8
 800bb26:	4631      	mov	r1, r6
 800bb28:	4628      	mov	r0, r5
 800bb2a:	47b8      	blx	r7
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d1e9      	bne.n	800bb04 <_printf_float+0x358>
 800bb30:	e699      	b.n	800b866 <_printf_float+0xba>
 800bb32:	2301      	movs	r3, #1
 800bb34:	464a      	mov	r2, r9
 800bb36:	4631      	mov	r1, r6
 800bb38:	4628      	mov	r0, r5
 800bb3a:	47b8      	blx	r7
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f43f ae92 	beq.w	800b866 <_printf_float+0xba>
 800bb42:	f108 0801 	add.w	r8, r8, #1
 800bb46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb4a:	1a9b      	subs	r3, r3, r2
 800bb4c:	eba3 030a 	sub.w	r3, r3, sl
 800bb50:	4543      	cmp	r3, r8
 800bb52:	dcee      	bgt.n	800bb32 <_printf_float+0x386>
 800bb54:	e74a      	b.n	800b9ec <_printf_float+0x240>
 800bb56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb58:	2a01      	cmp	r2, #1
 800bb5a:	dc01      	bgt.n	800bb60 <_printf_float+0x3b4>
 800bb5c:	07db      	lsls	r3, r3, #31
 800bb5e:	d53a      	bpl.n	800bbd6 <_printf_float+0x42a>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4642      	mov	r2, r8
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b8      	blx	r7
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	f43f ae7b 	beq.w	800b866 <_printf_float+0xba>
 800bb70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb74:	4631      	mov	r1, r6
 800bb76:	4628      	mov	r0, r5
 800bb78:	47b8      	blx	r7
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	f108 0801 	add.w	r8, r8, #1
 800bb80:	f43f ae71 	beq.w	800b866 <_printf_float+0xba>
 800bb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb86:	2200      	movs	r2, #0
 800bb88:	f103 3aff 	add.w	sl, r3, #4294967295
 800bb8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb90:	2300      	movs	r3, #0
 800bb92:	f7f4 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb96:	b9c8      	cbnz	r0, 800bbcc <_printf_float+0x420>
 800bb98:	4653      	mov	r3, sl
 800bb9a:	4642      	mov	r2, r8
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	d10e      	bne.n	800bbc4 <_printf_float+0x418>
 800bba6:	e65e      	b.n	800b866 <_printf_float+0xba>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	4652      	mov	r2, sl
 800bbac:	4631      	mov	r1, r6
 800bbae:	4628      	mov	r0, r5
 800bbb0:	47b8      	blx	r7
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f43f ae57 	beq.w	800b866 <_printf_float+0xba>
 800bbb8:	f108 0801 	add.w	r8, r8, #1
 800bbbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	4543      	cmp	r3, r8
 800bbc2:	dcf1      	bgt.n	800bba8 <_printf_float+0x3fc>
 800bbc4:	464b      	mov	r3, r9
 800bbc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbca:	e6de      	b.n	800b98a <_printf_float+0x1de>
 800bbcc:	f04f 0800 	mov.w	r8, #0
 800bbd0:	f104 0a1a 	add.w	sl, r4, #26
 800bbd4:	e7f2      	b.n	800bbbc <_printf_float+0x410>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7df      	b.n	800bb9a <_printf_float+0x3ee>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	464a      	mov	r2, r9
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b8      	blx	r7
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	f43f ae3e 	beq.w	800b866 <_printf_float+0xba>
 800bbea:	f108 0801 	add.w	r8, r8, #1
 800bbee:	68e3      	ldr	r3, [r4, #12]
 800bbf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbf2:	1a9b      	subs	r3, r3, r2
 800bbf4:	4543      	cmp	r3, r8
 800bbf6:	dcf0      	bgt.n	800bbda <_printf_float+0x42e>
 800bbf8:	e6fc      	b.n	800b9f4 <_printf_float+0x248>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	f104 0919 	add.w	r9, r4, #25
 800bc02:	e7f4      	b.n	800bbee <_printf_float+0x442>
 800bc04:	2900      	cmp	r1, #0
 800bc06:	f43f ae8b 	beq.w	800b920 <_printf_float+0x174>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bc10:	ab09      	add	r3, sp, #36	; 0x24
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	ec49 8b10 	vmov	d0, r8, r9
 800bc18:	6022      	str	r2, [r4, #0]
 800bc1a:	f8cd a004 	str.w	sl, [sp, #4]
 800bc1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc22:	4628      	mov	r0, r5
 800bc24:	f7ff fd2d 	bl	800b682 <__cvt>
 800bc28:	4680      	mov	r8, r0
 800bc2a:	e648      	b.n	800b8be <_printf_float+0x112>

0800bc2c <_printf_common>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	4691      	mov	r9, r2
 800bc32:	461f      	mov	r7, r3
 800bc34:	688a      	ldr	r2, [r1, #8]
 800bc36:	690b      	ldr	r3, [r1, #16]
 800bc38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	bfb8      	it	lt
 800bc40:	4613      	movlt	r3, r2
 800bc42:	f8c9 3000 	str.w	r3, [r9]
 800bc46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	b112      	cbz	r2, 800bc56 <_printf_common+0x2a>
 800bc50:	3301      	adds	r3, #1
 800bc52:	f8c9 3000 	str.w	r3, [r9]
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	0699      	lsls	r1, r3, #26
 800bc5a:	bf42      	ittt	mi
 800bc5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bc60:	3302      	addmi	r3, #2
 800bc62:	f8c9 3000 	strmi.w	r3, [r9]
 800bc66:	6825      	ldr	r5, [r4, #0]
 800bc68:	f015 0506 	ands.w	r5, r5, #6
 800bc6c:	d107      	bne.n	800bc7e <_printf_common+0x52>
 800bc6e:	f104 0a19 	add.w	sl, r4, #25
 800bc72:	68e3      	ldr	r3, [r4, #12]
 800bc74:	f8d9 2000 	ldr.w	r2, [r9]
 800bc78:	1a9b      	subs	r3, r3, r2
 800bc7a:	42ab      	cmp	r3, r5
 800bc7c:	dc28      	bgt.n	800bcd0 <_printf_common+0xa4>
 800bc7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	3300      	adds	r3, #0
 800bc86:	bf18      	it	ne
 800bc88:	2301      	movne	r3, #1
 800bc8a:	0692      	lsls	r2, r2, #26
 800bc8c:	d42d      	bmi.n	800bcea <_printf_common+0xbe>
 800bc8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc92:	4639      	mov	r1, r7
 800bc94:	4630      	mov	r0, r6
 800bc96:	47c0      	blx	r8
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d020      	beq.n	800bcde <_printf_common+0xb2>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	68e5      	ldr	r5, [r4, #12]
 800bca0:	f8d9 2000 	ldr.w	r2, [r9]
 800bca4:	f003 0306 	and.w	r3, r3, #6
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	bf08      	it	eq
 800bcac:	1aad      	subeq	r5, r5, r2
 800bcae:	68a3      	ldr	r3, [r4, #8]
 800bcb0:	6922      	ldr	r2, [r4, #16]
 800bcb2:	bf0c      	ite	eq
 800bcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcb8:	2500      	movne	r5, #0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	bfc4      	itt	gt
 800bcbe:	1a9b      	subgt	r3, r3, r2
 800bcc0:	18ed      	addgt	r5, r5, r3
 800bcc2:	f04f 0900 	mov.w	r9, #0
 800bcc6:	341a      	adds	r4, #26
 800bcc8:	454d      	cmp	r5, r9
 800bcca:	d11a      	bne.n	800bd02 <_printf_common+0xd6>
 800bccc:	2000      	movs	r0, #0
 800bcce:	e008      	b.n	800bce2 <_printf_common+0xb6>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	4652      	mov	r2, sl
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	47c0      	blx	r8
 800bcda:	3001      	adds	r0, #1
 800bcdc:	d103      	bne.n	800bce6 <_printf_common+0xba>
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295
 800bce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce6:	3501      	adds	r5, #1
 800bce8:	e7c3      	b.n	800bc72 <_printf_common+0x46>
 800bcea:	18e1      	adds	r1, r4, r3
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	2030      	movs	r0, #48	; 0x30
 800bcf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcf4:	4422      	add	r2, r4
 800bcf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcfe:	3302      	adds	r3, #2
 800bd00:	e7c5      	b.n	800bc8e <_printf_common+0x62>
 800bd02:	2301      	movs	r3, #1
 800bd04:	4622      	mov	r2, r4
 800bd06:	4639      	mov	r1, r7
 800bd08:	4630      	mov	r0, r6
 800bd0a:	47c0      	blx	r8
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d0e6      	beq.n	800bcde <_printf_common+0xb2>
 800bd10:	f109 0901 	add.w	r9, r9, #1
 800bd14:	e7d8      	b.n	800bcc8 <_printf_common+0x9c>
	...

0800bd18 <_printf_i>:
 800bd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bd20:	460c      	mov	r4, r1
 800bd22:	7e09      	ldrb	r1, [r1, #24]
 800bd24:	b085      	sub	sp, #20
 800bd26:	296e      	cmp	r1, #110	; 0x6e
 800bd28:	4617      	mov	r7, r2
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	4698      	mov	r8, r3
 800bd2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd30:	f000 80b3 	beq.w	800be9a <_printf_i+0x182>
 800bd34:	d822      	bhi.n	800bd7c <_printf_i+0x64>
 800bd36:	2963      	cmp	r1, #99	; 0x63
 800bd38:	d036      	beq.n	800bda8 <_printf_i+0x90>
 800bd3a:	d80a      	bhi.n	800bd52 <_printf_i+0x3a>
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	f000 80b9 	beq.w	800beb4 <_printf_i+0x19c>
 800bd42:	2958      	cmp	r1, #88	; 0x58
 800bd44:	f000 8083 	beq.w	800be4e <_printf_i+0x136>
 800bd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bd50:	e032      	b.n	800bdb8 <_printf_i+0xa0>
 800bd52:	2964      	cmp	r1, #100	; 0x64
 800bd54:	d001      	beq.n	800bd5a <_printf_i+0x42>
 800bd56:	2969      	cmp	r1, #105	; 0x69
 800bd58:	d1f6      	bne.n	800bd48 <_printf_i+0x30>
 800bd5a:	6820      	ldr	r0, [r4, #0]
 800bd5c:	6813      	ldr	r3, [r2, #0]
 800bd5e:	0605      	lsls	r5, r0, #24
 800bd60:	f103 0104 	add.w	r1, r3, #4
 800bd64:	d52a      	bpl.n	800bdbc <_printf_i+0xa4>
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6011      	str	r1, [r2, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da03      	bge.n	800bd76 <_printf_i+0x5e>
 800bd6e:	222d      	movs	r2, #45	; 0x2d
 800bd70:	425b      	negs	r3, r3
 800bd72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bd76:	486f      	ldr	r0, [pc, #444]	; (800bf34 <_printf_i+0x21c>)
 800bd78:	220a      	movs	r2, #10
 800bd7a:	e039      	b.n	800bdf0 <_printf_i+0xd8>
 800bd7c:	2973      	cmp	r1, #115	; 0x73
 800bd7e:	f000 809d 	beq.w	800bebc <_printf_i+0x1a4>
 800bd82:	d808      	bhi.n	800bd96 <_printf_i+0x7e>
 800bd84:	296f      	cmp	r1, #111	; 0x6f
 800bd86:	d020      	beq.n	800bdca <_printf_i+0xb2>
 800bd88:	2970      	cmp	r1, #112	; 0x70
 800bd8a:	d1dd      	bne.n	800bd48 <_printf_i+0x30>
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	f043 0320 	orr.w	r3, r3, #32
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	e003      	b.n	800bd9e <_printf_i+0x86>
 800bd96:	2975      	cmp	r1, #117	; 0x75
 800bd98:	d017      	beq.n	800bdca <_printf_i+0xb2>
 800bd9a:	2978      	cmp	r1, #120	; 0x78
 800bd9c:	d1d4      	bne.n	800bd48 <_printf_i+0x30>
 800bd9e:	2378      	movs	r3, #120	; 0x78
 800bda0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bda4:	4864      	ldr	r0, [pc, #400]	; (800bf38 <_printf_i+0x220>)
 800bda6:	e055      	b.n	800be54 <_printf_i+0x13c>
 800bda8:	6813      	ldr	r3, [r2, #0]
 800bdaa:	1d19      	adds	r1, r3, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6011      	str	r1, [r2, #0]
 800bdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e08c      	b.n	800bed6 <_printf_i+0x1be>
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6011      	str	r1, [r2, #0]
 800bdc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdc4:	bf18      	it	ne
 800bdc6:	b21b      	sxthne	r3, r3
 800bdc8:	e7cf      	b.n	800bd6a <_printf_i+0x52>
 800bdca:	6813      	ldr	r3, [r2, #0]
 800bdcc:	6825      	ldr	r5, [r4, #0]
 800bdce:	1d18      	adds	r0, r3, #4
 800bdd0:	6010      	str	r0, [r2, #0]
 800bdd2:	0628      	lsls	r0, r5, #24
 800bdd4:	d501      	bpl.n	800bdda <_printf_i+0xc2>
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	e002      	b.n	800bde0 <_printf_i+0xc8>
 800bdda:	0668      	lsls	r0, r5, #25
 800bddc:	d5fb      	bpl.n	800bdd6 <_printf_i+0xbe>
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	4854      	ldr	r0, [pc, #336]	; (800bf34 <_printf_i+0x21c>)
 800bde2:	296f      	cmp	r1, #111	; 0x6f
 800bde4:	bf14      	ite	ne
 800bde6:	220a      	movne	r2, #10
 800bde8:	2208      	moveq	r2, #8
 800bdea:	2100      	movs	r1, #0
 800bdec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdf0:	6865      	ldr	r5, [r4, #4]
 800bdf2:	60a5      	str	r5, [r4, #8]
 800bdf4:	2d00      	cmp	r5, #0
 800bdf6:	f2c0 8095 	blt.w	800bf24 <_printf_i+0x20c>
 800bdfa:	6821      	ldr	r1, [r4, #0]
 800bdfc:	f021 0104 	bic.w	r1, r1, #4
 800be00:	6021      	str	r1, [r4, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d13d      	bne.n	800be82 <_printf_i+0x16a>
 800be06:	2d00      	cmp	r5, #0
 800be08:	f040 808e 	bne.w	800bf28 <_printf_i+0x210>
 800be0c:	4665      	mov	r5, ip
 800be0e:	2a08      	cmp	r2, #8
 800be10:	d10b      	bne.n	800be2a <_printf_i+0x112>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	07db      	lsls	r3, r3, #31
 800be16:	d508      	bpl.n	800be2a <_printf_i+0x112>
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	6862      	ldr	r2, [r4, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	bfde      	ittt	le
 800be20:	2330      	movle	r3, #48	; 0x30
 800be22:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be26:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be2a:	ebac 0305 	sub.w	r3, ip, r5
 800be2e:	6123      	str	r3, [r4, #16]
 800be30:	f8cd 8000 	str.w	r8, [sp]
 800be34:	463b      	mov	r3, r7
 800be36:	aa03      	add	r2, sp, #12
 800be38:	4621      	mov	r1, r4
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff fef6 	bl	800bc2c <_printf_common>
 800be40:	3001      	adds	r0, #1
 800be42:	d14d      	bne.n	800bee0 <_printf_i+0x1c8>
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	b005      	add	sp, #20
 800be4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4e:	4839      	ldr	r0, [pc, #228]	; (800bf34 <_printf_i+0x21c>)
 800be50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800be54:	6813      	ldr	r3, [r2, #0]
 800be56:	6821      	ldr	r1, [r4, #0]
 800be58:	1d1d      	adds	r5, r3, #4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6015      	str	r5, [r2, #0]
 800be5e:	060a      	lsls	r2, r1, #24
 800be60:	d50b      	bpl.n	800be7a <_printf_i+0x162>
 800be62:	07ca      	lsls	r2, r1, #31
 800be64:	bf44      	itt	mi
 800be66:	f041 0120 	orrmi.w	r1, r1, #32
 800be6a:	6021      	strmi	r1, [r4, #0]
 800be6c:	b91b      	cbnz	r3, 800be76 <_printf_i+0x15e>
 800be6e:	6822      	ldr	r2, [r4, #0]
 800be70:	f022 0220 	bic.w	r2, r2, #32
 800be74:	6022      	str	r2, [r4, #0]
 800be76:	2210      	movs	r2, #16
 800be78:	e7b7      	b.n	800bdea <_printf_i+0xd2>
 800be7a:	064d      	lsls	r5, r1, #25
 800be7c:	bf48      	it	mi
 800be7e:	b29b      	uxthmi	r3, r3
 800be80:	e7ef      	b.n	800be62 <_printf_i+0x14a>
 800be82:	4665      	mov	r5, ip
 800be84:	fbb3 f1f2 	udiv	r1, r3, r2
 800be88:	fb02 3311 	mls	r3, r2, r1, r3
 800be8c:	5cc3      	ldrb	r3, [r0, r3]
 800be8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800be92:	460b      	mov	r3, r1
 800be94:	2900      	cmp	r1, #0
 800be96:	d1f5      	bne.n	800be84 <_printf_i+0x16c>
 800be98:	e7b9      	b.n	800be0e <_printf_i+0xf6>
 800be9a:	6813      	ldr	r3, [r2, #0]
 800be9c:	6825      	ldr	r5, [r4, #0]
 800be9e:	6961      	ldr	r1, [r4, #20]
 800bea0:	1d18      	adds	r0, r3, #4
 800bea2:	6010      	str	r0, [r2, #0]
 800bea4:	0628      	lsls	r0, r5, #24
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	d501      	bpl.n	800beae <_printf_i+0x196>
 800beaa:	6019      	str	r1, [r3, #0]
 800beac:	e002      	b.n	800beb4 <_printf_i+0x19c>
 800beae:	066a      	lsls	r2, r5, #25
 800beb0:	d5fb      	bpl.n	800beaa <_printf_i+0x192>
 800beb2:	8019      	strh	r1, [r3, #0]
 800beb4:	2300      	movs	r3, #0
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	4665      	mov	r5, ip
 800beba:	e7b9      	b.n	800be30 <_printf_i+0x118>
 800bebc:	6813      	ldr	r3, [r2, #0]
 800bebe:	1d19      	adds	r1, r3, #4
 800bec0:	6011      	str	r1, [r2, #0]
 800bec2:	681d      	ldr	r5, [r3, #0]
 800bec4:	6862      	ldr	r2, [r4, #4]
 800bec6:	2100      	movs	r1, #0
 800bec8:	4628      	mov	r0, r5
 800beca:	f7f4 f981 	bl	80001d0 <memchr>
 800bece:	b108      	cbz	r0, 800bed4 <_printf_i+0x1bc>
 800bed0:	1b40      	subs	r0, r0, r5
 800bed2:	6060      	str	r0, [r4, #4]
 800bed4:	6863      	ldr	r3, [r4, #4]
 800bed6:	6123      	str	r3, [r4, #16]
 800bed8:	2300      	movs	r3, #0
 800beda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bede:	e7a7      	b.n	800be30 <_printf_i+0x118>
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	462a      	mov	r2, r5
 800bee4:	4639      	mov	r1, r7
 800bee6:	4630      	mov	r0, r6
 800bee8:	47c0      	blx	r8
 800beea:	3001      	adds	r0, #1
 800beec:	d0aa      	beq.n	800be44 <_printf_i+0x12c>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	079b      	lsls	r3, r3, #30
 800bef2:	d413      	bmi.n	800bf1c <_printf_i+0x204>
 800bef4:	68e0      	ldr	r0, [r4, #12]
 800bef6:	9b03      	ldr	r3, [sp, #12]
 800bef8:	4298      	cmp	r0, r3
 800befa:	bfb8      	it	lt
 800befc:	4618      	movlt	r0, r3
 800befe:	e7a3      	b.n	800be48 <_printf_i+0x130>
 800bf00:	2301      	movs	r3, #1
 800bf02:	464a      	mov	r2, r9
 800bf04:	4639      	mov	r1, r7
 800bf06:	4630      	mov	r0, r6
 800bf08:	47c0      	blx	r8
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d09a      	beq.n	800be44 <_printf_i+0x12c>
 800bf0e:	3501      	adds	r5, #1
 800bf10:	68e3      	ldr	r3, [r4, #12]
 800bf12:	9a03      	ldr	r2, [sp, #12]
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	42ab      	cmp	r3, r5
 800bf18:	dcf2      	bgt.n	800bf00 <_printf_i+0x1e8>
 800bf1a:	e7eb      	b.n	800bef4 <_printf_i+0x1dc>
 800bf1c:	2500      	movs	r5, #0
 800bf1e:	f104 0919 	add.w	r9, r4, #25
 800bf22:	e7f5      	b.n	800bf10 <_printf_i+0x1f8>
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1ac      	bne.n	800be82 <_printf_i+0x16a>
 800bf28:	7803      	ldrb	r3, [r0, #0]
 800bf2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf32:	e76c      	b.n	800be0e <_printf_i+0xf6>
 800bf34:	08010132 	.word	0x08010132
 800bf38:	08010143 	.word	0x08010143

0800bf3c <siprintf>:
 800bf3c:	b40e      	push	{r1, r2, r3}
 800bf3e:	b500      	push	{lr}
 800bf40:	b09c      	sub	sp, #112	; 0x70
 800bf42:	ab1d      	add	r3, sp, #116	; 0x74
 800bf44:	9002      	str	r0, [sp, #8]
 800bf46:	9006      	str	r0, [sp, #24]
 800bf48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf4c:	4809      	ldr	r0, [pc, #36]	; (800bf74 <siprintf+0x38>)
 800bf4e:	9107      	str	r1, [sp, #28]
 800bf50:	9104      	str	r1, [sp, #16]
 800bf52:	4909      	ldr	r1, [pc, #36]	; (800bf78 <siprintf+0x3c>)
 800bf54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf58:	9105      	str	r1, [sp, #20]
 800bf5a:	6800      	ldr	r0, [r0, #0]
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	a902      	add	r1, sp, #8
 800bf60:	f002 fd26 	bl	800e9b0 <_svfiprintf_r>
 800bf64:	9b02      	ldr	r3, [sp, #8]
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	b01c      	add	sp, #112	; 0x70
 800bf6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf70:	b003      	add	sp, #12
 800bf72:	4770      	bx	lr
 800bf74:	2000000c 	.word	0x2000000c
 800bf78:	ffff0208 	.word	0xffff0208

0800bf7c <strncmp>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	b16a      	cbz	r2, 800bf9c <strncmp+0x20>
 800bf80:	3901      	subs	r1, #1
 800bf82:	1884      	adds	r4, r0, r2
 800bf84:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bf88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d103      	bne.n	800bf98 <strncmp+0x1c>
 800bf90:	42a0      	cmp	r0, r4
 800bf92:	d001      	beq.n	800bf98 <strncmp+0x1c>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1f5      	bne.n	800bf84 <strncmp+0x8>
 800bf98:	1a98      	subs	r0, r3, r2
 800bf9a:	bd10      	pop	{r4, pc}
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	e7fc      	b.n	800bf9a <strncmp+0x1e>

0800bfa0 <sulp>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	ec45 4b10 	vmov	d0, r4, r5
 800bfaa:	4616      	mov	r6, r2
 800bfac:	f002 fabc 	bl	800e528 <__ulp>
 800bfb0:	ec51 0b10 	vmov	r0, r1, d0
 800bfb4:	b17e      	cbz	r6, 800bfd6 <sulp+0x36>
 800bfb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bfba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd09      	ble.n	800bfd6 <sulp+0x36>
 800bfc2:	051b      	lsls	r3, r3, #20
 800bfc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bfc8:	2400      	movs	r4, #0
 800bfca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bfce:	4622      	mov	r2, r4
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	f7f4 fb11 	bl	80005f8 <__aeabi_dmul>
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}

0800bfd8 <_strtod_l>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	461f      	mov	r7, r3
 800bfde:	b0a1      	sub	sp, #132	; 0x84
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4681      	mov	r9, r0
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	460e      	mov	r6, r1
 800bfe8:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfea:	931c      	str	r3, [sp, #112]	; 0x70
 800bfec:	f001 ffa6 	bl	800df3c <__localeconv_l>
 800bff0:	4680      	mov	r8, r0
 800bff2:	6800      	ldr	r0, [r0, #0]
 800bff4:	f7f4 f93c 	bl	8000270 <strlen>
 800bff8:	f04f 0a00 	mov.w	sl, #0
 800bffc:	4604      	mov	r4, r0
 800bffe:	f04f 0b00 	mov.w	fp, #0
 800c002:	961b      	str	r6, [sp, #108]	; 0x6c
 800c004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	2a0d      	cmp	r2, #13
 800c00a:	d832      	bhi.n	800c072 <_strtod_l+0x9a>
 800c00c:	2a09      	cmp	r2, #9
 800c00e:	d236      	bcs.n	800c07e <_strtod_l+0xa6>
 800c010:	2a00      	cmp	r2, #0
 800c012:	d03e      	beq.n	800c092 <_strtod_l+0xba>
 800c014:	2300      	movs	r3, #0
 800c016:	930d      	str	r3, [sp, #52]	; 0x34
 800c018:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c01a:	782b      	ldrb	r3, [r5, #0]
 800c01c:	2b30      	cmp	r3, #48	; 0x30
 800c01e:	f040 80ac 	bne.w	800c17a <_strtod_l+0x1a2>
 800c022:	786b      	ldrb	r3, [r5, #1]
 800c024:	2b58      	cmp	r3, #88	; 0x58
 800c026:	d001      	beq.n	800c02c <_strtod_l+0x54>
 800c028:	2b78      	cmp	r3, #120	; 0x78
 800c02a:	d167      	bne.n	800c0fc <_strtod_l+0x124>
 800c02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	ab1c      	add	r3, sp, #112	; 0x70
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	9702      	str	r7, [sp, #8]
 800c036:	ab1d      	add	r3, sp, #116	; 0x74
 800c038:	4a88      	ldr	r2, [pc, #544]	; (800c25c <_strtod_l+0x284>)
 800c03a:	a91b      	add	r1, sp, #108	; 0x6c
 800c03c:	4648      	mov	r0, r9
 800c03e:	f001 fca6 	bl	800d98e <__gethex>
 800c042:	f010 0407 	ands.w	r4, r0, #7
 800c046:	4606      	mov	r6, r0
 800c048:	d005      	beq.n	800c056 <_strtod_l+0x7e>
 800c04a:	2c06      	cmp	r4, #6
 800c04c:	d12b      	bne.n	800c0a6 <_strtod_l+0xce>
 800c04e:	3501      	adds	r5, #1
 800c050:	2300      	movs	r3, #0
 800c052:	951b      	str	r5, [sp, #108]	; 0x6c
 800c054:	930d      	str	r3, [sp, #52]	; 0x34
 800c056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f040 859a 	bne.w	800cb92 <_strtod_l+0xbba>
 800c05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c060:	b1e3      	cbz	r3, 800c09c <_strtod_l+0xc4>
 800c062:	4652      	mov	r2, sl
 800c064:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c068:	ec43 2b10 	vmov	d0, r2, r3
 800c06c:	b021      	add	sp, #132	; 0x84
 800c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c072:	2a2b      	cmp	r2, #43	; 0x2b
 800c074:	d015      	beq.n	800c0a2 <_strtod_l+0xca>
 800c076:	2a2d      	cmp	r2, #45	; 0x2d
 800c078:	d004      	beq.n	800c084 <_strtod_l+0xac>
 800c07a:	2a20      	cmp	r2, #32
 800c07c:	d1ca      	bne.n	800c014 <_strtod_l+0x3c>
 800c07e:	3301      	adds	r3, #1
 800c080:	931b      	str	r3, [sp, #108]	; 0x6c
 800c082:	e7bf      	b.n	800c004 <_strtod_l+0x2c>
 800c084:	2201      	movs	r2, #1
 800c086:	920d      	str	r2, [sp, #52]	; 0x34
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c08c:	785b      	ldrb	r3, [r3, #1]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1c2      	bne.n	800c018 <_strtod_l+0x40>
 800c092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c094:	961b      	str	r6, [sp, #108]	; 0x6c
 800c096:	2b00      	cmp	r3, #0
 800c098:	f040 8579 	bne.w	800cb8e <_strtod_l+0xbb6>
 800c09c:	4652      	mov	r2, sl
 800c09e:	465b      	mov	r3, fp
 800c0a0:	e7e2      	b.n	800c068 <_strtod_l+0x90>
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	e7ef      	b.n	800c086 <_strtod_l+0xae>
 800c0a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c0a8:	b13a      	cbz	r2, 800c0ba <_strtod_l+0xe2>
 800c0aa:	2135      	movs	r1, #53	; 0x35
 800c0ac:	a81e      	add	r0, sp, #120	; 0x78
 800c0ae:	f002 fb33 	bl	800e718 <__copybits>
 800c0b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c0b4:	4648      	mov	r0, r9
 800c0b6:	f001 ff9f 	bl	800dff8 <_Bfree>
 800c0ba:	3c01      	subs	r4, #1
 800c0bc:	2c04      	cmp	r4, #4
 800c0be:	d806      	bhi.n	800c0ce <_strtod_l+0xf6>
 800c0c0:	e8df f004 	tbb	[pc, r4]
 800c0c4:	1714030a 	.word	0x1714030a
 800c0c8:	0a          	.byte	0x0a
 800c0c9:	00          	.byte	0x00
 800c0ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c0ce:	0730      	lsls	r0, r6, #28
 800c0d0:	d5c1      	bpl.n	800c056 <_strtod_l+0x7e>
 800c0d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c0d6:	e7be      	b.n	800c056 <_strtod_l+0x7e>
 800c0d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c0dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c0de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c0e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c0e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c0ea:	e7f0      	b.n	800c0ce <_strtod_l+0xf6>
 800c0ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c260 <_strtod_l+0x288>
 800c0f0:	e7ed      	b.n	800c0ce <_strtod_l+0xf6>
 800c0f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c0f6:	f04f 3aff 	mov.w	sl, #4294967295
 800c0fa:	e7e8      	b.n	800c0ce <_strtod_l+0xf6>
 800c0fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	921b      	str	r2, [sp, #108]	; 0x6c
 800c102:	785b      	ldrb	r3, [r3, #1]
 800c104:	2b30      	cmp	r3, #48	; 0x30
 800c106:	d0f9      	beq.n	800c0fc <_strtod_l+0x124>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0a4      	beq.n	800c056 <_strtod_l+0x7e>
 800c10c:	2301      	movs	r3, #1
 800c10e:	2500      	movs	r5, #0
 800c110:	9306      	str	r3, [sp, #24]
 800c112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c114:	9308      	str	r3, [sp, #32]
 800c116:	9507      	str	r5, [sp, #28]
 800c118:	9505      	str	r5, [sp, #20]
 800c11a:	220a      	movs	r2, #10
 800c11c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c11e:	7807      	ldrb	r7, [r0, #0]
 800c120:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c124:	b2d9      	uxtb	r1, r3
 800c126:	2909      	cmp	r1, #9
 800c128:	d929      	bls.n	800c17e <_strtod_l+0x1a6>
 800c12a:	4622      	mov	r2, r4
 800c12c:	f8d8 1000 	ldr.w	r1, [r8]
 800c130:	f7ff ff24 	bl	800bf7c <strncmp>
 800c134:	2800      	cmp	r0, #0
 800c136:	d031      	beq.n	800c19c <_strtod_l+0x1c4>
 800c138:	2000      	movs	r0, #0
 800c13a:	9c05      	ldr	r4, [sp, #20]
 800c13c:	9004      	str	r0, [sp, #16]
 800c13e:	463b      	mov	r3, r7
 800c140:	4602      	mov	r2, r0
 800c142:	2b65      	cmp	r3, #101	; 0x65
 800c144:	d001      	beq.n	800c14a <_strtod_l+0x172>
 800c146:	2b45      	cmp	r3, #69	; 0x45
 800c148:	d114      	bne.n	800c174 <_strtod_l+0x19c>
 800c14a:	b924      	cbnz	r4, 800c156 <_strtod_l+0x17e>
 800c14c:	b910      	cbnz	r0, 800c154 <_strtod_l+0x17c>
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d09e      	beq.n	800c092 <_strtod_l+0xba>
 800c154:	2400      	movs	r4, #0
 800c156:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c158:	1c73      	adds	r3, r6, #1
 800c15a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c15c:	7873      	ldrb	r3, [r6, #1]
 800c15e:	2b2b      	cmp	r3, #43	; 0x2b
 800c160:	d078      	beq.n	800c254 <_strtod_l+0x27c>
 800c162:	2b2d      	cmp	r3, #45	; 0x2d
 800c164:	d070      	beq.n	800c248 <_strtod_l+0x270>
 800c166:	f04f 0c00 	mov.w	ip, #0
 800c16a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c16e:	2f09      	cmp	r7, #9
 800c170:	d97c      	bls.n	800c26c <_strtod_l+0x294>
 800c172:	961b      	str	r6, [sp, #108]	; 0x6c
 800c174:	f04f 0e00 	mov.w	lr, #0
 800c178:	e09a      	b.n	800c2b0 <_strtod_l+0x2d8>
 800c17a:	2300      	movs	r3, #0
 800c17c:	e7c7      	b.n	800c10e <_strtod_l+0x136>
 800c17e:	9905      	ldr	r1, [sp, #20]
 800c180:	2908      	cmp	r1, #8
 800c182:	bfdd      	ittte	le
 800c184:	9907      	ldrle	r1, [sp, #28]
 800c186:	fb02 3301 	mlale	r3, r2, r1, r3
 800c18a:	9307      	strle	r3, [sp, #28]
 800c18c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c190:	9b05      	ldr	r3, [sp, #20]
 800c192:	3001      	adds	r0, #1
 800c194:	3301      	adds	r3, #1
 800c196:	9305      	str	r3, [sp, #20]
 800c198:	901b      	str	r0, [sp, #108]	; 0x6c
 800c19a:	e7bf      	b.n	800c11c <_strtod_l+0x144>
 800c19c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c19e:	191a      	adds	r2, r3, r4
 800c1a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c1a2:	9a05      	ldr	r2, [sp, #20]
 800c1a4:	5d1b      	ldrb	r3, [r3, r4]
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	d037      	beq.n	800c21a <_strtod_l+0x242>
 800c1aa:	9c05      	ldr	r4, [sp, #20]
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c1b2:	2909      	cmp	r1, #9
 800c1b4:	d913      	bls.n	800c1de <_strtod_l+0x206>
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	9104      	str	r1, [sp, #16]
 800c1ba:	e7c2      	b.n	800c142 <_strtod_l+0x16a>
 800c1bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c1c2:	785b      	ldrb	r3, [r3, #1]
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	2b30      	cmp	r3, #48	; 0x30
 800c1c8:	d0f8      	beq.n	800c1bc <_strtod_l+0x1e4>
 800c1ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c1ce:	2a08      	cmp	r2, #8
 800c1d0:	f200 84e4 	bhi.w	800cb9c <_strtod_l+0xbc4>
 800c1d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c1d6:	9208      	str	r2, [sp, #32]
 800c1d8:	4602      	mov	r2, r0
 800c1da:	2000      	movs	r0, #0
 800c1dc:	4604      	mov	r4, r0
 800c1de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c1e2:	f100 0101 	add.w	r1, r0, #1
 800c1e6:	d012      	beq.n	800c20e <_strtod_l+0x236>
 800c1e8:	440a      	add	r2, r1
 800c1ea:	eb00 0c04 	add.w	ip, r0, r4
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	270a      	movs	r7, #10
 800c1f2:	458c      	cmp	ip, r1
 800c1f4:	d113      	bne.n	800c21e <_strtod_l+0x246>
 800c1f6:	1821      	adds	r1, r4, r0
 800c1f8:	2908      	cmp	r1, #8
 800c1fa:	f104 0401 	add.w	r4, r4, #1
 800c1fe:	4404      	add	r4, r0
 800c200:	dc19      	bgt.n	800c236 <_strtod_l+0x25e>
 800c202:	9b07      	ldr	r3, [sp, #28]
 800c204:	210a      	movs	r1, #10
 800c206:	fb01 e303 	mla	r3, r1, r3, lr
 800c20a:	9307      	str	r3, [sp, #28]
 800c20c:	2100      	movs	r1, #0
 800c20e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c210:	1c58      	adds	r0, r3, #1
 800c212:	901b      	str	r0, [sp, #108]	; 0x6c
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	4608      	mov	r0, r1
 800c218:	e7c9      	b.n	800c1ae <_strtod_l+0x1d6>
 800c21a:	9805      	ldr	r0, [sp, #20]
 800c21c:	e7d3      	b.n	800c1c6 <_strtod_l+0x1ee>
 800c21e:	2908      	cmp	r1, #8
 800c220:	f101 0101 	add.w	r1, r1, #1
 800c224:	dc03      	bgt.n	800c22e <_strtod_l+0x256>
 800c226:	9b07      	ldr	r3, [sp, #28]
 800c228:	437b      	muls	r3, r7
 800c22a:	9307      	str	r3, [sp, #28]
 800c22c:	e7e1      	b.n	800c1f2 <_strtod_l+0x21a>
 800c22e:	2910      	cmp	r1, #16
 800c230:	bfd8      	it	le
 800c232:	437d      	mulle	r5, r7
 800c234:	e7dd      	b.n	800c1f2 <_strtod_l+0x21a>
 800c236:	2c10      	cmp	r4, #16
 800c238:	bfdc      	itt	le
 800c23a:	210a      	movle	r1, #10
 800c23c:	fb01 e505 	mlale	r5, r1, r5, lr
 800c240:	e7e4      	b.n	800c20c <_strtod_l+0x234>
 800c242:	2301      	movs	r3, #1
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	e781      	b.n	800c14c <_strtod_l+0x174>
 800c248:	f04f 0c01 	mov.w	ip, #1
 800c24c:	1cb3      	adds	r3, r6, #2
 800c24e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c250:	78b3      	ldrb	r3, [r6, #2]
 800c252:	e78a      	b.n	800c16a <_strtod_l+0x192>
 800c254:	f04f 0c00 	mov.w	ip, #0
 800c258:	e7f8      	b.n	800c24c <_strtod_l+0x274>
 800c25a:	bf00      	nop
 800c25c:	08010154 	.word	0x08010154
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c266:	1c5f      	adds	r7, r3, #1
 800c268:	971b      	str	r7, [sp, #108]	; 0x6c
 800c26a:	785b      	ldrb	r3, [r3, #1]
 800c26c:	2b30      	cmp	r3, #48	; 0x30
 800c26e:	d0f9      	beq.n	800c264 <_strtod_l+0x28c>
 800c270:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c274:	2f08      	cmp	r7, #8
 800c276:	f63f af7d 	bhi.w	800c174 <_strtod_l+0x19c>
 800c27a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c27e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c280:	930a      	str	r3, [sp, #40]	; 0x28
 800c282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c284:	1c5f      	adds	r7, r3, #1
 800c286:	971b      	str	r7, [sp, #108]	; 0x6c
 800c288:	785b      	ldrb	r3, [r3, #1]
 800c28a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c28e:	f1b8 0f09 	cmp.w	r8, #9
 800c292:	d937      	bls.n	800c304 <_strtod_l+0x32c>
 800c294:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c296:	1a7f      	subs	r7, r7, r1
 800c298:	2f08      	cmp	r7, #8
 800c29a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c29e:	dc37      	bgt.n	800c310 <_strtod_l+0x338>
 800c2a0:	45be      	cmp	lr, r7
 800c2a2:	bfa8      	it	ge
 800c2a4:	46be      	movge	lr, r7
 800c2a6:	f1bc 0f00 	cmp.w	ip, #0
 800c2aa:	d001      	beq.n	800c2b0 <_strtod_l+0x2d8>
 800c2ac:	f1ce 0e00 	rsb	lr, lr, #0
 800c2b0:	2c00      	cmp	r4, #0
 800c2b2:	d151      	bne.n	800c358 <_strtod_l+0x380>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	f47f aece 	bne.w	800c056 <_strtod_l+0x7e>
 800c2ba:	9a06      	ldr	r2, [sp, #24]
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	f47f aeca 	bne.w	800c056 <_strtod_l+0x7e>
 800c2c2:	9a04      	ldr	r2, [sp, #16]
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	f47f aee4 	bne.w	800c092 <_strtod_l+0xba>
 800c2ca:	2b4e      	cmp	r3, #78	; 0x4e
 800c2cc:	d027      	beq.n	800c31e <_strtod_l+0x346>
 800c2ce:	dc21      	bgt.n	800c314 <_strtod_l+0x33c>
 800c2d0:	2b49      	cmp	r3, #73	; 0x49
 800c2d2:	f47f aede 	bne.w	800c092 <_strtod_l+0xba>
 800c2d6:	49a0      	ldr	r1, [pc, #640]	; (800c558 <_strtod_l+0x580>)
 800c2d8:	a81b      	add	r0, sp, #108	; 0x6c
 800c2da:	f001 fd8b 	bl	800ddf4 <__match>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	f43f aed7 	beq.w	800c092 <_strtod_l+0xba>
 800c2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2e6:	499d      	ldr	r1, [pc, #628]	; (800c55c <_strtod_l+0x584>)
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	a81b      	add	r0, sp, #108	; 0x6c
 800c2ec:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2ee:	f001 fd81 	bl	800ddf4 <__match>
 800c2f2:	b910      	cbnz	r0, 800c2fa <_strtod_l+0x322>
 800c2f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c570 <_strtod_l+0x598>
 800c2fe:	f04f 0a00 	mov.w	sl, #0
 800c302:	e6a8      	b.n	800c056 <_strtod_l+0x7e>
 800c304:	210a      	movs	r1, #10
 800c306:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c30a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c30e:	e7b8      	b.n	800c282 <_strtod_l+0x2aa>
 800c310:	46be      	mov	lr, r7
 800c312:	e7c8      	b.n	800c2a6 <_strtod_l+0x2ce>
 800c314:	2b69      	cmp	r3, #105	; 0x69
 800c316:	d0de      	beq.n	800c2d6 <_strtod_l+0x2fe>
 800c318:	2b6e      	cmp	r3, #110	; 0x6e
 800c31a:	f47f aeba 	bne.w	800c092 <_strtod_l+0xba>
 800c31e:	4990      	ldr	r1, [pc, #576]	; (800c560 <_strtod_l+0x588>)
 800c320:	a81b      	add	r0, sp, #108	; 0x6c
 800c322:	f001 fd67 	bl	800ddf4 <__match>
 800c326:	2800      	cmp	r0, #0
 800c328:	f43f aeb3 	beq.w	800c092 <_strtod_l+0xba>
 800c32c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b28      	cmp	r3, #40	; 0x28
 800c332:	d10e      	bne.n	800c352 <_strtod_l+0x37a>
 800c334:	aa1e      	add	r2, sp, #120	; 0x78
 800c336:	498b      	ldr	r1, [pc, #556]	; (800c564 <_strtod_l+0x58c>)
 800c338:	a81b      	add	r0, sp, #108	; 0x6c
 800c33a:	f001 fd6f 	bl	800de1c <__hexnan>
 800c33e:	2805      	cmp	r0, #5
 800c340:	d107      	bne.n	800c352 <_strtod_l+0x37a>
 800c342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c344:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c348:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c34c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c350:	e681      	b.n	800c056 <_strtod_l+0x7e>
 800c352:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c578 <_strtod_l+0x5a0>
 800c356:	e7d2      	b.n	800c2fe <_strtod_l+0x326>
 800c358:	ebae 0302 	sub.w	r3, lr, r2
 800c35c:	9306      	str	r3, [sp, #24]
 800c35e:	9b05      	ldr	r3, [sp, #20]
 800c360:	9807      	ldr	r0, [sp, #28]
 800c362:	2b00      	cmp	r3, #0
 800c364:	bf08      	it	eq
 800c366:	4623      	moveq	r3, r4
 800c368:	2c10      	cmp	r4, #16
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	46a0      	mov	r8, r4
 800c36e:	bfa8      	it	ge
 800c370:	f04f 0810 	movge.w	r8, #16
 800c374:	f7f4 f8c6 	bl	8000504 <__aeabi_ui2d>
 800c378:	2c09      	cmp	r4, #9
 800c37a:	4682      	mov	sl, r0
 800c37c:	468b      	mov	fp, r1
 800c37e:	dc13      	bgt.n	800c3a8 <_strtod_l+0x3d0>
 800c380:	9b06      	ldr	r3, [sp, #24]
 800c382:	2b00      	cmp	r3, #0
 800c384:	f43f ae67 	beq.w	800c056 <_strtod_l+0x7e>
 800c388:	9b06      	ldr	r3, [sp, #24]
 800c38a:	dd7a      	ble.n	800c482 <_strtod_l+0x4aa>
 800c38c:	2b16      	cmp	r3, #22
 800c38e:	dc61      	bgt.n	800c454 <_strtod_l+0x47c>
 800c390:	4a75      	ldr	r2, [pc, #468]	; (800c568 <_strtod_l+0x590>)
 800c392:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c396:	e9de 0100 	ldrd	r0, r1, [lr]
 800c39a:	4652      	mov	r2, sl
 800c39c:	465b      	mov	r3, fp
 800c39e:	f7f4 f92b 	bl	80005f8 <__aeabi_dmul>
 800c3a2:	4682      	mov	sl, r0
 800c3a4:	468b      	mov	fp, r1
 800c3a6:	e656      	b.n	800c056 <_strtod_l+0x7e>
 800c3a8:	4b6f      	ldr	r3, [pc, #444]	; (800c568 <_strtod_l+0x590>)
 800c3aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c3ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c3b2:	f7f4 f921 	bl	80005f8 <__aeabi_dmul>
 800c3b6:	4606      	mov	r6, r0
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	460f      	mov	r7, r1
 800c3bc:	f7f4 f8a2 	bl	8000504 <__aeabi_ui2d>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	f7f3 ff60 	bl	800028c <__adddf3>
 800c3cc:	2c0f      	cmp	r4, #15
 800c3ce:	4682      	mov	sl, r0
 800c3d0:	468b      	mov	fp, r1
 800c3d2:	ddd5      	ble.n	800c380 <_strtod_l+0x3a8>
 800c3d4:	9b06      	ldr	r3, [sp, #24]
 800c3d6:	eba4 0808 	sub.w	r8, r4, r8
 800c3da:	4498      	add	r8, r3
 800c3dc:	f1b8 0f00 	cmp.w	r8, #0
 800c3e0:	f340 8096 	ble.w	800c510 <_strtod_l+0x538>
 800c3e4:	f018 030f 	ands.w	r3, r8, #15
 800c3e8:	d00a      	beq.n	800c400 <_strtod_l+0x428>
 800c3ea:	495f      	ldr	r1, [pc, #380]	; (800c568 <_strtod_l+0x590>)
 800c3ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3f0:	4652      	mov	r2, sl
 800c3f2:	465b      	mov	r3, fp
 800c3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f8:	f7f4 f8fe 	bl	80005f8 <__aeabi_dmul>
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	468b      	mov	fp, r1
 800c400:	f038 080f 	bics.w	r8, r8, #15
 800c404:	d073      	beq.n	800c4ee <_strtod_l+0x516>
 800c406:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c40a:	dd47      	ble.n	800c49c <_strtod_l+0x4c4>
 800c40c:	2400      	movs	r4, #0
 800c40e:	46a0      	mov	r8, r4
 800c410:	9407      	str	r4, [sp, #28]
 800c412:	9405      	str	r4, [sp, #20]
 800c414:	2322      	movs	r3, #34	; 0x22
 800c416:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c570 <_strtod_l+0x598>
 800c41a:	f8c9 3000 	str.w	r3, [r9]
 800c41e:	f04f 0a00 	mov.w	sl, #0
 800c422:	9b07      	ldr	r3, [sp, #28]
 800c424:	2b00      	cmp	r3, #0
 800c426:	f43f ae16 	beq.w	800c056 <_strtod_l+0x7e>
 800c42a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c42c:	4648      	mov	r0, r9
 800c42e:	f001 fde3 	bl	800dff8 <_Bfree>
 800c432:	9905      	ldr	r1, [sp, #20]
 800c434:	4648      	mov	r0, r9
 800c436:	f001 fddf 	bl	800dff8 <_Bfree>
 800c43a:	4641      	mov	r1, r8
 800c43c:	4648      	mov	r0, r9
 800c43e:	f001 fddb 	bl	800dff8 <_Bfree>
 800c442:	9907      	ldr	r1, [sp, #28]
 800c444:	4648      	mov	r0, r9
 800c446:	f001 fdd7 	bl	800dff8 <_Bfree>
 800c44a:	4621      	mov	r1, r4
 800c44c:	4648      	mov	r0, r9
 800c44e:	f001 fdd3 	bl	800dff8 <_Bfree>
 800c452:	e600      	b.n	800c056 <_strtod_l+0x7e>
 800c454:	9a06      	ldr	r2, [sp, #24]
 800c456:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c45a:	4293      	cmp	r3, r2
 800c45c:	dbba      	blt.n	800c3d4 <_strtod_l+0x3fc>
 800c45e:	4d42      	ldr	r5, [pc, #264]	; (800c568 <_strtod_l+0x590>)
 800c460:	f1c4 040f 	rsb	r4, r4, #15
 800c464:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c468:	4652      	mov	r2, sl
 800c46a:	465b      	mov	r3, fp
 800c46c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	9b06      	ldr	r3, [sp, #24]
 800c476:	1b1c      	subs	r4, r3, r4
 800c478:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c47c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c480:	e78d      	b.n	800c39e <_strtod_l+0x3c6>
 800c482:	f113 0f16 	cmn.w	r3, #22
 800c486:	dba5      	blt.n	800c3d4 <_strtod_l+0x3fc>
 800c488:	4a37      	ldr	r2, [pc, #220]	; (800c568 <_strtod_l+0x590>)
 800c48a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c48e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c492:	4650      	mov	r0, sl
 800c494:	4659      	mov	r1, fp
 800c496:	f7f4 f9d9 	bl	800084c <__aeabi_ddiv>
 800c49a:	e782      	b.n	800c3a2 <_strtod_l+0x3ca>
 800c49c:	2300      	movs	r3, #0
 800c49e:	4e33      	ldr	r6, [pc, #204]	; (800c56c <_strtod_l+0x594>)
 800c4a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	4659      	mov	r1, fp
 800c4a8:	461d      	mov	r5, r3
 800c4aa:	f1b8 0f01 	cmp.w	r8, #1
 800c4ae:	dc21      	bgt.n	800c4f4 <_strtod_l+0x51c>
 800c4b0:	b10b      	cbz	r3, 800c4b6 <_strtod_l+0x4de>
 800c4b2:	4682      	mov	sl, r0
 800c4b4:	468b      	mov	fp, r1
 800c4b6:	4b2d      	ldr	r3, [pc, #180]	; (800c56c <_strtod_l+0x594>)
 800c4b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c4bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c4c0:	4652      	mov	r2, sl
 800c4c2:	465b      	mov	r3, fp
 800c4c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c4c8:	f7f4 f896 	bl	80005f8 <__aeabi_dmul>
 800c4cc:	4b28      	ldr	r3, [pc, #160]	; (800c570 <_strtod_l+0x598>)
 800c4ce:	460a      	mov	r2, r1
 800c4d0:	400b      	ands	r3, r1
 800c4d2:	4928      	ldr	r1, [pc, #160]	; (800c574 <_strtod_l+0x59c>)
 800c4d4:	428b      	cmp	r3, r1
 800c4d6:	4682      	mov	sl, r0
 800c4d8:	d898      	bhi.n	800c40c <_strtod_l+0x434>
 800c4da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c4de:	428b      	cmp	r3, r1
 800c4e0:	bf86      	itte	hi
 800c4e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c57c <_strtod_l+0x5a4>
 800c4e6:	f04f 3aff 	movhi.w	sl, #4294967295
 800c4ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	e077      	b.n	800c5e4 <_strtod_l+0x60c>
 800c4f4:	f018 0f01 	tst.w	r8, #1
 800c4f8:	d006      	beq.n	800c508 <_strtod_l+0x530>
 800c4fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	f7f4 f879 	bl	80005f8 <__aeabi_dmul>
 800c506:	2301      	movs	r3, #1
 800c508:	3501      	adds	r5, #1
 800c50a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c50e:	e7cc      	b.n	800c4aa <_strtod_l+0x4d2>
 800c510:	d0ed      	beq.n	800c4ee <_strtod_l+0x516>
 800c512:	f1c8 0800 	rsb	r8, r8, #0
 800c516:	f018 020f 	ands.w	r2, r8, #15
 800c51a:	d00a      	beq.n	800c532 <_strtod_l+0x55a>
 800c51c:	4b12      	ldr	r3, [pc, #72]	; (800c568 <_strtod_l+0x590>)
 800c51e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c522:	4650      	mov	r0, sl
 800c524:	4659      	mov	r1, fp
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	f7f4 f98f 	bl	800084c <__aeabi_ddiv>
 800c52e:	4682      	mov	sl, r0
 800c530:	468b      	mov	fp, r1
 800c532:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c536:	d0da      	beq.n	800c4ee <_strtod_l+0x516>
 800c538:	f1b8 0f1f 	cmp.w	r8, #31
 800c53c:	dd20      	ble.n	800c580 <_strtod_l+0x5a8>
 800c53e:	2400      	movs	r4, #0
 800c540:	46a0      	mov	r8, r4
 800c542:	9407      	str	r4, [sp, #28]
 800c544:	9405      	str	r4, [sp, #20]
 800c546:	2322      	movs	r3, #34	; 0x22
 800c548:	f04f 0a00 	mov.w	sl, #0
 800c54c:	f04f 0b00 	mov.w	fp, #0
 800c550:	f8c9 3000 	str.w	r3, [r9]
 800c554:	e765      	b.n	800c422 <_strtod_l+0x44a>
 800c556:	bf00      	nop
 800c558:	08010125 	.word	0x08010125
 800c55c:	080101ab 	.word	0x080101ab
 800c560:	0801012d 	.word	0x0801012d
 800c564:	08010168 	.word	0x08010168
 800c568:	080101e8 	.word	0x080101e8
 800c56c:	080101c0 	.word	0x080101c0
 800c570:	7ff00000 	.word	0x7ff00000
 800c574:	7ca00000 	.word	0x7ca00000
 800c578:	fff80000 	.word	0xfff80000
 800c57c:	7fefffff 	.word	0x7fefffff
 800c580:	f018 0310 	ands.w	r3, r8, #16
 800c584:	bf18      	it	ne
 800c586:	236a      	movne	r3, #106	; 0x6a
 800c588:	4da0      	ldr	r5, [pc, #640]	; (800c80c <_strtod_l+0x834>)
 800c58a:	9304      	str	r3, [sp, #16]
 800c58c:	4650      	mov	r0, sl
 800c58e:	4659      	mov	r1, fp
 800c590:	2300      	movs	r3, #0
 800c592:	f1b8 0f00 	cmp.w	r8, #0
 800c596:	f300 810a 	bgt.w	800c7ae <_strtod_l+0x7d6>
 800c59a:	b10b      	cbz	r3, 800c5a0 <_strtod_l+0x5c8>
 800c59c:	4682      	mov	sl, r0
 800c59e:	468b      	mov	fp, r1
 800c5a0:	9b04      	ldr	r3, [sp, #16]
 800c5a2:	b1bb      	cbz	r3, 800c5d4 <_strtod_l+0x5fc>
 800c5a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c5a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	dd10      	ble.n	800c5d4 <_strtod_l+0x5fc>
 800c5b2:	2b1f      	cmp	r3, #31
 800c5b4:	f340 8107 	ble.w	800c7c6 <_strtod_l+0x7ee>
 800c5b8:	2b34      	cmp	r3, #52	; 0x34
 800c5ba:	bfde      	ittt	le
 800c5bc:	3b20      	suble	r3, #32
 800c5be:	f04f 32ff 	movle.w	r2, #4294967295
 800c5c2:	fa02 f303 	lslle.w	r3, r2, r3
 800c5c6:	f04f 0a00 	mov.w	sl, #0
 800c5ca:	bfcc      	ite	gt
 800c5cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c5d0:	ea03 0b01 	andle.w	fp, r3, r1
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	4650      	mov	r0, sl
 800c5da:	4659      	mov	r1, fp
 800c5dc:	f7f4 fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d1ac      	bne.n	800c53e <_strtod_l+0x566>
 800c5e4:	9b07      	ldr	r3, [sp, #28]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	9a05      	ldr	r2, [sp, #20]
 800c5ea:	9908      	ldr	r1, [sp, #32]
 800c5ec:	4623      	mov	r3, r4
 800c5ee:	4648      	mov	r0, r9
 800c5f0:	f001 fd54 	bl	800e09c <__s2b>
 800c5f4:	9007      	str	r0, [sp, #28]
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f43f af08 	beq.w	800c40c <_strtod_l+0x434>
 800c5fc:	9a06      	ldr	r2, [sp, #24]
 800c5fe:	9b06      	ldr	r3, [sp, #24]
 800c600:	2a00      	cmp	r2, #0
 800c602:	f1c3 0300 	rsb	r3, r3, #0
 800c606:	bfa8      	it	ge
 800c608:	2300      	movge	r3, #0
 800c60a:	930e      	str	r3, [sp, #56]	; 0x38
 800c60c:	2400      	movs	r4, #0
 800c60e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c612:	9316      	str	r3, [sp, #88]	; 0x58
 800c614:	46a0      	mov	r8, r4
 800c616:	9b07      	ldr	r3, [sp, #28]
 800c618:	4648      	mov	r0, r9
 800c61a:	6859      	ldr	r1, [r3, #4]
 800c61c:	f001 fcb8 	bl	800df90 <_Balloc>
 800c620:	9005      	str	r0, [sp, #20]
 800c622:	2800      	cmp	r0, #0
 800c624:	f43f aef6 	beq.w	800c414 <_strtod_l+0x43c>
 800c628:	9b07      	ldr	r3, [sp, #28]
 800c62a:	691a      	ldr	r2, [r3, #16]
 800c62c:	3202      	adds	r2, #2
 800c62e:	f103 010c 	add.w	r1, r3, #12
 800c632:	0092      	lsls	r2, r2, #2
 800c634:	300c      	adds	r0, #12
 800c636:	f7ff f811 	bl	800b65c <memcpy>
 800c63a:	aa1e      	add	r2, sp, #120	; 0x78
 800c63c:	a91d      	add	r1, sp, #116	; 0x74
 800c63e:	ec4b ab10 	vmov	d0, sl, fp
 800c642:	4648      	mov	r0, r9
 800c644:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c648:	f001 ffe4 	bl	800e614 <__d2b>
 800c64c:	901c      	str	r0, [sp, #112]	; 0x70
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f aee0 	beq.w	800c414 <_strtod_l+0x43c>
 800c654:	2101      	movs	r1, #1
 800c656:	4648      	mov	r0, r9
 800c658:	f001 fdac 	bl	800e1b4 <__i2b>
 800c65c:	4680      	mov	r8, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	f43f aed8 	beq.w	800c414 <_strtod_l+0x43c>
 800c664:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c666:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c668:	2e00      	cmp	r6, #0
 800c66a:	bfab      	itete	ge
 800c66c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c66e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c670:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c672:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c674:	bfac      	ite	ge
 800c676:	18f7      	addge	r7, r6, r3
 800c678:	1b9d      	sublt	r5, r3, r6
 800c67a:	9b04      	ldr	r3, [sp, #16]
 800c67c:	1af6      	subs	r6, r6, r3
 800c67e:	4416      	add	r6, r2
 800c680:	4b63      	ldr	r3, [pc, #396]	; (800c810 <_strtod_l+0x838>)
 800c682:	3e01      	subs	r6, #1
 800c684:	429e      	cmp	r6, r3
 800c686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c68a:	f280 80af 	bge.w	800c7ec <_strtod_l+0x814>
 800c68e:	1b9b      	subs	r3, r3, r6
 800c690:	2b1f      	cmp	r3, #31
 800c692:	eba2 0203 	sub.w	r2, r2, r3
 800c696:	f04f 0101 	mov.w	r1, #1
 800c69a:	f300 809b 	bgt.w	800c7d4 <_strtod_l+0x7fc>
 800c69e:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a8:	18be      	adds	r6, r7, r2
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	42b7      	cmp	r7, r6
 800c6ae:	4415      	add	r5, r2
 800c6b0:	441d      	add	r5, r3
 800c6b2:	463b      	mov	r3, r7
 800c6b4:	bfa8      	it	ge
 800c6b6:	4633      	movge	r3, r6
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	bfa8      	it	ge
 800c6bc:	462b      	movge	r3, r5
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfc2      	ittt	gt
 800c6c2:	1af6      	subgt	r6, r6, r3
 800c6c4:	1aed      	subgt	r5, r5, r3
 800c6c6:	1aff      	subgt	r7, r7, r3
 800c6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6ca:	b1bb      	cbz	r3, 800c6fc <_strtod_l+0x724>
 800c6cc:	4641      	mov	r1, r8
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4648      	mov	r0, r9
 800c6d2:	f001 fe0f 	bl	800e2f4 <__pow5mult>
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f43f ae9b 	beq.w	800c414 <_strtod_l+0x43c>
 800c6de:	4601      	mov	r1, r0
 800c6e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c6e2:	4648      	mov	r0, r9
 800c6e4:	f001 fd6f 	bl	800e1c6 <__multiply>
 800c6e8:	900c      	str	r0, [sp, #48]	; 0x30
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	f43f ae92 	beq.w	800c414 <_strtod_l+0x43c>
 800c6f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6f2:	4648      	mov	r0, r9
 800c6f4:	f001 fc80 	bl	800dff8 <_Bfree>
 800c6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6fa:	931c      	str	r3, [sp, #112]	; 0x70
 800c6fc:	2e00      	cmp	r6, #0
 800c6fe:	dc7a      	bgt.n	800c7f6 <_strtod_l+0x81e>
 800c700:	9b06      	ldr	r3, [sp, #24]
 800c702:	2b00      	cmp	r3, #0
 800c704:	dd08      	ble.n	800c718 <_strtod_l+0x740>
 800c706:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c708:	9905      	ldr	r1, [sp, #20]
 800c70a:	4648      	mov	r0, r9
 800c70c:	f001 fdf2 	bl	800e2f4 <__pow5mult>
 800c710:	9005      	str	r0, [sp, #20]
 800c712:	2800      	cmp	r0, #0
 800c714:	f43f ae7e 	beq.w	800c414 <_strtod_l+0x43c>
 800c718:	2d00      	cmp	r5, #0
 800c71a:	dd08      	ble.n	800c72e <_strtod_l+0x756>
 800c71c:	462a      	mov	r2, r5
 800c71e:	9905      	ldr	r1, [sp, #20]
 800c720:	4648      	mov	r0, r9
 800c722:	f001 fe35 	bl	800e390 <__lshift>
 800c726:	9005      	str	r0, [sp, #20]
 800c728:	2800      	cmp	r0, #0
 800c72a:	f43f ae73 	beq.w	800c414 <_strtod_l+0x43c>
 800c72e:	2f00      	cmp	r7, #0
 800c730:	dd08      	ble.n	800c744 <_strtod_l+0x76c>
 800c732:	4641      	mov	r1, r8
 800c734:	463a      	mov	r2, r7
 800c736:	4648      	mov	r0, r9
 800c738:	f001 fe2a 	bl	800e390 <__lshift>
 800c73c:	4680      	mov	r8, r0
 800c73e:	2800      	cmp	r0, #0
 800c740:	f43f ae68 	beq.w	800c414 <_strtod_l+0x43c>
 800c744:	9a05      	ldr	r2, [sp, #20]
 800c746:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c748:	4648      	mov	r0, r9
 800c74a:	f001 fe8f 	bl	800e46c <__mdiff>
 800c74e:	4604      	mov	r4, r0
 800c750:	2800      	cmp	r0, #0
 800c752:	f43f ae5f 	beq.w	800c414 <_strtod_l+0x43c>
 800c756:	68c3      	ldr	r3, [r0, #12]
 800c758:	930c      	str	r3, [sp, #48]	; 0x30
 800c75a:	2300      	movs	r3, #0
 800c75c:	60c3      	str	r3, [r0, #12]
 800c75e:	4641      	mov	r1, r8
 800c760:	f001 fe6a 	bl	800e438 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	da55      	bge.n	800c814 <_strtod_l+0x83c>
 800c768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c76a:	b9e3      	cbnz	r3, 800c7a6 <_strtod_l+0x7ce>
 800c76c:	f1ba 0f00 	cmp.w	sl, #0
 800c770:	d119      	bne.n	800c7a6 <_strtod_l+0x7ce>
 800c772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c776:	b9b3      	cbnz	r3, 800c7a6 <_strtod_l+0x7ce>
 800c778:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c77c:	0d1b      	lsrs	r3, r3, #20
 800c77e:	051b      	lsls	r3, r3, #20
 800c780:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c784:	d90f      	bls.n	800c7a6 <_strtod_l+0x7ce>
 800c786:	6963      	ldr	r3, [r4, #20]
 800c788:	b913      	cbnz	r3, 800c790 <_strtod_l+0x7b8>
 800c78a:	6923      	ldr	r3, [r4, #16]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	dd0a      	ble.n	800c7a6 <_strtod_l+0x7ce>
 800c790:	4621      	mov	r1, r4
 800c792:	2201      	movs	r2, #1
 800c794:	4648      	mov	r0, r9
 800c796:	f001 fdfb 	bl	800e390 <__lshift>
 800c79a:	4641      	mov	r1, r8
 800c79c:	4604      	mov	r4, r0
 800c79e:	f001 fe4b 	bl	800e438 <__mcmp>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	dc67      	bgt.n	800c876 <_strtod_l+0x89e>
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d171      	bne.n	800c890 <_strtod_l+0x8b8>
 800c7ac:	e63d      	b.n	800c42a <_strtod_l+0x452>
 800c7ae:	f018 0f01 	tst.w	r8, #1
 800c7b2:	d004      	beq.n	800c7be <_strtod_l+0x7e6>
 800c7b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7b8:	f7f3 ff1e 	bl	80005f8 <__aeabi_dmul>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7c2:	3508      	adds	r5, #8
 800c7c4:	e6e5      	b.n	800c592 <_strtod_l+0x5ba>
 800c7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ce:	ea03 0a0a 	and.w	sl, r3, sl
 800c7d2:	e6ff      	b.n	800c5d4 <_strtod_l+0x5fc>
 800c7d4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c7d8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c7dc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c7e0:	36e2      	adds	r6, #226	; 0xe2
 800c7e2:	fa01 f306 	lsl.w	r3, r1, r6
 800c7e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c7e8:	910f      	str	r1, [sp, #60]	; 0x3c
 800c7ea:	e75d      	b.n	800c6a8 <_strtod_l+0x6d0>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7f4:	e758      	b.n	800c6a8 <_strtod_l+0x6d0>
 800c7f6:	4632      	mov	r2, r6
 800c7f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7fa:	4648      	mov	r0, r9
 800c7fc:	f001 fdc8 	bl	800e390 <__lshift>
 800c800:	901c      	str	r0, [sp, #112]	; 0x70
 800c802:	2800      	cmp	r0, #0
 800c804:	f47f af7c 	bne.w	800c700 <_strtod_l+0x728>
 800c808:	e604      	b.n	800c414 <_strtod_l+0x43c>
 800c80a:	bf00      	nop
 800c80c:	08010180 	.word	0x08010180
 800c810:	fffffc02 	.word	0xfffffc02
 800c814:	465d      	mov	r5, fp
 800c816:	f040 8086 	bne.w	800c926 <_strtod_l+0x94e>
 800c81a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c81c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c820:	b32a      	cbz	r2, 800c86e <_strtod_l+0x896>
 800c822:	4aaf      	ldr	r2, [pc, #700]	; (800cae0 <_strtod_l+0xb08>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d153      	bne.n	800c8d0 <_strtod_l+0x8f8>
 800c828:	9b04      	ldr	r3, [sp, #16]
 800c82a:	4650      	mov	r0, sl
 800c82c:	b1d3      	cbz	r3, 800c864 <_strtod_l+0x88c>
 800c82e:	4aad      	ldr	r2, [pc, #692]	; (800cae4 <_strtod_l+0xb0c>)
 800c830:	402a      	ands	r2, r5
 800c832:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c836:	f04f 31ff 	mov.w	r1, #4294967295
 800c83a:	d816      	bhi.n	800c86a <_strtod_l+0x892>
 800c83c:	0d12      	lsrs	r2, r2, #20
 800c83e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c842:	fa01 f303 	lsl.w	r3, r1, r3
 800c846:	4298      	cmp	r0, r3
 800c848:	d142      	bne.n	800c8d0 <_strtod_l+0x8f8>
 800c84a:	4ba7      	ldr	r3, [pc, #668]	; (800cae8 <_strtod_l+0xb10>)
 800c84c:	429d      	cmp	r5, r3
 800c84e:	d102      	bne.n	800c856 <_strtod_l+0x87e>
 800c850:	3001      	adds	r0, #1
 800c852:	f43f addf 	beq.w	800c414 <_strtod_l+0x43c>
 800c856:	4ba3      	ldr	r3, [pc, #652]	; (800cae4 <_strtod_l+0xb0c>)
 800c858:	402b      	ands	r3, r5
 800c85a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c85e:	f04f 0a00 	mov.w	sl, #0
 800c862:	e7a0      	b.n	800c7a6 <_strtod_l+0x7ce>
 800c864:	f04f 33ff 	mov.w	r3, #4294967295
 800c868:	e7ed      	b.n	800c846 <_strtod_l+0x86e>
 800c86a:	460b      	mov	r3, r1
 800c86c:	e7eb      	b.n	800c846 <_strtod_l+0x86e>
 800c86e:	bb7b      	cbnz	r3, 800c8d0 <_strtod_l+0x8f8>
 800c870:	f1ba 0f00 	cmp.w	sl, #0
 800c874:	d12c      	bne.n	800c8d0 <_strtod_l+0x8f8>
 800c876:	9904      	ldr	r1, [sp, #16]
 800c878:	4a9a      	ldr	r2, [pc, #616]	; (800cae4 <_strtod_l+0xb0c>)
 800c87a:	465b      	mov	r3, fp
 800c87c:	b1f1      	cbz	r1, 800c8bc <_strtod_l+0x8e4>
 800c87e:	ea02 010b 	and.w	r1, r2, fp
 800c882:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c886:	dc19      	bgt.n	800c8bc <_strtod_l+0x8e4>
 800c888:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c88c:	f77f ae5b 	ble.w	800c546 <_strtod_l+0x56e>
 800c890:	4a96      	ldr	r2, [pc, #600]	; (800caec <_strtod_l+0xb14>)
 800c892:	2300      	movs	r3, #0
 800c894:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c898:	4650      	mov	r0, sl
 800c89a:	4659      	mov	r1, fp
 800c89c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c8a0:	f7f3 feaa 	bl	80005f8 <__aeabi_dmul>
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	468b      	mov	fp, r1
 800c8a8:	2900      	cmp	r1, #0
 800c8aa:	f47f adbe 	bne.w	800c42a <_strtod_l+0x452>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	f47f adbb 	bne.w	800c42a <_strtod_l+0x452>
 800c8b4:	2322      	movs	r3, #34	; 0x22
 800c8b6:	f8c9 3000 	str.w	r3, [r9]
 800c8ba:	e5b6      	b.n	800c42a <_strtod_l+0x452>
 800c8bc:	4013      	ands	r3, r2
 800c8be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c8c2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c8c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c8ca:	f04f 3aff 	mov.w	sl, #4294967295
 800c8ce:	e76a      	b.n	800c7a6 <_strtod_l+0x7ce>
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d2:	b193      	cbz	r3, 800c8fa <_strtod_l+0x922>
 800c8d4:	422b      	tst	r3, r5
 800c8d6:	f43f af66 	beq.w	800c7a6 <_strtod_l+0x7ce>
 800c8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8dc:	9a04      	ldr	r2, [sp, #16]
 800c8de:	4650      	mov	r0, sl
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	b173      	cbz	r3, 800c902 <_strtod_l+0x92a>
 800c8e4:	f7ff fb5c 	bl	800bfa0 <sulp>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8f0:	f7f3 fccc 	bl	800028c <__adddf3>
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	468b      	mov	fp, r1
 800c8f8:	e755      	b.n	800c7a6 <_strtod_l+0x7ce>
 800c8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8fc:	ea13 0f0a 	tst.w	r3, sl
 800c900:	e7e9      	b.n	800c8d6 <_strtod_l+0x8fe>
 800c902:	f7ff fb4d 	bl	800bfa0 <sulp>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c90e:	f7f3 fcbb 	bl	8000288 <__aeabi_dsub>
 800c912:	2200      	movs	r2, #0
 800c914:	2300      	movs	r3, #0
 800c916:	4682      	mov	sl, r0
 800c918:	468b      	mov	fp, r1
 800c91a:	f7f4 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c91e:	2800      	cmp	r0, #0
 800c920:	f47f ae11 	bne.w	800c546 <_strtod_l+0x56e>
 800c924:	e73f      	b.n	800c7a6 <_strtod_l+0x7ce>
 800c926:	4641      	mov	r1, r8
 800c928:	4620      	mov	r0, r4
 800c92a:	f001 fec2 	bl	800e6b2 <__ratio>
 800c92e:	ec57 6b10 	vmov	r6, r7, d0
 800c932:	2200      	movs	r2, #0
 800c934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c938:	ee10 0a10 	vmov	r0, s0
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f4 f8d7 	bl	8000af0 <__aeabi_dcmple>
 800c942:	2800      	cmp	r0, #0
 800c944:	d077      	beq.n	800ca36 <_strtod_l+0xa5e>
 800c946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d04a      	beq.n	800c9e2 <_strtod_l+0xa0a>
 800c94c:	4b68      	ldr	r3, [pc, #416]	; (800caf0 <_strtod_l+0xb18>)
 800c94e:	2200      	movs	r2, #0
 800c950:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c954:	4f66      	ldr	r7, [pc, #408]	; (800caf0 <_strtod_l+0xb18>)
 800c956:	2600      	movs	r6, #0
 800c958:	4b62      	ldr	r3, [pc, #392]	; (800cae4 <_strtod_l+0xb0c>)
 800c95a:	402b      	ands	r3, r5
 800c95c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c95e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c960:	4b64      	ldr	r3, [pc, #400]	; (800caf4 <_strtod_l+0xb1c>)
 800c962:	429a      	cmp	r2, r3
 800c964:	f040 80ce 	bne.w	800cb04 <_strtod_l+0xb2c>
 800c968:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c96c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c970:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c974:	ec4b ab10 	vmov	d0, sl, fp
 800c978:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c97c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c980:	f001 fdd2 	bl	800e528 <__ulp>
 800c984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c988:	ec53 2b10 	vmov	r2, r3, d0
 800c98c:	f7f3 fe34 	bl	80005f8 <__aeabi_dmul>
 800c990:	4652      	mov	r2, sl
 800c992:	465b      	mov	r3, fp
 800c994:	f7f3 fc7a 	bl	800028c <__adddf3>
 800c998:	460b      	mov	r3, r1
 800c99a:	4952      	ldr	r1, [pc, #328]	; (800cae4 <_strtod_l+0xb0c>)
 800c99c:	4a56      	ldr	r2, [pc, #344]	; (800caf8 <_strtod_l+0xb20>)
 800c99e:	4019      	ands	r1, r3
 800c9a0:	4291      	cmp	r1, r2
 800c9a2:	4682      	mov	sl, r0
 800c9a4:	d95b      	bls.n	800ca5e <_strtod_l+0xa86>
 800c9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d103      	bne.n	800c9b8 <_strtod_l+0x9e0>
 800c9b0:	9b08      	ldr	r3, [sp, #32]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	f43f ad2e 	beq.w	800c414 <_strtod_l+0x43c>
 800c9b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cae8 <_strtod_l+0xb10>
 800c9bc:	f04f 3aff 	mov.w	sl, #4294967295
 800c9c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9c2:	4648      	mov	r0, r9
 800c9c4:	f001 fb18 	bl	800dff8 <_Bfree>
 800c9c8:	9905      	ldr	r1, [sp, #20]
 800c9ca:	4648      	mov	r0, r9
 800c9cc:	f001 fb14 	bl	800dff8 <_Bfree>
 800c9d0:	4641      	mov	r1, r8
 800c9d2:	4648      	mov	r0, r9
 800c9d4:	f001 fb10 	bl	800dff8 <_Bfree>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4648      	mov	r0, r9
 800c9dc:	f001 fb0c 	bl	800dff8 <_Bfree>
 800c9e0:	e619      	b.n	800c616 <_strtod_l+0x63e>
 800c9e2:	f1ba 0f00 	cmp.w	sl, #0
 800c9e6:	d11a      	bne.n	800ca1e <_strtod_l+0xa46>
 800c9e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9ec:	b9eb      	cbnz	r3, 800ca2a <_strtod_l+0xa52>
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4b3f      	ldr	r3, [pc, #252]	; (800caf0 <_strtod_l+0xb18>)
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	f7f4 f871 	bl	8000adc <__aeabi_dcmplt>
 800c9fa:	b9c8      	cbnz	r0, 800ca30 <_strtod_l+0xa58>
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	4639      	mov	r1, r7
 800ca00:	2200      	movs	r2, #0
 800ca02:	4b3e      	ldr	r3, [pc, #248]	; (800cafc <_strtod_l+0xb24>)
 800ca04:	f7f3 fdf8 	bl	80005f8 <__aeabi_dmul>
 800ca08:	4606      	mov	r6, r0
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ca10:	9618      	str	r6, [sp, #96]	; 0x60
 800ca12:	9319      	str	r3, [sp, #100]	; 0x64
 800ca14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ca18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ca1c:	e79c      	b.n	800c958 <_strtod_l+0x980>
 800ca1e:	f1ba 0f01 	cmp.w	sl, #1
 800ca22:	d102      	bne.n	800ca2a <_strtod_l+0xa52>
 800ca24:	2d00      	cmp	r5, #0
 800ca26:	f43f ad8e 	beq.w	800c546 <_strtod_l+0x56e>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	4b34      	ldr	r3, [pc, #208]	; (800cb00 <_strtod_l+0xb28>)
 800ca2e:	e78f      	b.n	800c950 <_strtod_l+0x978>
 800ca30:	2600      	movs	r6, #0
 800ca32:	4f32      	ldr	r7, [pc, #200]	; (800cafc <_strtod_l+0xb24>)
 800ca34:	e7ea      	b.n	800ca0c <_strtod_l+0xa34>
 800ca36:	4b31      	ldr	r3, [pc, #196]	; (800cafc <_strtod_l+0xb24>)
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4639      	mov	r1, r7
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f7f3 fddb 	bl	80005f8 <__aeabi_dmul>
 800ca42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca44:	4606      	mov	r6, r0
 800ca46:	460f      	mov	r7, r1
 800ca48:	b933      	cbnz	r3, 800ca58 <_strtod_l+0xa80>
 800ca4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca4e:	9010      	str	r0, [sp, #64]	; 0x40
 800ca50:	9311      	str	r3, [sp, #68]	; 0x44
 800ca52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca56:	e7df      	b.n	800ca18 <_strtod_l+0xa40>
 800ca58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ca5c:	e7f9      	b.n	800ca52 <_strtod_l+0xa7a>
 800ca5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ca62:	9b04      	ldr	r3, [sp, #16]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1ab      	bne.n	800c9c0 <_strtod_l+0x9e8>
 800ca68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca6c:	0d1b      	lsrs	r3, r3, #20
 800ca6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca70:	051b      	lsls	r3, r3, #20
 800ca72:	429a      	cmp	r2, r3
 800ca74:	465d      	mov	r5, fp
 800ca76:	d1a3      	bne.n	800c9c0 <_strtod_l+0x9e8>
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7f4 f86c 	bl	8000b58 <__aeabi_d2iz>
 800ca80:	f7f3 fd50 	bl	8000524 <__aeabi_i2d>
 800ca84:	460b      	mov	r3, r1
 800ca86:	4602      	mov	r2, r0
 800ca88:	4639      	mov	r1, r7
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7f3 fbfc 	bl	8000288 <__aeabi_dsub>
 800ca90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	b933      	cbnz	r3, 800caa6 <_strtod_l+0xace>
 800ca98:	f1ba 0f00 	cmp.w	sl, #0
 800ca9c:	d103      	bne.n	800caa6 <_strtod_l+0xace>
 800ca9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800caa2:	2d00      	cmp	r5, #0
 800caa4:	d06d      	beq.n	800cb82 <_strtod_l+0xbaa>
 800caa6:	a30a      	add	r3, pc, #40	; (adr r3, 800cad0 <_strtod_l+0xaf8>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	4630      	mov	r0, r6
 800caae:	4639      	mov	r1, r7
 800cab0:	f7f4 f814 	bl	8000adc <__aeabi_dcmplt>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	f47f acb8 	bne.w	800c42a <_strtod_l+0x452>
 800caba:	a307      	add	r3, pc, #28	; (adr r3, 800cad8 <_strtod_l+0xb00>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	4630      	mov	r0, r6
 800cac2:	4639      	mov	r1, r7
 800cac4:	f7f4 f828 	bl	8000b18 <__aeabi_dcmpgt>
 800cac8:	2800      	cmp	r0, #0
 800caca:	f43f af79 	beq.w	800c9c0 <_strtod_l+0x9e8>
 800cace:	e4ac      	b.n	800c42a <_strtod_l+0x452>
 800cad0:	94a03595 	.word	0x94a03595
 800cad4:	3fdfffff 	.word	0x3fdfffff
 800cad8:	35afe535 	.word	0x35afe535
 800cadc:	3fe00000 	.word	0x3fe00000
 800cae0:	000fffff 	.word	0x000fffff
 800cae4:	7ff00000 	.word	0x7ff00000
 800cae8:	7fefffff 	.word	0x7fefffff
 800caec:	39500000 	.word	0x39500000
 800caf0:	3ff00000 	.word	0x3ff00000
 800caf4:	7fe00000 	.word	0x7fe00000
 800caf8:	7c9fffff 	.word	0x7c9fffff
 800cafc:	3fe00000 	.word	0x3fe00000
 800cb00:	bff00000 	.word	0xbff00000
 800cb04:	9b04      	ldr	r3, [sp, #16]
 800cb06:	b333      	cbz	r3, 800cb56 <_strtod_l+0xb7e>
 800cb08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb0e:	d822      	bhi.n	800cb56 <_strtod_l+0xb7e>
 800cb10:	a327      	add	r3, pc, #156	; (adr r3, 800cbb0 <_strtod_l+0xbd8>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	4630      	mov	r0, r6
 800cb18:	4639      	mov	r1, r7
 800cb1a:	f7f3 ffe9 	bl	8000af0 <__aeabi_dcmple>
 800cb1e:	b1a0      	cbz	r0, 800cb4a <_strtod_l+0xb72>
 800cb20:	4639      	mov	r1, r7
 800cb22:	4630      	mov	r0, r6
 800cb24:	f7f4 f840 	bl	8000ba8 <__aeabi_d2uiz>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	bf08      	it	eq
 800cb2c:	2001      	moveq	r0, #1
 800cb2e:	f7f3 fce9 	bl	8000504 <__aeabi_ui2d>
 800cb32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	bb03      	cbnz	r3, 800cb7c <_strtod_l+0xba4>
 800cb3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb3e:	9012      	str	r0, [sp, #72]	; 0x48
 800cb40:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cb46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb4e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb56:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cb5a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800cb5e:	f001 fce3 	bl	800e528 <__ulp>
 800cb62:	4650      	mov	r0, sl
 800cb64:	ec53 2b10 	vmov	r2, r3, d0
 800cb68:	4659      	mov	r1, fp
 800cb6a:	f7f3 fd45 	bl	80005f8 <__aeabi_dmul>
 800cb6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb72:	f7f3 fb8b 	bl	800028c <__adddf3>
 800cb76:	4682      	mov	sl, r0
 800cb78:	468b      	mov	fp, r1
 800cb7a:	e772      	b.n	800ca62 <_strtod_l+0xa8a>
 800cb7c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800cb80:	e7df      	b.n	800cb42 <_strtod_l+0xb6a>
 800cb82:	a30d      	add	r3, pc, #52	; (adr r3, 800cbb8 <_strtod_l+0xbe0>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7f3 ffa8 	bl	8000adc <__aeabi_dcmplt>
 800cb8c:	e79c      	b.n	800cac8 <_strtod_l+0xaf0>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	930d      	str	r3, [sp, #52]	; 0x34
 800cb92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	f7ff ba61 	b.w	800c05e <_strtod_l+0x86>
 800cb9c:	2b65      	cmp	r3, #101	; 0x65
 800cb9e:	f04f 0200 	mov.w	r2, #0
 800cba2:	f43f ab4e 	beq.w	800c242 <_strtod_l+0x26a>
 800cba6:	2101      	movs	r1, #1
 800cba8:	4614      	mov	r4, r2
 800cbaa:	9104      	str	r1, [sp, #16]
 800cbac:	f7ff bacb 	b.w	800c146 <_strtod_l+0x16e>
 800cbb0:	ffc00000 	.word	0xffc00000
 800cbb4:	41dfffff 	.word	0x41dfffff
 800cbb8:	94a03595 	.word	0x94a03595
 800cbbc:	3fcfffff 	.word	0x3fcfffff

0800cbc0 <strtof>:
 800cbc0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800cbc4:	4e24      	ldr	r6, [pc, #144]	; (800cc58 <strtof+0x98>)
 800cbc6:	4a25      	ldr	r2, [pc, #148]	; (800cc5c <strtof+0x9c>)
 800cbc8:	6834      	ldr	r4, [r6, #0]
 800cbca:	6a23      	ldr	r3, [r4, #32]
 800cbcc:	ed2d 8b02 	vpush	{d8}
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bf08      	it	eq
 800cbd4:	4613      	moveq	r3, r2
 800cbd6:	460a      	mov	r2, r1
 800cbd8:	4601      	mov	r1, r0
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f7ff f9fc 	bl	800bfd8 <_strtod_l>
 800cbe0:	ec55 4b10 	vmov	r4, r5, d0
 800cbe4:	ee10 2a10 	vmov	r2, s0
 800cbe8:	462b      	mov	r3, r5
 800cbea:	ee10 0a10 	vmov	r0, s0
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 ff9c 	bl	8000b2c <__aeabi_dcmpun>
 800cbf4:	b130      	cbz	r0, 800cc04 <strtof+0x44>
 800cbf6:	ecbd 8b02 	vpop	{d8}
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800cc00:	f001 bfde 	b.w	800ebc0 <nanf>
 800cc04:	4620      	mov	r0, r4
 800cc06:	4629      	mov	r1, r5
 800cc08:	f7f3 ffee 	bl	8000be8 <__aeabi_d2f>
 800cc0c:	ee08 0a10 	vmov	s16, r0
 800cc10:	eddf 7a13 	vldr	s15, [pc, #76]	; 800cc60 <strtof+0xa0>
 800cc14:	eeb0 7ac8 	vabs.f32	s14, s16
 800cc18:	eeb4 7a67 	vcmp.f32	s14, s15
 800cc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc20:	dd14      	ble.n	800cc4c <strtof+0x8c>
 800cc22:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800cc26:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2a:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <strtof+0xa4>)
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	4649      	mov	r1, r9
 800cc30:	f7f3 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 800cc34:	b938      	cbnz	r0, 800cc46 <strtof+0x86>
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3a:	4b0a      	ldr	r3, [pc, #40]	; (800cc64 <strtof+0xa4>)
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 ff56 	bl	8000af0 <__aeabi_dcmple>
 800cc44:	b110      	cbz	r0, 800cc4c <strtof+0x8c>
 800cc46:	6833      	ldr	r3, [r6, #0]
 800cc48:	2222      	movs	r2, #34	; 0x22
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	eeb0 0a48 	vmov.f32	s0, s16
 800cc50:	ecbd 8b02 	vpop	{d8}
 800cc54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cc58:	2000000c 	.word	0x2000000c
 800cc5c:	20000070 	.word	0x20000070
 800cc60:	7f7fffff 	.word	0x7f7fffff
 800cc64:	7fefffff 	.word	0x7fefffff

0800cc68 <quorem>:
 800cc68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	6903      	ldr	r3, [r0, #16]
 800cc6e:	690c      	ldr	r4, [r1, #16]
 800cc70:	42a3      	cmp	r3, r4
 800cc72:	4680      	mov	r8, r0
 800cc74:	f2c0 8082 	blt.w	800cd7c <quorem+0x114>
 800cc78:	3c01      	subs	r4, #1
 800cc7a:	f101 0714 	add.w	r7, r1, #20
 800cc7e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cc82:	f100 0614 	add.w	r6, r0, #20
 800cc86:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cc8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cc8e:	eb06 030c 	add.w	r3, r6, ip
 800cc92:	3501      	adds	r5, #1
 800cc94:	eb07 090c 	add.w	r9, r7, ip
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	fbb0 f5f5 	udiv	r5, r0, r5
 800cc9e:	b395      	cbz	r5, 800cd06 <quorem+0x9e>
 800cca0:	f04f 0a00 	mov.w	sl, #0
 800cca4:	4638      	mov	r0, r7
 800cca6:	46b6      	mov	lr, r6
 800cca8:	46d3      	mov	fp, sl
 800ccaa:	f850 2b04 	ldr.w	r2, [r0], #4
 800ccae:	b293      	uxth	r3, r2
 800ccb0:	fb05 a303 	mla	r3, r5, r3, sl
 800ccb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	ebab 0303 	sub.w	r3, fp, r3
 800ccbe:	0c12      	lsrs	r2, r2, #16
 800ccc0:	f8de b000 	ldr.w	fp, [lr]
 800ccc4:	fb05 a202 	mla	r2, r5, r2, sl
 800ccc8:	fa13 f38b 	uxtah	r3, r3, fp
 800cccc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ccd0:	fa1f fb82 	uxth.w	fp, r2
 800ccd4:	f8de 2000 	ldr.w	r2, [lr]
 800ccd8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ccdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cce6:	4581      	cmp	r9, r0
 800cce8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ccec:	f84e 3b04 	str.w	r3, [lr], #4
 800ccf0:	d2db      	bcs.n	800ccaa <quorem+0x42>
 800ccf2:	f856 300c 	ldr.w	r3, [r6, ip]
 800ccf6:	b933      	cbnz	r3, 800cd06 <quorem+0x9e>
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	3b04      	subs	r3, #4
 800ccfc:	429e      	cmp	r6, r3
 800ccfe:	461a      	mov	r2, r3
 800cd00:	d330      	bcc.n	800cd64 <quorem+0xfc>
 800cd02:	f8c8 4010 	str.w	r4, [r8, #16]
 800cd06:	4640      	mov	r0, r8
 800cd08:	f001 fb96 	bl	800e438 <__mcmp>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	db25      	blt.n	800cd5c <quorem+0xf4>
 800cd10:	3501      	adds	r5, #1
 800cd12:	4630      	mov	r0, r6
 800cd14:	f04f 0c00 	mov.w	ip, #0
 800cd18:	f857 2b04 	ldr.w	r2, [r7], #4
 800cd1c:	f8d0 e000 	ldr.w	lr, [r0]
 800cd20:	b293      	uxth	r3, r2
 800cd22:	ebac 0303 	sub.w	r3, ip, r3
 800cd26:	0c12      	lsrs	r2, r2, #16
 800cd28:	fa13 f38e 	uxtah	r3, r3, lr
 800cd2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd3a:	45b9      	cmp	r9, r7
 800cd3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd40:	f840 3b04 	str.w	r3, [r0], #4
 800cd44:	d2e8      	bcs.n	800cd18 <quorem+0xb0>
 800cd46:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cd4a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cd4e:	b92a      	cbnz	r2, 800cd5c <quorem+0xf4>
 800cd50:	3b04      	subs	r3, #4
 800cd52:	429e      	cmp	r6, r3
 800cd54:	461a      	mov	r2, r3
 800cd56:	d30b      	bcc.n	800cd70 <quorem+0x108>
 800cd58:	f8c8 4010 	str.w	r4, [r8, #16]
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	b003      	add	sp, #12
 800cd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd64:	6812      	ldr	r2, [r2, #0]
 800cd66:	3b04      	subs	r3, #4
 800cd68:	2a00      	cmp	r2, #0
 800cd6a:	d1ca      	bne.n	800cd02 <quorem+0x9a>
 800cd6c:	3c01      	subs	r4, #1
 800cd6e:	e7c5      	b.n	800ccfc <quorem+0x94>
 800cd70:	6812      	ldr	r2, [r2, #0]
 800cd72:	3b04      	subs	r3, #4
 800cd74:	2a00      	cmp	r2, #0
 800cd76:	d1ef      	bne.n	800cd58 <quorem+0xf0>
 800cd78:	3c01      	subs	r4, #1
 800cd7a:	e7ea      	b.n	800cd52 <quorem+0xea>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	e7ee      	b.n	800cd5e <quorem+0xf6>

0800cd80 <_dtoa_r>:
 800cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	ec57 6b10 	vmov	r6, r7, d0
 800cd88:	b097      	sub	sp, #92	; 0x5c
 800cd8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd8c:	9106      	str	r1, [sp, #24]
 800cd8e:	4604      	mov	r4, r0
 800cd90:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd92:	9312      	str	r3, [sp, #72]	; 0x48
 800cd94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd98:	e9cd 6700 	strd	r6, r7, [sp]
 800cd9c:	b93d      	cbnz	r5, 800cdae <_dtoa_r+0x2e>
 800cd9e:	2010      	movs	r0, #16
 800cda0:	f001 f8dc 	bl	800df5c <malloc>
 800cda4:	6260      	str	r0, [r4, #36]	; 0x24
 800cda6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdaa:	6005      	str	r5, [r0, #0]
 800cdac:	60c5      	str	r5, [r0, #12]
 800cdae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdb0:	6819      	ldr	r1, [r3, #0]
 800cdb2:	b151      	cbz	r1, 800cdca <_dtoa_r+0x4a>
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	604a      	str	r2, [r1, #4]
 800cdb8:	2301      	movs	r3, #1
 800cdba:	4093      	lsls	r3, r2
 800cdbc:	608b      	str	r3, [r1, #8]
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f001 f91a 	bl	800dff8 <_Bfree>
 800cdc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	1e3b      	subs	r3, r7, #0
 800cdcc:	bfbb      	ittet	lt
 800cdce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cdd2:	9301      	strlt	r3, [sp, #4]
 800cdd4:	2300      	movge	r3, #0
 800cdd6:	2201      	movlt	r2, #1
 800cdd8:	bfac      	ite	ge
 800cdda:	f8c8 3000 	strge.w	r3, [r8]
 800cdde:	f8c8 2000 	strlt.w	r2, [r8]
 800cde2:	4baf      	ldr	r3, [pc, #700]	; (800d0a0 <_dtoa_r+0x320>)
 800cde4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cde8:	ea33 0308 	bics.w	r3, r3, r8
 800cdec:	d114      	bne.n	800ce18 <_dtoa_r+0x98>
 800cdee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	9b00      	ldr	r3, [sp, #0]
 800cdf8:	b923      	cbnz	r3, 800ce04 <_dtoa_r+0x84>
 800cdfa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	f000 8542 	beq.w	800d888 <_dtoa_r+0xb08>
 800ce04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d0b4 <_dtoa_r+0x334>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 8544 	beq.w	800d898 <_dtoa_r+0xb18>
 800ce10:	f10b 0303 	add.w	r3, fp, #3
 800ce14:	f000 bd3e 	b.w	800d894 <_dtoa_r+0xb14>
 800ce18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce28:	4681      	mov	r9, r0
 800ce2a:	b168      	cbz	r0, 800ce48 <_dtoa_r+0xc8>
 800ce2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce2e:	2301      	movs	r3, #1
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 8524 	beq.w	800d882 <_dtoa_r+0xb02>
 800ce3a:	4b9a      	ldr	r3, [pc, #616]	; (800d0a4 <_dtoa_r+0x324>)
 800ce3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce3e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	f000 bd28 	b.w	800d898 <_dtoa_r+0xb18>
 800ce48:	aa14      	add	r2, sp, #80	; 0x50
 800ce4a:	a915      	add	r1, sp, #84	; 0x54
 800ce4c:	ec47 6b10 	vmov	d0, r6, r7
 800ce50:	4620      	mov	r0, r4
 800ce52:	f001 fbdf 	bl	800e614 <__d2b>
 800ce56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ce5a:	9004      	str	r0, [sp, #16]
 800ce5c:	2d00      	cmp	r5, #0
 800ce5e:	d07c      	beq.n	800cf5a <_dtoa_r+0x1da>
 800ce60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ce68:	46b2      	mov	sl, r6
 800ce6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ce6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ce76:	2200      	movs	r2, #0
 800ce78:	4b8b      	ldr	r3, [pc, #556]	; (800d0a8 <_dtoa_r+0x328>)
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	4659      	mov	r1, fp
 800ce7e:	f7f3 fa03 	bl	8000288 <__aeabi_dsub>
 800ce82:	a381      	add	r3, pc, #516	; (adr r3, 800d088 <_dtoa_r+0x308>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f7f3 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ce8c:	a380      	add	r3, pc, #512	; (adr r3, 800d090 <_dtoa_r+0x310>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	f7f3 f9fb 	bl	800028c <__adddf3>
 800ce96:	4606      	mov	r6, r0
 800ce98:	4628      	mov	r0, r5
 800ce9a:	460f      	mov	r7, r1
 800ce9c:	f7f3 fb42 	bl	8000524 <__aeabi_i2d>
 800cea0:	a37d      	add	r3, pc, #500	; (adr r3, 800d098 <_dtoa_r+0x318>)
 800cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea6:	f7f3 fba7 	bl	80005f8 <__aeabi_dmul>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	4630      	mov	r0, r6
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	f7f3 f9eb 	bl	800028c <__adddf3>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	460f      	mov	r7, r1
 800ceba:	f7f3 fe4d 	bl	8000b58 <__aeabi_d2iz>
 800cebe:	2200      	movs	r2, #0
 800cec0:	4682      	mov	sl, r0
 800cec2:	2300      	movs	r3, #0
 800cec4:	4630      	mov	r0, r6
 800cec6:	4639      	mov	r1, r7
 800cec8:	f7f3 fe08 	bl	8000adc <__aeabi_dcmplt>
 800cecc:	b148      	cbz	r0, 800cee2 <_dtoa_r+0x162>
 800cece:	4650      	mov	r0, sl
 800ced0:	f7f3 fb28 	bl	8000524 <__aeabi_i2d>
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	f7f3 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cedc:	b908      	cbnz	r0, 800cee2 <_dtoa_r+0x162>
 800cede:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cee2:	f1ba 0f16 	cmp.w	sl, #22
 800cee6:	d859      	bhi.n	800cf9c <_dtoa_r+0x21c>
 800cee8:	4970      	ldr	r1, [pc, #448]	; (800d0ac <_dtoa_r+0x32c>)
 800ceea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ceee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef6:	f7f3 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d050      	beq.n	800cfa0 <_dtoa_r+0x220>
 800cefe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf02:	2300      	movs	r3, #0
 800cf04:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf08:	1b5d      	subs	r5, r3, r5
 800cf0a:	f1b5 0801 	subs.w	r8, r5, #1
 800cf0e:	bf49      	itett	mi
 800cf10:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf14:	2300      	movpl	r3, #0
 800cf16:	9305      	strmi	r3, [sp, #20]
 800cf18:	f04f 0800 	movmi.w	r8, #0
 800cf1c:	bf58      	it	pl
 800cf1e:	9305      	strpl	r3, [sp, #20]
 800cf20:	f1ba 0f00 	cmp.w	sl, #0
 800cf24:	db3e      	blt.n	800cfa4 <_dtoa_r+0x224>
 800cf26:	2300      	movs	r3, #0
 800cf28:	44d0      	add	r8, sl
 800cf2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	9b06      	ldr	r3, [sp, #24]
 800cf32:	2b09      	cmp	r3, #9
 800cf34:	f200 8090 	bhi.w	800d058 <_dtoa_r+0x2d8>
 800cf38:	2b05      	cmp	r3, #5
 800cf3a:	bfc4      	itt	gt
 800cf3c:	3b04      	subgt	r3, #4
 800cf3e:	9306      	strgt	r3, [sp, #24]
 800cf40:	9b06      	ldr	r3, [sp, #24]
 800cf42:	f1a3 0302 	sub.w	r3, r3, #2
 800cf46:	bfcc      	ite	gt
 800cf48:	2500      	movgt	r5, #0
 800cf4a:	2501      	movle	r5, #1
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	f200 808f 	bhi.w	800d070 <_dtoa_r+0x2f0>
 800cf52:	e8df f003 	tbb	[pc, r3]
 800cf56:	7f7d      	.short	0x7f7d
 800cf58:	7131      	.short	0x7131
 800cf5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cf5e:	441d      	add	r5, r3
 800cf60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cf64:	2820      	cmp	r0, #32
 800cf66:	dd13      	ble.n	800cf90 <_dtoa_r+0x210>
 800cf68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cf6c:	9b00      	ldr	r3, [sp, #0]
 800cf6e:	fa08 f800 	lsl.w	r8, r8, r0
 800cf72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cf76:	fa23 f000 	lsr.w	r0, r3, r0
 800cf7a:	ea48 0000 	orr.w	r0, r8, r0
 800cf7e:	f7f3 fac1 	bl	8000504 <__aeabi_ui2d>
 800cf82:	2301      	movs	r3, #1
 800cf84:	4682      	mov	sl, r0
 800cf86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cf8a:	3d01      	subs	r5, #1
 800cf8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf8e:	e772      	b.n	800ce76 <_dtoa_r+0xf6>
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	f1c0 0020 	rsb	r0, r0, #32
 800cf96:	fa03 f000 	lsl.w	r0, r3, r0
 800cf9a:	e7f0      	b.n	800cf7e <_dtoa_r+0x1fe>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e7b1      	b.n	800cf04 <_dtoa_r+0x184>
 800cfa0:	900f      	str	r0, [sp, #60]	; 0x3c
 800cfa2:	e7b0      	b.n	800cf06 <_dtoa_r+0x186>
 800cfa4:	9b05      	ldr	r3, [sp, #20]
 800cfa6:	eba3 030a 	sub.w	r3, r3, sl
 800cfaa:	9305      	str	r3, [sp, #20]
 800cfac:	f1ca 0300 	rsb	r3, sl, #0
 800cfb0:	9307      	str	r3, [sp, #28]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfb6:	e7bb      	b.n	800cf30 <_dtoa_r+0x1b0>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	930a      	str	r3, [sp, #40]	; 0x28
 800cfbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dd59      	ble.n	800d076 <_dtoa_r+0x2f6>
 800cfc2:	9302      	str	r3, [sp, #8]
 800cfc4:	4699      	mov	r9, r3
 800cfc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfc8:	2200      	movs	r2, #0
 800cfca:	6072      	str	r2, [r6, #4]
 800cfcc:	2204      	movs	r2, #4
 800cfce:	f102 0014 	add.w	r0, r2, #20
 800cfd2:	4298      	cmp	r0, r3
 800cfd4:	6871      	ldr	r1, [r6, #4]
 800cfd6:	d953      	bls.n	800d080 <_dtoa_r+0x300>
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 ffd9 	bl	800df90 <_Balloc>
 800cfde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfe0:	6030      	str	r0, [r6, #0]
 800cfe2:	f1b9 0f0e 	cmp.w	r9, #14
 800cfe6:	f8d3 b000 	ldr.w	fp, [r3]
 800cfea:	f200 80e6 	bhi.w	800d1ba <_dtoa_r+0x43a>
 800cfee:	2d00      	cmp	r5, #0
 800cff0:	f000 80e3 	beq.w	800d1ba <_dtoa_r+0x43a>
 800cff4:	ed9d 7b00 	vldr	d7, [sp]
 800cff8:	f1ba 0f00 	cmp.w	sl, #0
 800cffc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d000:	dd74      	ble.n	800d0ec <_dtoa_r+0x36c>
 800d002:	4a2a      	ldr	r2, [pc, #168]	; (800d0ac <_dtoa_r+0x32c>)
 800d004:	f00a 030f 	and.w	r3, sl, #15
 800d008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d00c:	ed93 7b00 	vldr	d7, [r3]
 800d010:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d014:	06f0      	lsls	r0, r6, #27
 800d016:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d01a:	d565      	bpl.n	800d0e8 <_dtoa_r+0x368>
 800d01c:	4b24      	ldr	r3, [pc, #144]	; (800d0b0 <_dtoa_r+0x330>)
 800d01e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d022:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d026:	f7f3 fc11 	bl	800084c <__aeabi_ddiv>
 800d02a:	e9cd 0100 	strd	r0, r1, [sp]
 800d02e:	f006 060f 	and.w	r6, r6, #15
 800d032:	2503      	movs	r5, #3
 800d034:	4f1e      	ldr	r7, [pc, #120]	; (800d0b0 <_dtoa_r+0x330>)
 800d036:	e04c      	b.n	800d0d2 <_dtoa_r+0x352>
 800d038:	2301      	movs	r3, #1
 800d03a:	930a      	str	r3, [sp, #40]	; 0x28
 800d03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d03e:	4453      	add	r3, sl
 800d040:	f103 0901 	add.w	r9, r3, #1
 800d044:	9302      	str	r3, [sp, #8]
 800d046:	464b      	mov	r3, r9
 800d048:	2b01      	cmp	r3, #1
 800d04a:	bfb8      	it	lt
 800d04c:	2301      	movlt	r3, #1
 800d04e:	e7ba      	b.n	800cfc6 <_dtoa_r+0x246>
 800d050:	2300      	movs	r3, #0
 800d052:	e7b2      	b.n	800cfba <_dtoa_r+0x23a>
 800d054:	2300      	movs	r3, #0
 800d056:	e7f0      	b.n	800d03a <_dtoa_r+0x2ba>
 800d058:	2501      	movs	r5, #1
 800d05a:	2300      	movs	r3, #0
 800d05c:	9306      	str	r3, [sp, #24]
 800d05e:	950a      	str	r5, [sp, #40]	; 0x28
 800d060:	f04f 33ff 	mov.w	r3, #4294967295
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	4699      	mov	r9, r3
 800d068:	2200      	movs	r2, #0
 800d06a:	2312      	movs	r3, #18
 800d06c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d06e:	e7aa      	b.n	800cfc6 <_dtoa_r+0x246>
 800d070:	2301      	movs	r3, #1
 800d072:	930a      	str	r3, [sp, #40]	; 0x28
 800d074:	e7f4      	b.n	800d060 <_dtoa_r+0x2e0>
 800d076:	2301      	movs	r3, #1
 800d078:	9302      	str	r3, [sp, #8]
 800d07a:	4699      	mov	r9, r3
 800d07c:	461a      	mov	r2, r3
 800d07e:	e7f5      	b.n	800d06c <_dtoa_r+0x2ec>
 800d080:	3101      	adds	r1, #1
 800d082:	6071      	str	r1, [r6, #4]
 800d084:	0052      	lsls	r2, r2, #1
 800d086:	e7a2      	b.n	800cfce <_dtoa_r+0x24e>
 800d088:	636f4361 	.word	0x636f4361
 800d08c:	3fd287a7 	.word	0x3fd287a7
 800d090:	8b60c8b3 	.word	0x8b60c8b3
 800d094:	3fc68a28 	.word	0x3fc68a28
 800d098:	509f79fb 	.word	0x509f79fb
 800d09c:	3fd34413 	.word	0x3fd34413
 800d0a0:	7ff00000 	.word	0x7ff00000
 800d0a4:	08010131 	.word	0x08010131
 800d0a8:	3ff80000 	.word	0x3ff80000
 800d0ac:	080101e8 	.word	0x080101e8
 800d0b0:	080101c0 	.word	0x080101c0
 800d0b4:	080101b1 	.word	0x080101b1
 800d0b8:	07f1      	lsls	r1, r6, #31
 800d0ba:	d508      	bpl.n	800d0ce <_dtoa_r+0x34e>
 800d0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0c4:	f7f3 fa98 	bl	80005f8 <__aeabi_dmul>
 800d0c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	1076      	asrs	r6, r6, #1
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	2e00      	cmp	r6, #0
 800d0d4:	d1f0      	bne.n	800d0b8 <_dtoa_r+0x338>
 800d0d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0de:	f7f3 fbb5 	bl	800084c <__aeabi_ddiv>
 800d0e2:	e9cd 0100 	strd	r0, r1, [sp]
 800d0e6:	e01a      	b.n	800d11e <_dtoa_r+0x39e>
 800d0e8:	2502      	movs	r5, #2
 800d0ea:	e7a3      	b.n	800d034 <_dtoa_r+0x2b4>
 800d0ec:	f000 80a0 	beq.w	800d230 <_dtoa_r+0x4b0>
 800d0f0:	f1ca 0600 	rsb	r6, sl, #0
 800d0f4:	4b9f      	ldr	r3, [pc, #636]	; (800d374 <_dtoa_r+0x5f4>)
 800d0f6:	4fa0      	ldr	r7, [pc, #640]	; (800d378 <_dtoa_r+0x5f8>)
 800d0f8:	f006 020f 	and.w	r2, r6, #15
 800d0fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d108:	f7f3 fa76 	bl	80005f8 <__aeabi_dmul>
 800d10c:	e9cd 0100 	strd	r0, r1, [sp]
 800d110:	1136      	asrs	r6, r6, #4
 800d112:	2300      	movs	r3, #0
 800d114:	2502      	movs	r5, #2
 800d116:	2e00      	cmp	r6, #0
 800d118:	d17f      	bne.n	800d21a <_dtoa_r+0x49a>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1e1      	bne.n	800d0e2 <_dtoa_r+0x362>
 800d11e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 8087 	beq.w	800d234 <_dtoa_r+0x4b4>
 800d126:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d12a:	2200      	movs	r2, #0
 800d12c:	4b93      	ldr	r3, [pc, #588]	; (800d37c <_dtoa_r+0x5fc>)
 800d12e:	4630      	mov	r0, r6
 800d130:	4639      	mov	r1, r7
 800d132:	f7f3 fcd3 	bl	8000adc <__aeabi_dcmplt>
 800d136:	2800      	cmp	r0, #0
 800d138:	d07c      	beq.n	800d234 <_dtoa_r+0x4b4>
 800d13a:	f1b9 0f00 	cmp.w	r9, #0
 800d13e:	d079      	beq.n	800d234 <_dtoa_r+0x4b4>
 800d140:	9b02      	ldr	r3, [sp, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	dd35      	ble.n	800d1b2 <_dtoa_r+0x432>
 800d146:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d14a:	9308      	str	r3, [sp, #32]
 800d14c:	4639      	mov	r1, r7
 800d14e:	2200      	movs	r2, #0
 800d150:	4b8b      	ldr	r3, [pc, #556]	; (800d380 <_dtoa_r+0x600>)
 800d152:	4630      	mov	r0, r6
 800d154:	f7f3 fa50 	bl	80005f8 <__aeabi_dmul>
 800d158:	e9cd 0100 	strd	r0, r1, [sp]
 800d15c:	9f02      	ldr	r7, [sp, #8]
 800d15e:	3501      	adds	r5, #1
 800d160:	4628      	mov	r0, r5
 800d162:	f7f3 f9df 	bl	8000524 <__aeabi_i2d>
 800d166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d16a:	f7f3 fa45 	bl	80005f8 <__aeabi_dmul>
 800d16e:	2200      	movs	r2, #0
 800d170:	4b84      	ldr	r3, [pc, #528]	; (800d384 <_dtoa_r+0x604>)
 800d172:	f7f3 f88b 	bl	800028c <__adddf3>
 800d176:	4605      	mov	r5, r0
 800d178:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d17c:	2f00      	cmp	r7, #0
 800d17e:	d15d      	bne.n	800d23c <_dtoa_r+0x4bc>
 800d180:	2200      	movs	r2, #0
 800d182:	4b81      	ldr	r3, [pc, #516]	; (800d388 <_dtoa_r+0x608>)
 800d184:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d188:	f7f3 f87e 	bl	8000288 <__aeabi_dsub>
 800d18c:	462a      	mov	r2, r5
 800d18e:	4633      	mov	r3, r6
 800d190:	e9cd 0100 	strd	r0, r1, [sp]
 800d194:	f7f3 fcc0 	bl	8000b18 <__aeabi_dcmpgt>
 800d198:	2800      	cmp	r0, #0
 800d19a:	f040 8288 	bne.w	800d6ae <_dtoa_r+0x92e>
 800d19e:	462a      	mov	r2, r5
 800d1a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d1a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1a8:	f7f3 fc98 	bl	8000adc <__aeabi_dcmplt>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	f040 827c 	bne.w	800d6aa <_dtoa_r+0x92a>
 800d1b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1b6:	e9cd 2300 	strd	r2, r3, [sp]
 800d1ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f2c0 8150 	blt.w	800d462 <_dtoa_r+0x6e2>
 800d1c2:	f1ba 0f0e 	cmp.w	sl, #14
 800d1c6:	f300 814c 	bgt.w	800d462 <_dtoa_r+0x6e2>
 800d1ca:	4b6a      	ldr	r3, [pc, #424]	; (800d374 <_dtoa_r+0x5f4>)
 800d1cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1d0:	ed93 7b00 	vldr	d7, [r3]
 800d1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1dc:	f280 80d8 	bge.w	800d390 <_dtoa_r+0x610>
 800d1e0:	f1b9 0f00 	cmp.w	r9, #0
 800d1e4:	f300 80d4 	bgt.w	800d390 <_dtoa_r+0x610>
 800d1e8:	f040 825e 	bne.w	800d6a8 <_dtoa_r+0x928>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	4b66      	ldr	r3, [pc, #408]	; (800d388 <_dtoa_r+0x608>)
 800d1f0:	ec51 0b17 	vmov	r0, r1, d7
 800d1f4:	f7f3 fa00 	bl	80005f8 <__aeabi_dmul>
 800d1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1fc:	f7f3 fc82 	bl	8000b04 <__aeabi_dcmpge>
 800d200:	464f      	mov	r7, r9
 800d202:	464e      	mov	r6, r9
 800d204:	2800      	cmp	r0, #0
 800d206:	f040 8234 	bne.w	800d672 <_dtoa_r+0x8f2>
 800d20a:	2331      	movs	r3, #49	; 0x31
 800d20c:	f10b 0501 	add.w	r5, fp, #1
 800d210:	f88b 3000 	strb.w	r3, [fp]
 800d214:	f10a 0a01 	add.w	sl, sl, #1
 800d218:	e22f      	b.n	800d67a <_dtoa_r+0x8fa>
 800d21a:	07f2      	lsls	r2, r6, #31
 800d21c:	d505      	bpl.n	800d22a <_dtoa_r+0x4aa>
 800d21e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d222:	f7f3 f9e9 	bl	80005f8 <__aeabi_dmul>
 800d226:	3501      	adds	r5, #1
 800d228:	2301      	movs	r3, #1
 800d22a:	1076      	asrs	r6, r6, #1
 800d22c:	3708      	adds	r7, #8
 800d22e:	e772      	b.n	800d116 <_dtoa_r+0x396>
 800d230:	2502      	movs	r5, #2
 800d232:	e774      	b.n	800d11e <_dtoa_r+0x39e>
 800d234:	f8cd a020 	str.w	sl, [sp, #32]
 800d238:	464f      	mov	r7, r9
 800d23a:	e791      	b.n	800d160 <_dtoa_r+0x3e0>
 800d23c:	4b4d      	ldr	r3, [pc, #308]	; (800d374 <_dtoa_r+0x5f4>)
 800d23e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d242:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d047      	beq.n	800d2dc <_dtoa_r+0x55c>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	2000      	movs	r0, #0
 800d252:	494e      	ldr	r1, [pc, #312]	; (800d38c <_dtoa_r+0x60c>)
 800d254:	f7f3 fafa 	bl	800084c <__aeabi_ddiv>
 800d258:	462a      	mov	r2, r5
 800d25a:	4633      	mov	r3, r6
 800d25c:	f7f3 f814 	bl	8000288 <__aeabi_dsub>
 800d260:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d264:	465d      	mov	r5, fp
 800d266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d26a:	f7f3 fc75 	bl	8000b58 <__aeabi_d2iz>
 800d26e:	4606      	mov	r6, r0
 800d270:	f7f3 f958 	bl	8000524 <__aeabi_i2d>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d27c:	f7f3 f804 	bl	8000288 <__aeabi_dsub>
 800d280:	3630      	adds	r6, #48	; 0x30
 800d282:	f805 6b01 	strb.w	r6, [r5], #1
 800d286:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d28a:	e9cd 0100 	strd	r0, r1, [sp]
 800d28e:	f7f3 fc25 	bl	8000adc <__aeabi_dcmplt>
 800d292:	2800      	cmp	r0, #0
 800d294:	d163      	bne.n	800d35e <_dtoa_r+0x5de>
 800d296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d29a:	2000      	movs	r0, #0
 800d29c:	4937      	ldr	r1, [pc, #220]	; (800d37c <_dtoa_r+0x5fc>)
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d2a6:	f7f3 fc19 	bl	8000adc <__aeabi_dcmplt>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	f040 80b7 	bne.w	800d41e <_dtoa_r+0x69e>
 800d2b0:	eba5 030b 	sub.w	r3, r5, fp
 800d2b4:	429f      	cmp	r7, r3
 800d2b6:	f77f af7c 	ble.w	800d1b2 <_dtoa_r+0x432>
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	4b30      	ldr	r3, [pc, #192]	; (800d380 <_dtoa_r+0x600>)
 800d2be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2c2:	f7f3 f999 	bl	80005f8 <__aeabi_dmul>
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2cc:	4b2c      	ldr	r3, [pc, #176]	; (800d380 <_dtoa_r+0x600>)
 800d2ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2d2:	f7f3 f991 	bl	80005f8 <__aeabi_dmul>
 800d2d6:	e9cd 0100 	strd	r0, r1, [sp]
 800d2da:	e7c4      	b.n	800d266 <_dtoa_r+0x4e6>
 800d2dc:	462a      	mov	r2, r5
 800d2de:	4633      	mov	r3, r6
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2e8:	eb0b 0507 	add.w	r5, fp, r7
 800d2ec:	465e      	mov	r6, fp
 800d2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2f2:	f7f3 fc31 	bl	8000b58 <__aeabi_d2iz>
 800d2f6:	4607      	mov	r7, r0
 800d2f8:	f7f3 f914 	bl	8000524 <__aeabi_i2d>
 800d2fc:	3730      	adds	r7, #48	; 0x30
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d306:	f7f2 ffbf 	bl	8000288 <__aeabi_dsub>
 800d30a:	f806 7b01 	strb.w	r7, [r6], #1
 800d30e:	42ae      	cmp	r6, r5
 800d310:	e9cd 0100 	strd	r0, r1, [sp]
 800d314:	f04f 0200 	mov.w	r2, #0
 800d318:	d126      	bne.n	800d368 <_dtoa_r+0x5e8>
 800d31a:	4b1c      	ldr	r3, [pc, #112]	; (800d38c <_dtoa_r+0x60c>)
 800d31c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d320:	f7f2 ffb4 	bl	800028c <__adddf3>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d32c:	f7f3 fbf4 	bl	8000b18 <__aeabi_dcmpgt>
 800d330:	2800      	cmp	r0, #0
 800d332:	d174      	bne.n	800d41e <_dtoa_r+0x69e>
 800d334:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d338:	2000      	movs	r0, #0
 800d33a:	4914      	ldr	r1, [pc, #80]	; (800d38c <_dtoa_r+0x60c>)
 800d33c:	f7f2 ffa4 	bl	8000288 <__aeabi_dsub>
 800d340:	4602      	mov	r2, r0
 800d342:	460b      	mov	r3, r1
 800d344:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d348:	f7f3 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f43f af30 	beq.w	800d1b2 <_dtoa_r+0x432>
 800d352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d356:	2b30      	cmp	r3, #48	; 0x30
 800d358:	f105 32ff 	add.w	r2, r5, #4294967295
 800d35c:	d002      	beq.n	800d364 <_dtoa_r+0x5e4>
 800d35e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d362:	e04a      	b.n	800d3fa <_dtoa_r+0x67a>
 800d364:	4615      	mov	r5, r2
 800d366:	e7f4      	b.n	800d352 <_dtoa_r+0x5d2>
 800d368:	4b05      	ldr	r3, [pc, #20]	; (800d380 <_dtoa_r+0x600>)
 800d36a:	f7f3 f945 	bl	80005f8 <__aeabi_dmul>
 800d36e:	e9cd 0100 	strd	r0, r1, [sp]
 800d372:	e7bc      	b.n	800d2ee <_dtoa_r+0x56e>
 800d374:	080101e8 	.word	0x080101e8
 800d378:	080101c0 	.word	0x080101c0
 800d37c:	3ff00000 	.word	0x3ff00000
 800d380:	40240000 	.word	0x40240000
 800d384:	401c0000 	.word	0x401c0000
 800d388:	40140000 	.word	0x40140000
 800d38c:	3fe00000 	.word	0x3fe00000
 800d390:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d394:	465d      	mov	r5, fp
 800d396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f3 fa55 	bl	800084c <__aeabi_ddiv>
 800d3a2:	f7f3 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	f7f3 f8bc 	bl	8000524 <__aeabi_i2d>
 800d3ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3b0:	f7f3 f922 	bl	80005f8 <__aeabi_dmul>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d3c0:	f7f2 ff62 	bl	8000288 <__aeabi_dsub>
 800d3c4:	f805 6b01 	strb.w	r6, [r5], #1
 800d3c8:	eba5 060b 	sub.w	r6, r5, fp
 800d3cc:	45b1      	cmp	r9, r6
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	d139      	bne.n	800d448 <_dtoa_r+0x6c8>
 800d3d4:	f7f2 ff5a 	bl	800028c <__adddf3>
 800d3d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3dc:	4606      	mov	r6, r0
 800d3de:	460f      	mov	r7, r1
 800d3e0:	f7f3 fb9a 	bl	8000b18 <__aeabi_dcmpgt>
 800d3e4:	b9c8      	cbnz	r0, 800d41a <_dtoa_r+0x69a>
 800d3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	f7f3 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3f2:	b110      	cbz	r0, 800d3fa <_dtoa_r+0x67a>
 800d3f4:	f018 0f01 	tst.w	r8, #1
 800d3f8:	d10f      	bne.n	800d41a <_dtoa_r+0x69a>
 800d3fa:	9904      	ldr	r1, [sp, #16]
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fdfb 	bl	800dff8 <_Bfree>
 800d402:	2300      	movs	r3, #0
 800d404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d406:	702b      	strb	r3, [r5, #0]
 800d408:	f10a 0301 	add.w	r3, sl, #1
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 8241 	beq.w	800d898 <_dtoa_r+0xb18>
 800d416:	601d      	str	r5, [r3, #0]
 800d418:	e23e      	b.n	800d898 <_dtoa_r+0xb18>
 800d41a:	f8cd a020 	str.w	sl, [sp, #32]
 800d41e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d422:	2a39      	cmp	r2, #57	; 0x39
 800d424:	f105 33ff 	add.w	r3, r5, #4294967295
 800d428:	d108      	bne.n	800d43c <_dtoa_r+0x6bc>
 800d42a:	459b      	cmp	fp, r3
 800d42c:	d10a      	bne.n	800d444 <_dtoa_r+0x6c4>
 800d42e:	9b08      	ldr	r3, [sp, #32]
 800d430:	3301      	adds	r3, #1
 800d432:	9308      	str	r3, [sp, #32]
 800d434:	2330      	movs	r3, #48	; 0x30
 800d436:	f88b 3000 	strb.w	r3, [fp]
 800d43a:	465b      	mov	r3, fp
 800d43c:	781a      	ldrb	r2, [r3, #0]
 800d43e:	3201      	adds	r2, #1
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	e78c      	b.n	800d35e <_dtoa_r+0x5de>
 800d444:	461d      	mov	r5, r3
 800d446:	e7ea      	b.n	800d41e <_dtoa_r+0x69e>
 800d448:	2200      	movs	r2, #0
 800d44a:	4b9b      	ldr	r3, [pc, #620]	; (800d6b8 <_dtoa_r+0x938>)
 800d44c:	f7f3 f8d4 	bl	80005f8 <__aeabi_dmul>
 800d450:	2200      	movs	r2, #0
 800d452:	2300      	movs	r3, #0
 800d454:	4606      	mov	r6, r0
 800d456:	460f      	mov	r7, r1
 800d458:	f7f3 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d09a      	beq.n	800d396 <_dtoa_r+0x616>
 800d460:	e7cb      	b.n	800d3fa <_dtoa_r+0x67a>
 800d462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d464:	2a00      	cmp	r2, #0
 800d466:	f000 808b 	beq.w	800d580 <_dtoa_r+0x800>
 800d46a:	9a06      	ldr	r2, [sp, #24]
 800d46c:	2a01      	cmp	r2, #1
 800d46e:	dc6e      	bgt.n	800d54e <_dtoa_r+0x7ce>
 800d470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d472:	2a00      	cmp	r2, #0
 800d474:	d067      	beq.n	800d546 <_dtoa_r+0x7c6>
 800d476:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d47a:	9f07      	ldr	r7, [sp, #28]
 800d47c:	9d05      	ldr	r5, [sp, #20]
 800d47e:	9a05      	ldr	r2, [sp, #20]
 800d480:	2101      	movs	r1, #1
 800d482:	441a      	add	r2, r3
 800d484:	4620      	mov	r0, r4
 800d486:	9205      	str	r2, [sp, #20]
 800d488:	4498      	add	r8, r3
 800d48a:	f000 fe93 	bl	800e1b4 <__i2b>
 800d48e:	4606      	mov	r6, r0
 800d490:	2d00      	cmp	r5, #0
 800d492:	dd0c      	ble.n	800d4ae <_dtoa_r+0x72e>
 800d494:	f1b8 0f00 	cmp.w	r8, #0
 800d498:	dd09      	ble.n	800d4ae <_dtoa_r+0x72e>
 800d49a:	4545      	cmp	r5, r8
 800d49c:	9a05      	ldr	r2, [sp, #20]
 800d49e:	462b      	mov	r3, r5
 800d4a0:	bfa8      	it	ge
 800d4a2:	4643      	movge	r3, r8
 800d4a4:	1ad2      	subs	r2, r2, r3
 800d4a6:	9205      	str	r2, [sp, #20]
 800d4a8:	1aed      	subs	r5, r5, r3
 800d4aa:	eba8 0803 	sub.w	r8, r8, r3
 800d4ae:	9b07      	ldr	r3, [sp, #28]
 800d4b0:	b1eb      	cbz	r3, 800d4ee <_dtoa_r+0x76e>
 800d4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d067      	beq.n	800d588 <_dtoa_r+0x808>
 800d4b8:	b18f      	cbz	r7, 800d4de <_dtoa_r+0x75e>
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	463a      	mov	r2, r7
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 ff18 	bl	800e2f4 <__pow5mult>
 800d4c4:	9a04      	ldr	r2, [sp, #16]
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fe7b 	bl	800e1c6 <__multiply>
 800d4d0:	9904      	ldr	r1, [sp, #16]
 800d4d2:	9008      	str	r0, [sp, #32]
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fd8f 	bl	800dff8 <_Bfree>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	9b07      	ldr	r3, [sp, #28]
 800d4e0:	1bda      	subs	r2, r3, r7
 800d4e2:	d004      	beq.n	800d4ee <_dtoa_r+0x76e>
 800d4e4:	9904      	ldr	r1, [sp, #16]
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 ff04 	bl	800e2f4 <__pow5mult>
 800d4ec:	9004      	str	r0, [sp, #16]
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 fe5f 	bl	800e1b4 <__i2b>
 800d4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 81d0 	beq.w	800d8a0 <_dtoa_r+0xb20>
 800d500:	461a      	mov	r2, r3
 800d502:	4601      	mov	r1, r0
 800d504:	4620      	mov	r0, r4
 800d506:	f000 fef5 	bl	800e2f4 <__pow5mult>
 800d50a:	9b06      	ldr	r3, [sp, #24]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	4607      	mov	r7, r0
 800d510:	dc40      	bgt.n	800d594 <_dtoa_r+0x814>
 800d512:	9b00      	ldr	r3, [sp, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d139      	bne.n	800d58c <_dtoa_r+0x80c>
 800d518:	9b01      	ldr	r3, [sp, #4]
 800d51a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d136      	bne.n	800d590 <_dtoa_r+0x810>
 800d522:	9b01      	ldr	r3, [sp, #4]
 800d524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d528:	0d1b      	lsrs	r3, r3, #20
 800d52a:	051b      	lsls	r3, r3, #20
 800d52c:	b12b      	cbz	r3, 800d53a <_dtoa_r+0x7ba>
 800d52e:	9b05      	ldr	r3, [sp, #20]
 800d530:	3301      	adds	r3, #1
 800d532:	9305      	str	r3, [sp, #20]
 800d534:	f108 0801 	add.w	r8, r8, #1
 800d538:	2301      	movs	r3, #1
 800d53a:	9307      	str	r3, [sp, #28]
 800d53c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d12a      	bne.n	800d598 <_dtoa_r+0x818>
 800d542:	2001      	movs	r0, #1
 800d544:	e030      	b.n	800d5a8 <_dtoa_r+0x828>
 800d546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d548:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d54c:	e795      	b.n	800d47a <_dtoa_r+0x6fa>
 800d54e:	9b07      	ldr	r3, [sp, #28]
 800d550:	f109 37ff 	add.w	r7, r9, #4294967295
 800d554:	42bb      	cmp	r3, r7
 800d556:	bfbf      	itttt	lt
 800d558:	9b07      	ldrlt	r3, [sp, #28]
 800d55a:	9707      	strlt	r7, [sp, #28]
 800d55c:	1afa      	sublt	r2, r7, r3
 800d55e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d560:	bfbb      	ittet	lt
 800d562:	189b      	addlt	r3, r3, r2
 800d564:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d566:	1bdf      	subge	r7, r3, r7
 800d568:	2700      	movlt	r7, #0
 800d56a:	f1b9 0f00 	cmp.w	r9, #0
 800d56e:	bfb5      	itete	lt
 800d570:	9b05      	ldrlt	r3, [sp, #20]
 800d572:	9d05      	ldrge	r5, [sp, #20]
 800d574:	eba3 0509 	sublt.w	r5, r3, r9
 800d578:	464b      	movge	r3, r9
 800d57a:	bfb8      	it	lt
 800d57c:	2300      	movlt	r3, #0
 800d57e:	e77e      	b.n	800d47e <_dtoa_r+0x6fe>
 800d580:	9f07      	ldr	r7, [sp, #28]
 800d582:	9d05      	ldr	r5, [sp, #20]
 800d584:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d586:	e783      	b.n	800d490 <_dtoa_r+0x710>
 800d588:	9a07      	ldr	r2, [sp, #28]
 800d58a:	e7ab      	b.n	800d4e4 <_dtoa_r+0x764>
 800d58c:	2300      	movs	r3, #0
 800d58e:	e7d4      	b.n	800d53a <_dtoa_r+0x7ba>
 800d590:	9b00      	ldr	r3, [sp, #0]
 800d592:	e7d2      	b.n	800d53a <_dtoa_r+0x7ba>
 800d594:	2300      	movs	r3, #0
 800d596:	9307      	str	r3, [sp, #28]
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d59e:	6918      	ldr	r0, [r3, #16]
 800d5a0:	f000 fdba 	bl	800e118 <__hi0bits>
 800d5a4:	f1c0 0020 	rsb	r0, r0, #32
 800d5a8:	4440      	add	r0, r8
 800d5aa:	f010 001f 	ands.w	r0, r0, #31
 800d5ae:	d047      	beq.n	800d640 <_dtoa_r+0x8c0>
 800d5b0:	f1c0 0320 	rsb	r3, r0, #32
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	dd3b      	ble.n	800d630 <_dtoa_r+0x8b0>
 800d5b8:	9b05      	ldr	r3, [sp, #20]
 800d5ba:	f1c0 001c 	rsb	r0, r0, #28
 800d5be:	4403      	add	r3, r0
 800d5c0:	9305      	str	r3, [sp, #20]
 800d5c2:	4405      	add	r5, r0
 800d5c4:	4480      	add	r8, r0
 800d5c6:	9b05      	ldr	r3, [sp, #20]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dd05      	ble.n	800d5d8 <_dtoa_r+0x858>
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	9904      	ldr	r1, [sp, #16]
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 fedd 	bl	800e390 <__lshift>
 800d5d6:	9004      	str	r0, [sp, #16]
 800d5d8:	f1b8 0f00 	cmp.w	r8, #0
 800d5dc:	dd05      	ble.n	800d5ea <_dtoa_r+0x86a>
 800d5de:	4639      	mov	r1, r7
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f000 fed4 	bl	800e390 <__lshift>
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5ec:	b353      	cbz	r3, 800d644 <_dtoa_r+0x8c4>
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	9804      	ldr	r0, [sp, #16]
 800d5f2:	f000 ff21 	bl	800e438 <__mcmp>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	da24      	bge.n	800d644 <_dtoa_r+0x8c4>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	220a      	movs	r2, #10
 800d5fe:	9904      	ldr	r1, [sp, #16]
 800d600:	4620      	mov	r0, r4
 800d602:	f000 fd10 	bl	800e026 <__multadd>
 800d606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d608:	9004      	str	r0, [sp, #16]
 800d60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f000 814d 	beq.w	800d8ae <_dtoa_r+0xb2e>
 800d614:	2300      	movs	r3, #0
 800d616:	4631      	mov	r1, r6
 800d618:	220a      	movs	r2, #10
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 fd03 	bl	800e026 <__multadd>
 800d620:	9b02      	ldr	r3, [sp, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	4606      	mov	r6, r0
 800d626:	dc4f      	bgt.n	800d6c8 <_dtoa_r+0x948>
 800d628:	9b06      	ldr	r3, [sp, #24]
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	dd4c      	ble.n	800d6c8 <_dtoa_r+0x948>
 800d62e:	e011      	b.n	800d654 <_dtoa_r+0x8d4>
 800d630:	d0c9      	beq.n	800d5c6 <_dtoa_r+0x846>
 800d632:	9a05      	ldr	r2, [sp, #20]
 800d634:	331c      	adds	r3, #28
 800d636:	441a      	add	r2, r3
 800d638:	9205      	str	r2, [sp, #20]
 800d63a:	441d      	add	r5, r3
 800d63c:	4498      	add	r8, r3
 800d63e:	e7c2      	b.n	800d5c6 <_dtoa_r+0x846>
 800d640:	4603      	mov	r3, r0
 800d642:	e7f6      	b.n	800d632 <_dtoa_r+0x8b2>
 800d644:	f1b9 0f00 	cmp.w	r9, #0
 800d648:	dc38      	bgt.n	800d6bc <_dtoa_r+0x93c>
 800d64a:	9b06      	ldr	r3, [sp, #24]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	dd35      	ble.n	800d6bc <_dtoa_r+0x93c>
 800d650:	f8cd 9008 	str.w	r9, [sp, #8]
 800d654:	9b02      	ldr	r3, [sp, #8]
 800d656:	b963      	cbnz	r3, 800d672 <_dtoa_r+0x8f2>
 800d658:	4639      	mov	r1, r7
 800d65a:	2205      	movs	r2, #5
 800d65c:	4620      	mov	r0, r4
 800d65e:	f000 fce2 	bl	800e026 <__multadd>
 800d662:	4601      	mov	r1, r0
 800d664:	4607      	mov	r7, r0
 800d666:	9804      	ldr	r0, [sp, #16]
 800d668:	f000 fee6 	bl	800e438 <__mcmp>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f73f adcc 	bgt.w	800d20a <_dtoa_r+0x48a>
 800d672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d674:	465d      	mov	r5, fp
 800d676:	ea6f 0a03 	mvn.w	sl, r3
 800d67a:	f04f 0900 	mov.w	r9, #0
 800d67e:	4639      	mov	r1, r7
 800d680:	4620      	mov	r0, r4
 800d682:	f000 fcb9 	bl	800dff8 <_Bfree>
 800d686:	2e00      	cmp	r6, #0
 800d688:	f43f aeb7 	beq.w	800d3fa <_dtoa_r+0x67a>
 800d68c:	f1b9 0f00 	cmp.w	r9, #0
 800d690:	d005      	beq.n	800d69e <_dtoa_r+0x91e>
 800d692:	45b1      	cmp	r9, r6
 800d694:	d003      	beq.n	800d69e <_dtoa_r+0x91e>
 800d696:	4649      	mov	r1, r9
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 fcad 	bl	800dff8 <_Bfree>
 800d69e:	4631      	mov	r1, r6
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 fca9 	bl	800dff8 <_Bfree>
 800d6a6:	e6a8      	b.n	800d3fa <_dtoa_r+0x67a>
 800d6a8:	2700      	movs	r7, #0
 800d6aa:	463e      	mov	r6, r7
 800d6ac:	e7e1      	b.n	800d672 <_dtoa_r+0x8f2>
 800d6ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d6b2:	463e      	mov	r6, r7
 800d6b4:	e5a9      	b.n	800d20a <_dtoa_r+0x48a>
 800d6b6:	bf00      	nop
 800d6b8:	40240000 	.word	0x40240000
 800d6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6be:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f000 80fa 	beq.w	800d8bc <_dtoa_r+0xb3c>
 800d6c8:	2d00      	cmp	r5, #0
 800d6ca:	dd05      	ble.n	800d6d8 <_dtoa_r+0x958>
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	462a      	mov	r2, r5
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fe5d 	bl	800e390 <__lshift>
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	9b07      	ldr	r3, [sp, #28]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d04c      	beq.n	800d778 <_dtoa_r+0x9f8>
 800d6de:	6871      	ldr	r1, [r6, #4]
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 fc55 	bl	800df90 <_Balloc>
 800d6e6:	6932      	ldr	r2, [r6, #16]
 800d6e8:	3202      	adds	r2, #2
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	0092      	lsls	r2, r2, #2
 800d6ee:	f106 010c 	add.w	r1, r6, #12
 800d6f2:	300c      	adds	r0, #12
 800d6f4:	f7fd ffb2 	bl	800b65c <memcpy>
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f000 fe47 	bl	800e390 <__lshift>
 800d702:	9b00      	ldr	r3, [sp, #0]
 800d704:	f8cd b014 	str.w	fp, [sp, #20]
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	46b1      	mov	r9, r6
 800d70e:	9307      	str	r3, [sp, #28]
 800d710:	4606      	mov	r6, r0
 800d712:	4639      	mov	r1, r7
 800d714:	9804      	ldr	r0, [sp, #16]
 800d716:	f7ff faa7 	bl	800cc68 <quorem>
 800d71a:	4649      	mov	r1, r9
 800d71c:	4605      	mov	r5, r0
 800d71e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d722:	9804      	ldr	r0, [sp, #16]
 800d724:	f000 fe88 	bl	800e438 <__mcmp>
 800d728:	4632      	mov	r2, r6
 800d72a:	9000      	str	r0, [sp, #0]
 800d72c:	4639      	mov	r1, r7
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 fe9c 	bl	800e46c <__mdiff>
 800d734:	68c3      	ldr	r3, [r0, #12]
 800d736:	4602      	mov	r2, r0
 800d738:	bb03      	cbnz	r3, 800d77c <_dtoa_r+0x9fc>
 800d73a:	4601      	mov	r1, r0
 800d73c:	9008      	str	r0, [sp, #32]
 800d73e:	9804      	ldr	r0, [sp, #16]
 800d740:	f000 fe7a 	bl	800e438 <__mcmp>
 800d744:	9a08      	ldr	r2, [sp, #32]
 800d746:	4603      	mov	r3, r0
 800d748:	4611      	mov	r1, r2
 800d74a:	4620      	mov	r0, r4
 800d74c:	9308      	str	r3, [sp, #32]
 800d74e:	f000 fc53 	bl	800dff8 <_Bfree>
 800d752:	9b08      	ldr	r3, [sp, #32]
 800d754:	b9a3      	cbnz	r3, 800d780 <_dtoa_r+0xa00>
 800d756:	9a06      	ldr	r2, [sp, #24]
 800d758:	b992      	cbnz	r2, 800d780 <_dtoa_r+0xa00>
 800d75a:	9a07      	ldr	r2, [sp, #28]
 800d75c:	b982      	cbnz	r2, 800d780 <_dtoa_r+0xa00>
 800d75e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d762:	d029      	beq.n	800d7b8 <_dtoa_r+0xa38>
 800d764:	9b00      	ldr	r3, [sp, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	dd01      	ble.n	800d76e <_dtoa_r+0x9ee>
 800d76a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d76e:	9b05      	ldr	r3, [sp, #20]
 800d770:	1c5d      	adds	r5, r3, #1
 800d772:	f883 8000 	strb.w	r8, [r3]
 800d776:	e782      	b.n	800d67e <_dtoa_r+0x8fe>
 800d778:	4630      	mov	r0, r6
 800d77a:	e7c2      	b.n	800d702 <_dtoa_r+0x982>
 800d77c:	2301      	movs	r3, #1
 800d77e:	e7e3      	b.n	800d748 <_dtoa_r+0x9c8>
 800d780:	9a00      	ldr	r2, [sp, #0]
 800d782:	2a00      	cmp	r2, #0
 800d784:	db04      	blt.n	800d790 <_dtoa_r+0xa10>
 800d786:	d125      	bne.n	800d7d4 <_dtoa_r+0xa54>
 800d788:	9a06      	ldr	r2, [sp, #24]
 800d78a:	bb1a      	cbnz	r2, 800d7d4 <_dtoa_r+0xa54>
 800d78c:	9a07      	ldr	r2, [sp, #28]
 800d78e:	bb0a      	cbnz	r2, 800d7d4 <_dtoa_r+0xa54>
 800d790:	2b00      	cmp	r3, #0
 800d792:	ddec      	ble.n	800d76e <_dtoa_r+0x9ee>
 800d794:	2201      	movs	r2, #1
 800d796:	9904      	ldr	r1, [sp, #16]
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 fdf9 	bl	800e390 <__lshift>
 800d79e:	4639      	mov	r1, r7
 800d7a0:	9004      	str	r0, [sp, #16]
 800d7a2:	f000 fe49 	bl	800e438 <__mcmp>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	dc03      	bgt.n	800d7b2 <_dtoa_r+0xa32>
 800d7aa:	d1e0      	bne.n	800d76e <_dtoa_r+0x9ee>
 800d7ac:	f018 0f01 	tst.w	r8, #1
 800d7b0:	d0dd      	beq.n	800d76e <_dtoa_r+0x9ee>
 800d7b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d7b6:	d1d8      	bne.n	800d76a <_dtoa_r+0x9ea>
 800d7b8:	9b05      	ldr	r3, [sp, #20]
 800d7ba:	9a05      	ldr	r2, [sp, #20]
 800d7bc:	1c5d      	adds	r5, r3, #1
 800d7be:	2339      	movs	r3, #57	; 0x39
 800d7c0:	7013      	strb	r3, [r2, #0]
 800d7c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7c6:	2b39      	cmp	r3, #57	; 0x39
 800d7c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d7cc:	d04f      	beq.n	800d86e <_dtoa_r+0xaee>
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	7013      	strb	r3, [r2, #0]
 800d7d2:	e754      	b.n	800d67e <_dtoa_r+0x8fe>
 800d7d4:	9a05      	ldr	r2, [sp, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f102 0501 	add.w	r5, r2, #1
 800d7dc:	dd06      	ble.n	800d7ec <_dtoa_r+0xa6c>
 800d7de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d7e2:	d0e9      	beq.n	800d7b8 <_dtoa_r+0xa38>
 800d7e4:	f108 0801 	add.w	r8, r8, #1
 800d7e8:	9b05      	ldr	r3, [sp, #20]
 800d7ea:	e7c2      	b.n	800d772 <_dtoa_r+0x9f2>
 800d7ec:	9a02      	ldr	r2, [sp, #8]
 800d7ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d7f2:	eba5 030b 	sub.w	r3, r5, fp
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d021      	beq.n	800d83e <_dtoa_r+0xabe>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	220a      	movs	r2, #10
 800d7fe:	9904      	ldr	r1, [sp, #16]
 800d800:	4620      	mov	r0, r4
 800d802:	f000 fc10 	bl	800e026 <__multadd>
 800d806:	45b1      	cmp	r9, r6
 800d808:	9004      	str	r0, [sp, #16]
 800d80a:	f04f 0300 	mov.w	r3, #0
 800d80e:	f04f 020a 	mov.w	r2, #10
 800d812:	4649      	mov	r1, r9
 800d814:	4620      	mov	r0, r4
 800d816:	d105      	bne.n	800d824 <_dtoa_r+0xaa4>
 800d818:	f000 fc05 	bl	800e026 <__multadd>
 800d81c:	4681      	mov	r9, r0
 800d81e:	4606      	mov	r6, r0
 800d820:	9505      	str	r5, [sp, #20]
 800d822:	e776      	b.n	800d712 <_dtoa_r+0x992>
 800d824:	f000 fbff 	bl	800e026 <__multadd>
 800d828:	4631      	mov	r1, r6
 800d82a:	4681      	mov	r9, r0
 800d82c:	2300      	movs	r3, #0
 800d82e:	220a      	movs	r2, #10
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fbf8 	bl	800e026 <__multadd>
 800d836:	4606      	mov	r6, r0
 800d838:	e7f2      	b.n	800d820 <_dtoa_r+0xaa0>
 800d83a:	f04f 0900 	mov.w	r9, #0
 800d83e:	2201      	movs	r2, #1
 800d840:	9904      	ldr	r1, [sp, #16]
 800d842:	4620      	mov	r0, r4
 800d844:	f000 fda4 	bl	800e390 <__lshift>
 800d848:	4639      	mov	r1, r7
 800d84a:	9004      	str	r0, [sp, #16]
 800d84c:	f000 fdf4 	bl	800e438 <__mcmp>
 800d850:	2800      	cmp	r0, #0
 800d852:	dcb6      	bgt.n	800d7c2 <_dtoa_r+0xa42>
 800d854:	d102      	bne.n	800d85c <_dtoa_r+0xadc>
 800d856:	f018 0f01 	tst.w	r8, #1
 800d85a:	d1b2      	bne.n	800d7c2 <_dtoa_r+0xa42>
 800d85c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d860:	2b30      	cmp	r3, #48	; 0x30
 800d862:	f105 32ff 	add.w	r2, r5, #4294967295
 800d866:	f47f af0a 	bne.w	800d67e <_dtoa_r+0x8fe>
 800d86a:	4615      	mov	r5, r2
 800d86c:	e7f6      	b.n	800d85c <_dtoa_r+0xadc>
 800d86e:	4593      	cmp	fp, r2
 800d870:	d105      	bne.n	800d87e <_dtoa_r+0xafe>
 800d872:	2331      	movs	r3, #49	; 0x31
 800d874:	f10a 0a01 	add.w	sl, sl, #1
 800d878:	f88b 3000 	strb.w	r3, [fp]
 800d87c:	e6ff      	b.n	800d67e <_dtoa_r+0x8fe>
 800d87e:	4615      	mov	r5, r2
 800d880:	e79f      	b.n	800d7c2 <_dtoa_r+0xa42>
 800d882:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d8e8 <_dtoa_r+0xb68>
 800d886:	e007      	b.n	800d898 <_dtoa_r+0xb18>
 800d888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d88a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d8ec <_dtoa_r+0xb6c>
 800d88e:	b11b      	cbz	r3, 800d898 <_dtoa_r+0xb18>
 800d890:	f10b 0308 	add.w	r3, fp, #8
 800d894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d896:	6013      	str	r3, [r2, #0]
 800d898:	4658      	mov	r0, fp
 800d89a:	b017      	add	sp, #92	; 0x5c
 800d89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a0:	9b06      	ldr	r3, [sp, #24]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	f77f ae35 	ble.w	800d512 <_dtoa_r+0x792>
 800d8a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8aa:	9307      	str	r3, [sp, #28]
 800d8ac:	e649      	b.n	800d542 <_dtoa_r+0x7c2>
 800d8ae:	9b02      	ldr	r3, [sp, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dc03      	bgt.n	800d8bc <_dtoa_r+0xb3c>
 800d8b4:	9b06      	ldr	r3, [sp, #24]
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	f73f aecc 	bgt.w	800d654 <_dtoa_r+0x8d4>
 800d8bc:	465d      	mov	r5, fp
 800d8be:	4639      	mov	r1, r7
 800d8c0:	9804      	ldr	r0, [sp, #16]
 800d8c2:	f7ff f9d1 	bl	800cc68 <quorem>
 800d8c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d8ca:	f805 8b01 	strb.w	r8, [r5], #1
 800d8ce:	9a02      	ldr	r2, [sp, #8]
 800d8d0:	eba5 030b 	sub.w	r3, r5, fp
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	ddb0      	ble.n	800d83a <_dtoa_r+0xaba>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	220a      	movs	r2, #10
 800d8dc:	9904      	ldr	r1, [sp, #16]
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f000 fba1 	bl	800e026 <__multadd>
 800d8e4:	9004      	str	r0, [sp, #16]
 800d8e6:	e7ea      	b.n	800d8be <_dtoa_r+0xb3e>
 800d8e8:	08010130 	.word	0x08010130
 800d8ec:	080101a8 	.word	0x080101a8

0800d8f0 <rshift>:
 800d8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8f2:	6906      	ldr	r6, [r0, #16]
 800d8f4:	114b      	asrs	r3, r1, #5
 800d8f6:	429e      	cmp	r6, r3
 800d8f8:	f100 0414 	add.w	r4, r0, #20
 800d8fc:	dd30      	ble.n	800d960 <rshift+0x70>
 800d8fe:	f011 011f 	ands.w	r1, r1, #31
 800d902:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d906:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d90a:	d108      	bne.n	800d91e <rshift+0x2e>
 800d90c:	4621      	mov	r1, r4
 800d90e:	42b2      	cmp	r2, r6
 800d910:	460b      	mov	r3, r1
 800d912:	d211      	bcs.n	800d938 <rshift+0x48>
 800d914:	f852 3b04 	ldr.w	r3, [r2], #4
 800d918:	f841 3b04 	str.w	r3, [r1], #4
 800d91c:	e7f7      	b.n	800d90e <rshift+0x1e>
 800d91e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d922:	f1c1 0c20 	rsb	ip, r1, #32
 800d926:	40cd      	lsrs	r5, r1
 800d928:	3204      	adds	r2, #4
 800d92a:	4623      	mov	r3, r4
 800d92c:	42b2      	cmp	r2, r6
 800d92e:	4617      	mov	r7, r2
 800d930:	d30c      	bcc.n	800d94c <rshift+0x5c>
 800d932:	601d      	str	r5, [r3, #0]
 800d934:	b105      	cbz	r5, 800d938 <rshift+0x48>
 800d936:	3304      	adds	r3, #4
 800d938:	1b1a      	subs	r2, r3, r4
 800d93a:	42a3      	cmp	r3, r4
 800d93c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d940:	bf08      	it	eq
 800d942:	2300      	moveq	r3, #0
 800d944:	6102      	str	r2, [r0, #16]
 800d946:	bf08      	it	eq
 800d948:	6143      	streq	r3, [r0, #20]
 800d94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d94c:	683f      	ldr	r7, [r7, #0]
 800d94e:	fa07 f70c 	lsl.w	r7, r7, ip
 800d952:	433d      	orrs	r5, r7
 800d954:	f843 5b04 	str.w	r5, [r3], #4
 800d958:	f852 5b04 	ldr.w	r5, [r2], #4
 800d95c:	40cd      	lsrs	r5, r1
 800d95e:	e7e5      	b.n	800d92c <rshift+0x3c>
 800d960:	4623      	mov	r3, r4
 800d962:	e7e9      	b.n	800d938 <rshift+0x48>

0800d964 <__hexdig_fun>:
 800d964:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d968:	2b09      	cmp	r3, #9
 800d96a:	d802      	bhi.n	800d972 <__hexdig_fun+0xe>
 800d96c:	3820      	subs	r0, #32
 800d96e:	b2c0      	uxtb	r0, r0
 800d970:	4770      	bx	lr
 800d972:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d976:	2b05      	cmp	r3, #5
 800d978:	d801      	bhi.n	800d97e <__hexdig_fun+0x1a>
 800d97a:	3847      	subs	r0, #71	; 0x47
 800d97c:	e7f7      	b.n	800d96e <__hexdig_fun+0xa>
 800d97e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d982:	2b05      	cmp	r3, #5
 800d984:	d801      	bhi.n	800d98a <__hexdig_fun+0x26>
 800d986:	3827      	subs	r0, #39	; 0x27
 800d988:	e7f1      	b.n	800d96e <__hexdig_fun+0xa>
 800d98a:	2000      	movs	r0, #0
 800d98c:	4770      	bx	lr

0800d98e <__gethex>:
 800d98e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d992:	b08b      	sub	sp, #44	; 0x2c
 800d994:	468a      	mov	sl, r1
 800d996:	9002      	str	r0, [sp, #8]
 800d998:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d99a:	9306      	str	r3, [sp, #24]
 800d99c:	4690      	mov	r8, r2
 800d99e:	f000 facd 	bl	800df3c <__localeconv_l>
 800d9a2:	6803      	ldr	r3, [r0, #0]
 800d9a4:	9303      	str	r3, [sp, #12]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7f2 fc62 	bl	8000270 <strlen>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	9001      	str	r0, [sp, #4]
 800d9b0:	4403      	add	r3, r0
 800d9b2:	f04f 0b00 	mov.w	fp, #0
 800d9b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d9ba:	9307      	str	r3, [sp, #28]
 800d9bc:	f8da 3000 	ldr.w	r3, [sl]
 800d9c0:	3302      	adds	r3, #2
 800d9c2:	461f      	mov	r7, r3
 800d9c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9c8:	2830      	cmp	r0, #48	; 0x30
 800d9ca:	d06c      	beq.n	800daa6 <__gethex+0x118>
 800d9cc:	f7ff ffca 	bl	800d964 <__hexdig_fun>
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d16a      	bne.n	800daac <__gethex+0x11e>
 800d9d6:	9a01      	ldr	r2, [sp, #4]
 800d9d8:	9903      	ldr	r1, [sp, #12]
 800d9da:	4638      	mov	r0, r7
 800d9dc:	f7fe face 	bl	800bf7c <strncmp>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d166      	bne.n	800dab2 <__gethex+0x124>
 800d9e4:	9b01      	ldr	r3, [sp, #4]
 800d9e6:	5cf8      	ldrb	r0, [r7, r3]
 800d9e8:	18fe      	adds	r6, r7, r3
 800d9ea:	f7ff ffbb 	bl	800d964 <__hexdig_fun>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d062      	beq.n	800dab8 <__gethex+0x12a>
 800d9f2:	4633      	mov	r3, r6
 800d9f4:	7818      	ldrb	r0, [r3, #0]
 800d9f6:	2830      	cmp	r0, #48	; 0x30
 800d9f8:	461f      	mov	r7, r3
 800d9fa:	f103 0301 	add.w	r3, r3, #1
 800d9fe:	d0f9      	beq.n	800d9f4 <__gethex+0x66>
 800da00:	f7ff ffb0 	bl	800d964 <__hexdig_fun>
 800da04:	fab0 f580 	clz	r5, r0
 800da08:	096d      	lsrs	r5, r5, #5
 800da0a:	4634      	mov	r4, r6
 800da0c:	f04f 0b01 	mov.w	fp, #1
 800da10:	463a      	mov	r2, r7
 800da12:	4616      	mov	r6, r2
 800da14:	3201      	adds	r2, #1
 800da16:	7830      	ldrb	r0, [r6, #0]
 800da18:	f7ff ffa4 	bl	800d964 <__hexdig_fun>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d1f8      	bne.n	800da12 <__gethex+0x84>
 800da20:	9a01      	ldr	r2, [sp, #4]
 800da22:	9903      	ldr	r1, [sp, #12]
 800da24:	4630      	mov	r0, r6
 800da26:	f7fe faa9 	bl	800bf7c <strncmp>
 800da2a:	b950      	cbnz	r0, 800da42 <__gethex+0xb4>
 800da2c:	b954      	cbnz	r4, 800da44 <__gethex+0xb6>
 800da2e:	9b01      	ldr	r3, [sp, #4]
 800da30:	18f4      	adds	r4, r6, r3
 800da32:	4622      	mov	r2, r4
 800da34:	4616      	mov	r6, r2
 800da36:	3201      	adds	r2, #1
 800da38:	7830      	ldrb	r0, [r6, #0]
 800da3a:	f7ff ff93 	bl	800d964 <__hexdig_fun>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d1f8      	bne.n	800da34 <__gethex+0xa6>
 800da42:	b10c      	cbz	r4, 800da48 <__gethex+0xba>
 800da44:	1ba4      	subs	r4, r4, r6
 800da46:	00a4      	lsls	r4, r4, #2
 800da48:	7833      	ldrb	r3, [r6, #0]
 800da4a:	2b50      	cmp	r3, #80	; 0x50
 800da4c:	d001      	beq.n	800da52 <__gethex+0xc4>
 800da4e:	2b70      	cmp	r3, #112	; 0x70
 800da50:	d140      	bne.n	800dad4 <__gethex+0x146>
 800da52:	7873      	ldrb	r3, [r6, #1]
 800da54:	2b2b      	cmp	r3, #43	; 0x2b
 800da56:	d031      	beq.n	800dabc <__gethex+0x12e>
 800da58:	2b2d      	cmp	r3, #45	; 0x2d
 800da5a:	d033      	beq.n	800dac4 <__gethex+0x136>
 800da5c:	1c71      	adds	r1, r6, #1
 800da5e:	f04f 0900 	mov.w	r9, #0
 800da62:	7808      	ldrb	r0, [r1, #0]
 800da64:	f7ff ff7e 	bl	800d964 <__hexdig_fun>
 800da68:	1e43      	subs	r3, r0, #1
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b18      	cmp	r3, #24
 800da6e:	d831      	bhi.n	800dad4 <__gethex+0x146>
 800da70:	f1a0 0210 	sub.w	r2, r0, #16
 800da74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da78:	f7ff ff74 	bl	800d964 <__hexdig_fun>
 800da7c:	1e43      	subs	r3, r0, #1
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b18      	cmp	r3, #24
 800da82:	d922      	bls.n	800daca <__gethex+0x13c>
 800da84:	f1b9 0f00 	cmp.w	r9, #0
 800da88:	d000      	beq.n	800da8c <__gethex+0xfe>
 800da8a:	4252      	negs	r2, r2
 800da8c:	4414      	add	r4, r2
 800da8e:	f8ca 1000 	str.w	r1, [sl]
 800da92:	b30d      	cbz	r5, 800dad8 <__gethex+0x14a>
 800da94:	f1bb 0f00 	cmp.w	fp, #0
 800da98:	bf0c      	ite	eq
 800da9a:	2706      	moveq	r7, #6
 800da9c:	2700      	movne	r7, #0
 800da9e:	4638      	mov	r0, r7
 800daa0:	b00b      	add	sp, #44	; 0x2c
 800daa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa6:	f10b 0b01 	add.w	fp, fp, #1
 800daaa:	e78a      	b.n	800d9c2 <__gethex+0x34>
 800daac:	2500      	movs	r5, #0
 800daae:	462c      	mov	r4, r5
 800dab0:	e7ae      	b.n	800da10 <__gethex+0x82>
 800dab2:	463e      	mov	r6, r7
 800dab4:	2501      	movs	r5, #1
 800dab6:	e7c7      	b.n	800da48 <__gethex+0xba>
 800dab8:	4604      	mov	r4, r0
 800daba:	e7fb      	b.n	800dab4 <__gethex+0x126>
 800dabc:	f04f 0900 	mov.w	r9, #0
 800dac0:	1cb1      	adds	r1, r6, #2
 800dac2:	e7ce      	b.n	800da62 <__gethex+0xd4>
 800dac4:	f04f 0901 	mov.w	r9, #1
 800dac8:	e7fa      	b.n	800dac0 <__gethex+0x132>
 800daca:	230a      	movs	r3, #10
 800dacc:	fb03 0202 	mla	r2, r3, r2, r0
 800dad0:	3a10      	subs	r2, #16
 800dad2:	e7cf      	b.n	800da74 <__gethex+0xe6>
 800dad4:	4631      	mov	r1, r6
 800dad6:	e7da      	b.n	800da8e <__gethex+0x100>
 800dad8:	1bf3      	subs	r3, r6, r7
 800dada:	3b01      	subs	r3, #1
 800dadc:	4629      	mov	r1, r5
 800dade:	2b07      	cmp	r3, #7
 800dae0:	dc49      	bgt.n	800db76 <__gethex+0x1e8>
 800dae2:	9802      	ldr	r0, [sp, #8]
 800dae4:	f000 fa54 	bl	800df90 <_Balloc>
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	f100 0914 	add.w	r9, r0, #20
 800daee:	f04f 0b00 	mov.w	fp, #0
 800daf2:	f1c3 0301 	rsb	r3, r3, #1
 800daf6:	4605      	mov	r5, r0
 800daf8:	f8cd 9010 	str.w	r9, [sp, #16]
 800dafc:	46da      	mov	sl, fp
 800dafe:	9308      	str	r3, [sp, #32]
 800db00:	42b7      	cmp	r7, r6
 800db02:	d33b      	bcc.n	800db7c <__gethex+0x1ee>
 800db04:	9804      	ldr	r0, [sp, #16]
 800db06:	f840 ab04 	str.w	sl, [r0], #4
 800db0a:	eba0 0009 	sub.w	r0, r0, r9
 800db0e:	1080      	asrs	r0, r0, #2
 800db10:	6128      	str	r0, [r5, #16]
 800db12:	0147      	lsls	r7, r0, #5
 800db14:	4650      	mov	r0, sl
 800db16:	f000 faff 	bl	800e118 <__hi0bits>
 800db1a:	f8d8 6000 	ldr.w	r6, [r8]
 800db1e:	1a3f      	subs	r7, r7, r0
 800db20:	42b7      	cmp	r7, r6
 800db22:	dd64      	ble.n	800dbee <__gethex+0x260>
 800db24:	1bbf      	subs	r7, r7, r6
 800db26:	4639      	mov	r1, r7
 800db28:	4628      	mov	r0, r5
 800db2a:	f000 fe0f 	bl	800e74c <__any_on>
 800db2e:	4682      	mov	sl, r0
 800db30:	b178      	cbz	r0, 800db52 <__gethex+0x1c4>
 800db32:	1e7b      	subs	r3, r7, #1
 800db34:	1159      	asrs	r1, r3, #5
 800db36:	f003 021f 	and.w	r2, r3, #31
 800db3a:	f04f 0a01 	mov.w	sl, #1
 800db3e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800db42:	fa0a f202 	lsl.w	r2, sl, r2
 800db46:	420a      	tst	r2, r1
 800db48:	d003      	beq.n	800db52 <__gethex+0x1c4>
 800db4a:	4553      	cmp	r3, sl
 800db4c:	dc46      	bgt.n	800dbdc <__gethex+0x24e>
 800db4e:	f04f 0a02 	mov.w	sl, #2
 800db52:	4639      	mov	r1, r7
 800db54:	4628      	mov	r0, r5
 800db56:	f7ff fecb 	bl	800d8f0 <rshift>
 800db5a:	443c      	add	r4, r7
 800db5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db60:	42a3      	cmp	r3, r4
 800db62:	da52      	bge.n	800dc0a <__gethex+0x27c>
 800db64:	4629      	mov	r1, r5
 800db66:	9802      	ldr	r0, [sp, #8]
 800db68:	f000 fa46 	bl	800dff8 <_Bfree>
 800db6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db6e:	2300      	movs	r3, #0
 800db70:	6013      	str	r3, [r2, #0]
 800db72:	27a3      	movs	r7, #163	; 0xa3
 800db74:	e793      	b.n	800da9e <__gethex+0x110>
 800db76:	3101      	adds	r1, #1
 800db78:	105b      	asrs	r3, r3, #1
 800db7a:	e7b0      	b.n	800dade <__gethex+0x150>
 800db7c:	1e73      	subs	r3, r6, #1
 800db7e:	9305      	str	r3, [sp, #20]
 800db80:	9a07      	ldr	r2, [sp, #28]
 800db82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db86:	4293      	cmp	r3, r2
 800db88:	d018      	beq.n	800dbbc <__gethex+0x22e>
 800db8a:	f1bb 0f20 	cmp.w	fp, #32
 800db8e:	d107      	bne.n	800dba0 <__gethex+0x212>
 800db90:	9b04      	ldr	r3, [sp, #16]
 800db92:	f8c3 a000 	str.w	sl, [r3]
 800db96:	3304      	adds	r3, #4
 800db98:	f04f 0a00 	mov.w	sl, #0
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	46d3      	mov	fp, sl
 800dba0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dba4:	f7ff fede 	bl	800d964 <__hexdig_fun>
 800dba8:	f000 000f 	and.w	r0, r0, #15
 800dbac:	fa00 f00b 	lsl.w	r0, r0, fp
 800dbb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbb4:	f10b 0b04 	add.w	fp, fp, #4
 800dbb8:	9b05      	ldr	r3, [sp, #20]
 800dbba:	e00d      	b.n	800dbd8 <__gethex+0x24a>
 800dbbc:	9b05      	ldr	r3, [sp, #20]
 800dbbe:	9a08      	ldr	r2, [sp, #32]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	42bb      	cmp	r3, r7
 800dbc4:	d3e1      	bcc.n	800db8a <__gethex+0x1fc>
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	9a01      	ldr	r2, [sp, #4]
 800dbca:	9903      	ldr	r1, [sp, #12]
 800dbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbce:	f7fe f9d5 	bl	800bf7c <strncmp>
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d1d8      	bne.n	800db8a <__gethex+0x1fc>
 800dbd8:	461e      	mov	r6, r3
 800dbda:	e791      	b.n	800db00 <__gethex+0x172>
 800dbdc:	1eb9      	subs	r1, r7, #2
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f000 fdb4 	bl	800e74c <__any_on>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d0b2      	beq.n	800db4e <__gethex+0x1c0>
 800dbe8:	f04f 0a03 	mov.w	sl, #3
 800dbec:	e7b1      	b.n	800db52 <__gethex+0x1c4>
 800dbee:	da09      	bge.n	800dc04 <__gethex+0x276>
 800dbf0:	1bf7      	subs	r7, r6, r7
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	463a      	mov	r2, r7
 800dbf6:	9802      	ldr	r0, [sp, #8]
 800dbf8:	f000 fbca 	bl	800e390 <__lshift>
 800dbfc:	1be4      	subs	r4, r4, r7
 800dbfe:	4605      	mov	r5, r0
 800dc00:	f100 0914 	add.w	r9, r0, #20
 800dc04:	f04f 0a00 	mov.w	sl, #0
 800dc08:	e7a8      	b.n	800db5c <__gethex+0x1ce>
 800dc0a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc0e:	42a0      	cmp	r0, r4
 800dc10:	dd6a      	ble.n	800dce8 <__gethex+0x35a>
 800dc12:	1b04      	subs	r4, r0, r4
 800dc14:	42a6      	cmp	r6, r4
 800dc16:	dc2e      	bgt.n	800dc76 <__gethex+0x2e8>
 800dc18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d022      	beq.n	800dc66 <__gethex+0x2d8>
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d024      	beq.n	800dc6e <__gethex+0x2e0>
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d115      	bne.n	800dc54 <__gethex+0x2c6>
 800dc28:	42a6      	cmp	r6, r4
 800dc2a:	d113      	bne.n	800dc54 <__gethex+0x2c6>
 800dc2c:	2e01      	cmp	r6, #1
 800dc2e:	dc0b      	bgt.n	800dc48 <__gethex+0x2ba>
 800dc30:	9a06      	ldr	r2, [sp, #24]
 800dc32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	2301      	movs	r3, #1
 800dc3a:	612b      	str	r3, [r5, #16]
 800dc3c:	f8c9 3000 	str.w	r3, [r9]
 800dc40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc42:	2762      	movs	r7, #98	; 0x62
 800dc44:	601d      	str	r5, [r3, #0]
 800dc46:	e72a      	b.n	800da9e <__gethex+0x110>
 800dc48:	1e71      	subs	r1, r6, #1
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f000 fd7e 	bl	800e74c <__any_on>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d1ed      	bne.n	800dc30 <__gethex+0x2a2>
 800dc54:	4629      	mov	r1, r5
 800dc56:	9802      	ldr	r0, [sp, #8]
 800dc58:	f000 f9ce 	bl	800dff8 <_Bfree>
 800dc5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc5e:	2300      	movs	r3, #0
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	2750      	movs	r7, #80	; 0x50
 800dc64:	e71b      	b.n	800da9e <__gethex+0x110>
 800dc66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0e1      	beq.n	800dc30 <__gethex+0x2a2>
 800dc6c:	e7f2      	b.n	800dc54 <__gethex+0x2c6>
 800dc6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1dd      	bne.n	800dc30 <__gethex+0x2a2>
 800dc74:	e7ee      	b.n	800dc54 <__gethex+0x2c6>
 800dc76:	1e67      	subs	r7, r4, #1
 800dc78:	f1ba 0f00 	cmp.w	sl, #0
 800dc7c:	d131      	bne.n	800dce2 <__gethex+0x354>
 800dc7e:	b127      	cbz	r7, 800dc8a <__gethex+0x2fc>
 800dc80:	4639      	mov	r1, r7
 800dc82:	4628      	mov	r0, r5
 800dc84:	f000 fd62 	bl	800e74c <__any_on>
 800dc88:	4682      	mov	sl, r0
 800dc8a:	117a      	asrs	r2, r7, #5
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	f007 071f 	and.w	r7, r7, #31
 800dc92:	fa03 f707 	lsl.w	r7, r3, r7
 800dc96:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	421f      	tst	r7, r3
 800dc9e:	4628      	mov	r0, r5
 800dca0:	bf18      	it	ne
 800dca2:	f04a 0a02 	orrne.w	sl, sl, #2
 800dca6:	1b36      	subs	r6, r6, r4
 800dca8:	f7ff fe22 	bl	800d8f0 <rshift>
 800dcac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dcb0:	2702      	movs	r7, #2
 800dcb2:	f1ba 0f00 	cmp.w	sl, #0
 800dcb6:	d048      	beq.n	800dd4a <__gethex+0x3bc>
 800dcb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d015      	beq.n	800dcec <__gethex+0x35e>
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	d017      	beq.n	800dcf4 <__gethex+0x366>
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d109      	bne.n	800dcdc <__gethex+0x34e>
 800dcc8:	f01a 0f02 	tst.w	sl, #2
 800dccc:	d006      	beq.n	800dcdc <__gethex+0x34e>
 800dcce:	f8d9 3000 	ldr.w	r3, [r9]
 800dcd2:	ea4a 0a03 	orr.w	sl, sl, r3
 800dcd6:	f01a 0f01 	tst.w	sl, #1
 800dcda:	d10e      	bne.n	800dcfa <__gethex+0x36c>
 800dcdc:	f047 0710 	orr.w	r7, r7, #16
 800dce0:	e033      	b.n	800dd4a <__gethex+0x3bc>
 800dce2:	f04f 0a01 	mov.w	sl, #1
 800dce6:	e7d0      	b.n	800dc8a <__gethex+0x2fc>
 800dce8:	2701      	movs	r7, #1
 800dcea:	e7e2      	b.n	800dcb2 <__gethex+0x324>
 800dcec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcee:	f1c3 0301 	rsb	r3, r3, #1
 800dcf2:	9315      	str	r3, [sp, #84]	; 0x54
 800dcf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0f0      	beq.n	800dcdc <__gethex+0x34e>
 800dcfa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dcfe:	f105 0314 	add.w	r3, r5, #20
 800dd02:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dd06:	eb03 010a 	add.w	r1, r3, sl
 800dd0a:	f04f 0c00 	mov.w	ip, #0
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd18:	d01c      	beq.n	800dd54 <__gethex+0x3c6>
 800dd1a:	3201      	adds	r2, #1
 800dd1c:	6002      	str	r2, [r0, #0]
 800dd1e:	2f02      	cmp	r7, #2
 800dd20:	f105 0314 	add.w	r3, r5, #20
 800dd24:	d138      	bne.n	800dd98 <__gethex+0x40a>
 800dd26:	f8d8 2000 	ldr.w	r2, [r8]
 800dd2a:	3a01      	subs	r2, #1
 800dd2c:	42b2      	cmp	r2, r6
 800dd2e:	d10a      	bne.n	800dd46 <__gethex+0x3b8>
 800dd30:	1171      	asrs	r1, r6, #5
 800dd32:	2201      	movs	r2, #1
 800dd34:	f006 061f 	and.w	r6, r6, #31
 800dd38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd3c:	fa02 f606 	lsl.w	r6, r2, r6
 800dd40:	421e      	tst	r6, r3
 800dd42:	bf18      	it	ne
 800dd44:	4617      	movne	r7, r2
 800dd46:	f047 0720 	orr.w	r7, r7, #32
 800dd4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd4c:	601d      	str	r5, [r3, #0]
 800dd4e:	9b06      	ldr	r3, [sp, #24]
 800dd50:	601c      	str	r4, [r3, #0]
 800dd52:	e6a4      	b.n	800da9e <__gethex+0x110>
 800dd54:	4299      	cmp	r1, r3
 800dd56:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd5a:	d8d8      	bhi.n	800dd0e <__gethex+0x380>
 800dd5c:	68ab      	ldr	r3, [r5, #8]
 800dd5e:	4599      	cmp	r9, r3
 800dd60:	db12      	blt.n	800dd88 <__gethex+0x3fa>
 800dd62:	6869      	ldr	r1, [r5, #4]
 800dd64:	9802      	ldr	r0, [sp, #8]
 800dd66:	3101      	adds	r1, #1
 800dd68:	f000 f912 	bl	800df90 <_Balloc>
 800dd6c:	692a      	ldr	r2, [r5, #16]
 800dd6e:	3202      	adds	r2, #2
 800dd70:	f105 010c 	add.w	r1, r5, #12
 800dd74:	4683      	mov	fp, r0
 800dd76:	0092      	lsls	r2, r2, #2
 800dd78:	300c      	adds	r0, #12
 800dd7a:	f7fd fc6f 	bl	800b65c <memcpy>
 800dd7e:	4629      	mov	r1, r5
 800dd80:	9802      	ldr	r0, [sp, #8]
 800dd82:	f000 f939 	bl	800dff8 <_Bfree>
 800dd86:	465d      	mov	r5, fp
 800dd88:	692b      	ldr	r3, [r5, #16]
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dd90:	612a      	str	r2, [r5, #16]
 800dd92:	2201      	movs	r2, #1
 800dd94:	615a      	str	r2, [r3, #20]
 800dd96:	e7c2      	b.n	800dd1e <__gethex+0x390>
 800dd98:	692a      	ldr	r2, [r5, #16]
 800dd9a:	454a      	cmp	r2, r9
 800dd9c:	dd0b      	ble.n	800ddb6 <__gethex+0x428>
 800dd9e:	2101      	movs	r1, #1
 800dda0:	4628      	mov	r0, r5
 800dda2:	f7ff fda5 	bl	800d8f0 <rshift>
 800dda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddaa:	3401      	adds	r4, #1
 800ddac:	42a3      	cmp	r3, r4
 800ddae:	f6ff aed9 	blt.w	800db64 <__gethex+0x1d6>
 800ddb2:	2701      	movs	r7, #1
 800ddb4:	e7c7      	b.n	800dd46 <__gethex+0x3b8>
 800ddb6:	f016 061f 	ands.w	r6, r6, #31
 800ddba:	d0fa      	beq.n	800ddb2 <__gethex+0x424>
 800ddbc:	449a      	add	sl, r3
 800ddbe:	f1c6 0620 	rsb	r6, r6, #32
 800ddc2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ddc6:	f000 f9a7 	bl	800e118 <__hi0bits>
 800ddca:	42b0      	cmp	r0, r6
 800ddcc:	dbe7      	blt.n	800dd9e <__gethex+0x410>
 800ddce:	e7f0      	b.n	800ddb2 <__gethex+0x424>

0800ddd0 <L_shift>:
 800ddd0:	f1c2 0208 	rsb	r2, r2, #8
 800ddd4:	0092      	lsls	r2, r2, #2
 800ddd6:	b570      	push	{r4, r5, r6, lr}
 800ddd8:	f1c2 0620 	rsb	r6, r2, #32
 800dddc:	6843      	ldr	r3, [r0, #4]
 800ddde:	6804      	ldr	r4, [r0, #0]
 800dde0:	fa03 f506 	lsl.w	r5, r3, r6
 800dde4:	432c      	orrs	r4, r5
 800dde6:	40d3      	lsrs	r3, r2
 800dde8:	6004      	str	r4, [r0, #0]
 800ddea:	f840 3f04 	str.w	r3, [r0, #4]!
 800ddee:	4288      	cmp	r0, r1
 800ddf0:	d3f4      	bcc.n	800dddc <L_shift+0xc>
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}

0800ddf4 <__match>:
 800ddf4:	b530      	push	{r4, r5, lr}
 800ddf6:	6803      	ldr	r3, [r0, #0]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddfe:	b914      	cbnz	r4, 800de06 <__match+0x12>
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	2001      	movs	r0, #1
 800de04:	bd30      	pop	{r4, r5, pc}
 800de06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de0e:	2d19      	cmp	r5, #25
 800de10:	bf98      	it	ls
 800de12:	3220      	addls	r2, #32
 800de14:	42a2      	cmp	r2, r4
 800de16:	d0f0      	beq.n	800ddfa <__match+0x6>
 800de18:	2000      	movs	r0, #0
 800de1a:	e7f3      	b.n	800de04 <__match+0x10>

0800de1c <__hexnan>:
 800de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de20:	680b      	ldr	r3, [r1, #0]
 800de22:	6801      	ldr	r1, [r0, #0]
 800de24:	115f      	asrs	r7, r3, #5
 800de26:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800de2a:	f013 031f 	ands.w	r3, r3, #31
 800de2e:	b087      	sub	sp, #28
 800de30:	bf18      	it	ne
 800de32:	3704      	addne	r7, #4
 800de34:	2500      	movs	r5, #0
 800de36:	1f3e      	subs	r6, r7, #4
 800de38:	4682      	mov	sl, r0
 800de3a:	4690      	mov	r8, r2
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	f847 5c04 	str.w	r5, [r7, #-4]
 800de42:	46b1      	mov	r9, r6
 800de44:	4634      	mov	r4, r6
 800de46:	9502      	str	r5, [sp, #8]
 800de48:	46ab      	mov	fp, r5
 800de4a:	784a      	ldrb	r2, [r1, #1]
 800de4c:	1c4b      	adds	r3, r1, #1
 800de4e:	9303      	str	r3, [sp, #12]
 800de50:	b342      	cbz	r2, 800dea4 <__hexnan+0x88>
 800de52:	4610      	mov	r0, r2
 800de54:	9105      	str	r1, [sp, #20]
 800de56:	9204      	str	r2, [sp, #16]
 800de58:	f7ff fd84 	bl	800d964 <__hexdig_fun>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d143      	bne.n	800dee8 <__hexnan+0xcc>
 800de60:	9a04      	ldr	r2, [sp, #16]
 800de62:	9905      	ldr	r1, [sp, #20]
 800de64:	2a20      	cmp	r2, #32
 800de66:	d818      	bhi.n	800de9a <__hexnan+0x7e>
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	459b      	cmp	fp, r3
 800de6c:	dd13      	ble.n	800de96 <__hexnan+0x7a>
 800de6e:	454c      	cmp	r4, r9
 800de70:	d206      	bcs.n	800de80 <__hexnan+0x64>
 800de72:	2d07      	cmp	r5, #7
 800de74:	dc04      	bgt.n	800de80 <__hexnan+0x64>
 800de76:	462a      	mov	r2, r5
 800de78:	4649      	mov	r1, r9
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7ff ffa8 	bl	800ddd0 <L_shift>
 800de80:	4544      	cmp	r4, r8
 800de82:	d944      	bls.n	800df0e <__hexnan+0xf2>
 800de84:	2300      	movs	r3, #0
 800de86:	f1a4 0904 	sub.w	r9, r4, #4
 800de8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800de8e:	f8cd b008 	str.w	fp, [sp, #8]
 800de92:	464c      	mov	r4, r9
 800de94:	461d      	mov	r5, r3
 800de96:	9903      	ldr	r1, [sp, #12]
 800de98:	e7d7      	b.n	800de4a <__hexnan+0x2e>
 800de9a:	2a29      	cmp	r2, #41	; 0x29
 800de9c:	d14a      	bne.n	800df34 <__hexnan+0x118>
 800de9e:	3102      	adds	r1, #2
 800dea0:	f8ca 1000 	str.w	r1, [sl]
 800dea4:	f1bb 0f00 	cmp.w	fp, #0
 800dea8:	d044      	beq.n	800df34 <__hexnan+0x118>
 800deaa:	454c      	cmp	r4, r9
 800deac:	d206      	bcs.n	800debc <__hexnan+0xa0>
 800deae:	2d07      	cmp	r5, #7
 800deb0:	dc04      	bgt.n	800debc <__hexnan+0xa0>
 800deb2:	462a      	mov	r2, r5
 800deb4:	4649      	mov	r1, r9
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7ff ff8a 	bl	800ddd0 <L_shift>
 800debc:	4544      	cmp	r4, r8
 800debe:	d928      	bls.n	800df12 <__hexnan+0xf6>
 800dec0:	4643      	mov	r3, r8
 800dec2:	f854 2b04 	ldr.w	r2, [r4], #4
 800dec6:	f843 2b04 	str.w	r2, [r3], #4
 800deca:	42a6      	cmp	r6, r4
 800decc:	d2f9      	bcs.n	800dec2 <__hexnan+0xa6>
 800dece:	2200      	movs	r2, #0
 800ded0:	f843 2b04 	str.w	r2, [r3], #4
 800ded4:	429e      	cmp	r6, r3
 800ded6:	d2fb      	bcs.n	800ded0 <__hexnan+0xb4>
 800ded8:	6833      	ldr	r3, [r6, #0]
 800deda:	b91b      	cbnz	r3, 800dee4 <__hexnan+0xc8>
 800dedc:	4546      	cmp	r6, r8
 800dede:	d127      	bne.n	800df30 <__hexnan+0x114>
 800dee0:	2301      	movs	r3, #1
 800dee2:	6033      	str	r3, [r6, #0]
 800dee4:	2005      	movs	r0, #5
 800dee6:	e026      	b.n	800df36 <__hexnan+0x11a>
 800dee8:	3501      	adds	r5, #1
 800deea:	2d08      	cmp	r5, #8
 800deec:	f10b 0b01 	add.w	fp, fp, #1
 800def0:	dd06      	ble.n	800df00 <__hexnan+0xe4>
 800def2:	4544      	cmp	r4, r8
 800def4:	d9cf      	bls.n	800de96 <__hexnan+0x7a>
 800def6:	2300      	movs	r3, #0
 800def8:	f844 3c04 	str.w	r3, [r4, #-4]
 800defc:	2501      	movs	r5, #1
 800defe:	3c04      	subs	r4, #4
 800df00:	6822      	ldr	r2, [r4, #0]
 800df02:	f000 000f 	and.w	r0, r0, #15
 800df06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df0a:	6020      	str	r0, [r4, #0]
 800df0c:	e7c3      	b.n	800de96 <__hexnan+0x7a>
 800df0e:	2508      	movs	r5, #8
 800df10:	e7c1      	b.n	800de96 <__hexnan+0x7a>
 800df12:	9b01      	ldr	r3, [sp, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d0df      	beq.n	800ded8 <__hexnan+0xbc>
 800df18:	f04f 32ff 	mov.w	r2, #4294967295
 800df1c:	f1c3 0320 	rsb	r3, r3, #32
 800df20:	fa22 f303 	lsr.w	r3, r2, r3
 800df24:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800df28:	401a      	ands	r2, r3
 800df2a:	f847 2c04 	str.w	r2, [r7, #-4]
 800df2e:	e7d3      	b.n	800ded8 <__hexnan+0xbc>
 800df30:	3e04      	subs	r6, #4
 800df32:	e7d1      	b.n	800ded8 <__hexnan+0xbc>
 800df34:	2004      	movs	r0, #4
 800df36:	b007      	add	sp, #28
 800df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df3c <__localeconv_l>:
 800df3c:	30f0      	adds	r0, #240	; 0xf0
 800df3e:	4770      	bx	lr

0800df40 <_localeconv_r>:
 800df40:	4b04      	ldr	r3, [pc, #16]	; (800df54 <_localeconv_r+0x14>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6a18      	ldr	r0, [r3, #32]
 800df46:	4b04      	ldr	r3, [pc, #16]	; (800df58 <_localeconv_r+0x18>)
 800df48:	2800      	cmp	r0, #0
 800df4a:	bf08      	it	eq
 800df4c:	4618      	moveq	r0, r3
 800df4e:	30f0      	adds	r0, #240	; 0xf0
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	2000000c 	.word	0x2000000c
 800df58:	20000070 	.word	0x20000070

0800df5c <malloc>:
 800df5c:	4b02      	ldr	r3, [pc, #8]	; (800df68 <malloc+0xc>)
 800df5e:	4601      	mov	r1, r0
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	f000 bc71 	b.w	800e848 <_malloc_r>
 800df66:	bf00      	nop
 800df68:	2000000c 	.word	0x2000000c

0800df6c <__ascii_mbtowc>:
 800df6c:	b082      	sub	sp, #8
 800df6e:	b901      	cbnz	r1, 800df72 <__ascii_mbtowc+0x6>
 800df70:	a901      	add	r1, sp, #4
 800df72:	b142      	cbz	r2, 800df86 <__ascii_mbtowc+0x1a>
 800df74:	b14b      	cbz	r3, 800df8a <__ascii_mbtowc+0x1e>
 800df76:	7813      	ldrb	r3, [r2, #0]
 800df78:	600b      	str	r3, [r1, #0]
 800df7a:	7812      	ldrb	r2, [r2, #0]
 800df7c:	1c10      	adds	r0, r2, #0
 800df7e:	bf18      	it	ne
 800df80:	2001      	movne	r0, #1
 800df82:	b002      	add	sp, #8
 800df84:	4770      	bx	lr
 800df86:	4610      	mov	r0, r2
 800df88:	e7fb      	b.n	800df82 <__ascii_mbtowc+0x16>
 800df8a:	f06f 0001 	mvn.w	r0, #1
 800df8e:	e7f8      	b.n	800df82 <__ascii_mbtowc+0x16>

0800df90 <_Balloc>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df94:	4604      	mov	r4, r0
 800df96:	460e      	mov	r6, r1
 800df98:	b93d      	cbnz	r5, 800dfaa <_Balloc+0x1a>
 800df9a:	2010      	movs	r0, #16
 800df9c:	f7ff ffde 	bl	800df5c <malloc>
 800dfa0:	6260      	str	r0, [r4, #36]	; 0x24
 800dfa2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfa6:	6005      	str	r5, [r0, #0]
 800dfa8:	60c5      	str	r5, [r0, #12]
 800dfaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dfac:	68eb      	ldr	r3, [r5, #12]
 800dfae:	b183      	cbz	r3, 800dfd2 <_Balloc+0x42>
 800dfb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dfb8:	b9b8      	cbnz	r0, 800dfea <_Balloc+0x5a>
 800dfba:	2101      	movs	r1, #1
 800dfbc:	fa01 f506 	lsl.w	r5, r1, r6
 800dfc0:	1d6a      	adds	r2, r5, #5
 800dfc2:	0092      	lsls	r2, r2, #2
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f000 fbe2 	bl	800e78e <_calloc_r>
 800dfca:	b160      	cbz	r0, 800dfe6 <_Balloc+0x56>
 800dfcc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dfd0:	e00e      	b.n	800dff0 <_Balloc+0x60>
 800dfd2:	2221      	movs	r2, #33	; 0x21
 800dfd4:	2104      	movs	r1, #4
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 fbd9 	bl	800e78e <_calloc_r>
 800dfdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfde:	60e8      	str	r0, [r5, #12]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1e4      	bne.n	800dfb0 <_Balloc+0x20>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	bd70      	pop	{r4, r5, r6, pc}
 800dfea:	6802      	ldr	r2, [r0, #0]
 800dfec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dff0:	2300      	movs	r3, #0
 800dff2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dff6:	e7f7      	b.n	800dfe8 <_Balloc+0x58>

0800dff8 <_Bfree>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dffc:	4606      	mov	r6, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	b93c      	cbnz	r4, 800e012 <_Bfree+0x1a>
 800e002:	2010      	movs	r0, #16
 800e004:	f7ff ffaa 	bl	800df5c <malloc>
 800e008:	6270      	str	r0, [r6, #36]	; 0x24
 800e00a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e00e:	6004      	str	r4, [r0, #0]
 800e010:	60c4      	str	r4, [r0, #12]
 800e012:	b13d      	cbz	r5, 800e024 <_Bfree+0x2c>
 800e014:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e016:	686a      	ldr	r2, [r5, #4]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e01e:	6029      	str	r1, [r5, #0]
 800e020:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e024:	bd70      	pop	{r4, r5, r6, pc}

0800e026 <__multadd>:
 800e026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e02a:	690d      	ldr	r5, [r1, #16]
 800e02c:	461f      	mov	r7, r3
 800e02e:	4606      	mov	r6, r0
 800e030:	460c      	mov	r4, r1
 800e032:	f101 0c14 	add.w	ip, r1, #20
 800e036:	2300      	movs	r3, #0
 800e038:	f8dc 0000 	ldr.w	r0, [ip]
 800e03c:	b281      	uxth	r1, r0
 800e03e:	fb02 7101 	mla	r1, r2, r1, r7
 800e042:	0c0f      	lsrs	r7, r1, #16
 800e044:	0c00      	lsrs	r0, r0, #16
 800e046:	fb02 7000 	mla	r0, r2, r0, r7
 800e04a:	b289      	uxth	r1, r1
 800e04c:	3301      	adds	r3, #1
 800e04e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e052:	429d      	cmp	r5, r3
 800e054:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e058:	f84c 1b04 	str.w	r1, [ip], #4
 800e05c:	dcec      	bgt.n	800e038 <__multadd+0x12>
 800e05e:	b1d7      	cbz	r7, 800e096 <__multadd+0x70>
 800e060:	68a3      	ldr	r3, [r4, #8]
 800e062:	42ab      	cmp	r3, r5
 800e064:	dc12      	bgt.n	800e08c <__multadd+0x66>
 800e066:	6861      	ldr	r1, [r4, #4]
 800e068:	4630      	mov	r0, r6
 800e06a:	3101      	adds	r1, #1
 800e06c:	f7ff ff90 	bl	800df90 <_Balloc>
 800e070:	6922      	ldr	r2, [r4, #16]
 800e072:	3202      	adds	r2, #2
 800e074:	f104 010c 	add.w	r1, r4, #12
 800e078:	4680      	mov	r8, r0
 800e07a:	0092      	lsls	r2, r2, #2
 800e07c:	300c      	adds	r0, #12
 800e07e:	f7fd faed 	bl	800b65c <memcpy>
 800e082:	4621      	mov	r1, r4
 800e084:	4630      	mov	r0, r6
 800e086:	f7ff ffb7 	bl	800dff8 <_Bfree>
 800e08a:	4644      	mov	r4, r8
 800e08c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e090:	3501      	adds	r5, #1
 800e092:	615f      	str	r7, [r3, #20]
 800e094:	6125      	str	r5, [r4, #16]
 800e096:	4620      	mov	r0, r4
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e09c <__s2b>:
 800e09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	4615      	mov	r5, r2
 800e0a4:	461f      	mov	r7, r3
 800e0a6:	2209      	movs	r2, #9
 800e0a8:	3308      	adds	r3, #8
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	db20      	blt.n	800e0fa <__s2b+0x5e>
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	f7ff ff69 	bl	800df90 <_Balloc>
 800e0be:	9b08      	ldr	r3, [sp, #32]
 800e0c0:	6143      	str	r3, [r0, #20]
 800e0c2:	2d09      	cmp	r5, #9
 800e0c4:	f04f 0301 	mov.w	r3, #1
 800e0c8:	6103      	str	r3, [r0, #16]
 800e0ca:	dd19      	ble.n	800e100 <__s2b+0x64>
 800e0cc:	f104 0809 	add.w	r8, r4, #9
 800e0d0:	46c1      	mov	r9, r8
 800e0d2:	442c      	add	r4, r5
 800e0d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e0d8:	4601      	mov	r1, r0
 800e0da:	3b30      	subs	r3, #48	; 0x30
 800e0dc:	220a      	movs	r2, #10
 800e0de:	4630      	mov	r0, r6
 800e0e0:	f7ff ffa1 	bl	800e026 <__multadd>
 800e0e4:	45a1      	cmp	r9, r4
 800e0e6:	d1f5      	bne.n	800e0d4 <__s2b+0x38>
 800e0e8:	eb08 0405 	add.w	r4, r8, r5
 800e0ec:	3c08      	subs	r4, #8
 800e0ee:	1b2d      	subs	r5, r5, r4
 800e0f0:	1963      	adds	r3, r4, r5
 800e0f2:	42bb      	cmp	r3, r7
 800e0f4:	db07      	blt.n	800e106 <__s2b+0x6a>
 800e0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fa:	0052      	lsls	r2, r2, #1
 800e0fc:	3101      	adds	r1, #1
 800e0fe:	e7d9      	b.n	800e0b4 <__s2b+0x18>
 800e100:	340a      	adds	r4, #10
 800e102:	2509      	movs	r5, #9
 800e104:	e7f3      	b.n	800e0ee <__s2b+0x52>
 800e106:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e10a:	4601      	mov	r1, r0
 800e10c:	3b30      	subs	r3, #48	; 0x30
 800e10e:	220a      	movs	r2, #10
 800e110:	4630      	mov	r0, r6
 800e112:	f7ff ff88 	bl	800e026 <__multadd>
 800e116:	e7eb      	b.n	800e0f0 <__s2b+0x54>

0800e118 <__hi0bits>:
 800e118:	0c02      	lsrs	r2, r0, #16
 800e11a:	0412      	lsls	r2, r2, #16
 800e11c:	4603      	mov	r3, r0
 800e11e:	b9b2      	cbnz	r2, 800e14e <__hi0bits+0x36>
 800e120:	0403      	lsls	r3, r0, #16
 800e122:	2010      	movs	r0, #16
 800e124:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e128:	bf04      	itt	eq
 800e12a:	021b      	lsleq	r3, r3, #8
 800e12c:	3008      	addeq	r0, #8
 800e12e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e132:	bf04      	itt	eq
 800e134:	011b      	lsleq	r3, r3, #4
 800e136:	3004      	addeq	r0, #4
 800e138:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e13c:	bf04      	itt	eq
 800e13e:	009b      	lsleq	r3, r3, #2
 800e140:	3002      	addeq	r0, #2
 800e142:	2b00      	cmp	r3, #0
 800e144:	db06      	blt.n	800e154 <__hi0bits+0x3c>
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	d503      	bpl.n	800e152 <__hi0bits+0x3a>
 800e14a:	3001      	adds	r0, #1
 800e14c:	4770      	bx	lr
 800e14e:	2000      	movs	r0, #0
 800e150:	e7e8      	b.n	800e124 <__hi0bits+0xc>
 800e152:	2020      	movs	r0, #32
 800e154:	4770      	bx	lr

0800e156 <__lo0bits>:
 800e156:	6803      	ldr	r3, [r0, #0]
 800e158:	f013 0207 	ands.w	r2, r3, #7
 800e15c:	4601      	mov	r1, r0
 800e15e:	d00b      	beq.n	800e178 <__lo0bits+0x22>
 800e160:	07da      	lsls	r2, r3, #31
 800e162:	d423      	bmi.n	800e1ac <__lo0bits+0x56>
 800e164:	0798      	lsls	r0, r3, #30
 800e166:	bf49      	itett	mi
 800e168:	085b      	lsrmi	r3, r3, #1
 800e16a:	089b      	lsrpl	r3, r3, #2
 800e16c:	2001      	movmi	r0, #1
 800e16e:	600b      	strmi	r3, [r1, #0]
 800e170:	bf5c      	itt	pl
 800e172:	600b      	strpl	r3, [r1, #0]
 800e174:	2002      	movpl	r0, #2
 800e176:	4770      	bx	lr
 800e178:	b298      	uxth	r0, r3
 800e17a:	b9a8      	cbnz	r0, 800e1a8 <__lo0bits+0x52>
 800e17c:	0c1b      	lsrs	r3, r3, #16
 800e17e:	2010      	movs	r0, #16
 800e180:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e184:	bf04      	itt	eq
 800e186:	0a1b      	lsreq	r3, r3, #8
 800e188:	3008      	addeq	r0, #8
 800e18a:	071a      	lsls	r2, r3, #28
 800e18c:	bf04      	itt	eq
 800e18e:	091b      	lsreq	r3, r3, #4
 800e190:	3004      	addeq	r0, #4
 800e192:	079a      	lsls	r2, r3, #30
 800e194:	bf04      	itt	eq
 800e196:	089b      	lsreq	r3, r3, #2
 800e198:	3002      	addeq	r0, #2
 800e19a:	07da      	lsls	r2, r3, #31
 800e19c:	d402      	bmi.n	800e1a4 <__lo0bits+0x4e>
 800e19e:	085b      	lsrs	r3, r3, #1
 800e1a0:	d006      	beq.n	800e1b0 <__lo0bits+0x5a>
 800e1a2:	3001      	adds	r0, #1
 800e1a4:	600b      	str	r3, [r1, #0]
 800e1a6:	4770      	bx	lr
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	e7e9      	b.n	800e180 <__lo0bits+0x2a>
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	4770      	bx	lr
 800e1b0:	2020      	movs	r0, #32
 800e1b2:	4770      	bx	lr

0800e1b4 <__i2b>:
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	2101      	movs	r1, #1
 800e1ba:	f7ff fee9 	bl	800df90 <_Balloc>
 800e1be:	2201      	movs	r2, #1
 800e1c0:	6144      	str	r4, [r0, #20]
 800e1c2:	6102      	str	r2, [r0, #16]
 800e1c4:	bd10      	pop	{r4, pc}

0800e1c6 <__multiply>:
 800e1c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	690a      	ldr	r2, [r1, #16]
 800e1ce:	6923      	ldr	r3, [r4, #16]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	bfb8      	it	lt
 800e1d4:	460b      	movlt	r3, r1
 800e1d6:	4688      	mov	r8, r1
 800e1d8:	bfbc      	itt	lt
 800e1da:	46a0      	movlt	r8, r4
 800e1dc:	461c      	movlt	r4, r3
 800e1de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e1e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1ee:	eb07 0609 	add.w	r6, r7, r9
 800e1f2:	42b3      	cmp	r3, r6
 800e1f4:	bfb8      	it	lt
 800e1f6:	3101      	addlt	r1, #1
 800e1f8:	f7ff feca 	bl	800df90 <_Balloc>
 800e1fc:	f100 0514 	add.w	r5, r0, #20
 800e200:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e204:	462b      	mov	r3, r5
 800e206:	2200      	movs	r2, #0
 800e208:	4573      	cmp	r3, lr
 800e20a:	d316      	bcc.n	800e23a <__multiply+0x74>
 800e20c:	f104 0214 	add.w	r2, r4, #20
 800e210:	f108 0114 	add.w	r1, r8, #20
 800e214:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e218:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	9201      	str	r2, [sp, #4]
 800e222:	4293      	cmp	r3, r2
 800e224:	d80c      	bhi.n	800e240 <__multiply+0x7a>
 800e226:	2e00      	cmp	r6, #0
 800e228:	dd03      	ble.n	800e232 <__multiply+0x6c>
 800e22a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d05d      	beq.n	800e2ee <__multiply+0x128>
 800e232:	6106      	str	r6, [r0, #16]
 800e234:	b003      	add	sp, #12
 800e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23a:	f843 2b04 	str.w	r2, [r3], #4
 800e23e:	e7e3      	b.n	800e208 <__multiply+0x42>
 800e240:	f8b2 b000 	ldrh.w	fp, [r2]
 800e244:	f1bb 0f00 	cmp.w	fp, #0
 800e248:	d023      	beq.n	800e292 <__multiply+0xcc>
 800e24a:	4689      	mov	r9, r1
 800e24c:	46ac      	mov	ip, r5
 800e24e:	f04f 0800 	mov.w	r8, #0
 800e252:	f859 4b04 	ldr.w	r4, [r9], #4
 800e256:	f8dc a000 	ldr.w	sl, [ip]
 800e25a:	b2a3      	uxth	r3, r4
 800e25c:	fa1f fa8a 	uxth.w	sl, sl
 800e260:	fb0b a303 	mla	r3, fp, r3, sl
 800e264:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e268:	f8dc 4000 	ldr.w	r4, [ip]
 800e26c:	4443      	add	r3, r8
 800e26e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e272:	fb0b 840a 	mla	r4, fp, sl, r8
 800e276:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e27a:	46e2      	mov	sl, ip
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e282:	454f      	cmp	r7, r9
 800e284:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e288:	f84a 3b04 	str.w	r3, [sl], #4
 800e28c:	d82b      	bhi.n	800e2e6 <__multiply+0x120>
 800e28e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e298:	3204      	adds	r2, #4
 800e29a:	f1ba 0f00 	cmp.w	sl, #0
 800e29e:	d020      	beq.n	800e2e2 <__multiply+0x11c>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	4689      	mov	r9, r1
 800e2a4:	46a8      	mov	r8, r5
 800e2a6:	f04f 0b00 	mov.w	fp, #0
 800e2aa:	f8b9 c000 	ldrh.w	ip, [r9]
 800e2ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e2b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800e2b6:	445c      	add	r4, fp
 800e2b8:	46c4      	mov	ip, r8
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e2c0:	f84c 3b04 	str.w	r3, [ip], #4
 800e2c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e2c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e2cc:	0c1b      	lsrs	r3, r3, #16
 800e2ce:	fb0a b303 	mla	r3, sl, r3, fp
 800e2d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e2d6:	454f      	cmp	r7, r9
 800e2d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e2dc:	d805      	bhi.n	800e2ea <__multiply+0x124>
 800e2de:	f8c8 3004 	str.w	r3, [r8, #4]
 800e2e2:	3504      	adds	r5, #4
 800e2e4:	e79b      	b.n	800e21e <__multiply+0x58>
 800e2e6:	46d4      	mov	ip, sl
 800e2e8:	e7b3      	b.n	800e252 <__multiply+0x8c>
 800e2ea:	46e0      	mov	r8, ip
 800e2ec:	e7dd      	b.n	800e2aa <__multiply+0xe4>
 800e2ee:	3e01      	subs	r6, #1
 800e2f0:	e799      	b.n	800e226 <__multiply+0x60>
	...

0800e2f4 <__pow5mult>:
 800e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	f012 0203 	ands.w	r2, r2, #3
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	d007      	beq.n	800e314 <__pow5mult+0x20>
 800e304:	3a01      	subs	r2, #1
 800e306:	4c21      	ldr	r4, [pc, #132]	; (800e38c <__pow5mult+0x98>)
 800e308:	2300      	movs	r3, #0
 800e30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e30e:	f7ff fe8a 	bl	800e026 <__multadd>
 800e312:	4607      	mov	r7, r0
 800e314:	10ad      	asrs	r5, r5, #2
 800e316:	d035      	beq.n	800e384 <__pow5mult+0x90>
 800e318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e31a:	b93c      	cbnz	r4, 800e32c <__pow5mult+0x38>
 800e31c:	2010      	movs	r0, #16
 800e31e:	f7ff fe1d 	bl	800df5c <malloc>
 800e322:	6270      	str	r0, [r6, #36]	; 0x24
 800e324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e328:	6004      	str	r4, [r0, #0]
 800e32a:	60c4      	str	r4, [r0, #12]
 800e32c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e334:	b94c      	cbnz	r4, 800e34a <__pow5mult+0x56>
 800e336:	f240 2171 	movw	r1, #625	; 0x271
 800e33a:	4630      	mov	r0, r6
 800e33c:	f7ff ff3a 	bl	800e1b4 <__i2b>
 800e340:	2300      	movs	r3, #0
 800e342:	f8c8 0008 	str.w	r0, [r8, #8]
 800e346:	4604      	mov	r4, r0
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	f04f 0800 	mov.w	r8, #0
 800e34e:	07eb      	lsls	r3, r5, #31
 800e350:	d50a      	bpl.n	800e368 <__pow5mult+0x74>
 800e352:	4639      	mov	r1, r7
 800e354:	4622      	mov	r2, r4
 800e356:	4630      	mov	r0, r6
 800e358:	f7ff ff35 	bl	800e1c6 <__multiply>
 800e35c:	4639      	mov	r1, r7
 800e35e:	4681      	mov	r9, r0
 800e360:	4630      	mov	r0, r6
 800e362:	f7ff fe49 	bl	800dff8 <_Bfree>
 800e366:	464f      	mov	r7, r9
 800e368:	106d      	asrs	r5, r5, #1
 800e36a:	d00b      	beq.n	800e384 <__pow5mult+0x90>
 800e36c:	6820      	ldr	r0, [r4, #0]
 800e36e:	b938      	cbnz	r0, 800e380 <__pow5mult+0x8c>
 800e370:	4622      	mov	r2, r4
 800e372:	4621      	mov	r1, r4
 800e374:	4630      	mov	r0, r6
 800e376:	f7ff ff26 	bl	800e1c6 <__multiply>
 800e37a:	6020      	str	r0, [r4, #0]
 800e37c:	f8c0 8000 	str.w	r8, [r0]
 800e380:	4604      	mov	r4, r0
 800e382:	e7e4      	b.n	800e34e <__pow5mult+0x5a>
 800e384:	4638      	mov	r0, r7
 800e386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38a:	bf00      	nop
 800e38c:	080102b0 	.word	0x080102b0

0800e390 <__lshift>:
 800e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e39a:	6923      	ldr	r3, [r4, #16]
 800e39c:	6849      	ldr	r1, [r1, #4]
 800e39e:	eb0a 0903 	add.w	r9, sl, r3
 800e3a2:	68a3      	ldr	r3, [r4, #8]
 800e3a4:	4607      	mov	r7, r0
 800e3a6:	4616      	mov	r6, r2
 800e3a8:	f109 0501 	add.w	r5, r9, #1
 800e3ac:	42ab      	cmp	r3, r5
 800e3ae:	db32      	blt.n	800e416 <__lshift+0x86>
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f7ff fded 	bl	800df90 <_Balloc>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	f100 0114 	add.w	r1, r0, #20
 800e3be:	461a      	mov	r2, r3
 800e3c0:	4553      	cmp	r3, sl
 800e3c2:	db2b      	blt.n	800e41c <__lshift+0x8c>
 800e3c4:	6920      	ldr	r0, [r4, #16]
 800e3c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3ca:	f104 0314 	add.w	r3, r4, #20
 800e3ce:	f016 021f 	ands.w	r2, r6, #31
 800e3d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3da:	d025      	beq.n	800e428 <__lshift+0x98>
 800e3dc:	f1c2 0e20 	rsb	lr, r2, #32
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	681e      	ldr	r6, [r3, #0]
 800e3e4:	468a      	mov	sl, r1
 800e3e6:	4096      	lsls	r6, r2
 800e3e8:	4330      	orrs	r0, r6
 800e3ea:	f84a 0b04 	str.w	r0, [sl], #4
 800e3ee:	f853 0b04 	ldr.w	r0, [r3], #4
 800e3f2:	459c      	cmp	ip, r3
 800e3f4:	fa20 f00e 	lsr.w	r0, r0, lr
 800e3f8:	d814      	bhi.n	800e424 <__lshift+0x94>
 800e3fa:	6048      	str	r0, [r1, #4]
 800e3fc:	b108      	cbz	r0, 800e402 <__lshift+0x72>
 800e3fe:	f109 0502 	add.w	r5, r9, #2
 800e402:	3d01      	subs	r5, #1
 800e404:	4638      	mov	r0, r7
 800e406:	f8c8 5010 	str.w	r5, [r8, #16]
 800e40a:	4621      	mov	r1, r4
 800e40c:	f7ff fdf4 	bl	800dff8 <_Bfree>
 800e410:	4640      	mov	r0, r8
 800e412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e416:	3101      	adds	r1, #1
 800e418:	005b      	lsls	r3, r3, #1
 800e41a:	e7c7      	b.n	800e3ac <__lshift+0x1c>
 800e41c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e420:	3301      	adds	r3, #1
 800e422:	e7cd      	b.n	800e3c0 <__lshift+0x30>
 800e424:	4651      	mov	r1, sl
 800e426:	e7dc      	b.n	800e3e2 <__lshift+0x52>
 800e428:	3904      	subs	r1, #4
 800e42a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e432:	459c      	cmp	ip, r3
 800e434:	d8f9      	bhi.n	800e42a <__lshift+0x9a>
 800e436:	e7e4      	b.n	800e402 <__lshift+0x72>

0800e438 <__mcmp>:
 800e438:	6903      	ldr	r3, [r0, #16]
 800e43a:	690a      	ldr	r2, [r1, #16]
 800e43c:	1a9b      	subs	r3, r3, r2
 800e43e:	b530      	push	{r4, r5, lr}
 800e440:	d10c      	bne.n	800e45c <__mcmp+0x24>
 800e442:	0092      	lsls	r2, r2, #2
 800e444:	3014      	adds	r0, #20
 800e446:	3114      	adds	r1, #20
 800e448:	1884      	adds	r4, r0, r2
 800e44a:	4411      	add	r1, r2
 800e44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e454:	4295      	cmp	r5, r2
 800e456:	d003      	beq.n	800e460 <__mcmp+0x28>
 800e458:	d305      	bcc.n	800e466 <__mcmp+0x2e>
 800e45a:	2301      	movs	r3, #1
 800e45c:	4618      	mov	r0, r3
 800e45e:	bd30      	pop	{r4, r5, pc}
 800e460:	42a0      	cmp	r0, r4
 800e462:	d3f3      	bcc.n	800e44c <__mcmp+0x14>
 800e464:	e7fa      	b.n	800e45c <__mcmp+0x24>
 800e466:	f04f 33ff 	mov.w	r3, #4294967295
 800e46a:	e7f7      	b.n	800e45c <__mcmp+0x24>

0800e46c <__mdiff>:
 800e46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e470:	460d      	mov	r5, r1
 800e472:	4607      	mov	r7, r0
 800e474:	4611      	mov	r1, r2
 800e476:	4628      	mov	r0, r5
 800e478:	4614      	mov	r4, r2
 800e47a:	f7ff ffdd 	bl	800e438 <__mcmp>
 800e47e:	1e06      	subs	r6, r0, #0
 800e480:	d108      	bne.n	800e494 <__mdiff+0x28>
 800e482:	4631      	mov	r1, r6
 800e484:	4638      	mov	r0, r7
 800e486:	f7ff fd83 	bl	800df90 <_Balloc>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e494:	bfa4      	itt	ge
 800e496:	4623      	movge	r3, r4
 800e498:	462c      	movge	r4, r5
 800e49a:	4638      	mov	r0, r7
 800e49c:	6861      	ldr	r1, [r4, #4]
 800e49e:	bfa6      	itte	ge
 800e4a0:	461d      	movge	r5, r3
 800e4a2:	2600      	movge	r6, #0
 800e4a4:	2601      	movlt	r6, #1
 800e4a6:	f7ff fd73 	bl	800df90 <_Balloc>
 800e4aa:	692b      	ldr	r3, [r5, #16]
 800e4ac:	60c6      	str	r6, [r0, #12]
 800e4ae:	6926      	ldr	r6, [r4, #16]
 800e4b0:	f105 0914 	add.w	r9, r5, #20
 800e4b4:	f104 0214 	add.w	r2, r4, #20
 800e4b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e4bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e4c0:	f100 0514 	add.w	r5, r0, #20
 800e4c4:	f04f 0e00 	mov.w	lr, #0
 800e4c8:	f852 ab04 	ldr.w	sl, [r2], #4
 800e4cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800e4d0:	fa1e f18a 	uxtah	r1, lr, sl
 800e4d4:	b2a3      	uxth	r3, r4
 800e4d6:	1ac9      	subs	r1, r1, r3
 800e4d8:	0c23      	lsrs	r3, r4, #16
 800e4da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e4de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e4e2:	b289      	uxth	r1, r1
 800e4e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e4e8:	45c8      	cmp	r8, r9
 800e4ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e4ee:	4694      	mov	ip, r2
 800e4f0:	f845 3b04 	str.w	r3, [r5], #4
 800e4f4:	d8e8      	bhi.n	800e4c8 <__mdiff+0x5c>
 800e4f6:	45bc      	cmp	ip, r7
 800e4f8:	d304      	bcc.n	800e504 <__mdiff+0x98>
 800e4fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e4fe:	b183      	cbz	r3, 800e522 <__mdiff+0xb6>
 800e500:	6106      	str	r6, [r0, #16]
 800e502:	e7c5      	b.n	800e490 <__mdiff+0x24>
 800e504:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e508:	fa1e f381 	uxtah	r3, lr, r1
 800e50c:	141a      	asrs	r2, r3, #16
 800e50e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e512:	b29b      	uxth	r3, r3
 800e514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e518:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e51c:	f845 3b04 	str.w	r3, [r5], #4
 800e520:	e7e9      	b.n	800e4f6 <__mdiff+0x8a>
 800e522:	3e01      	subs	r6, #1
 800e524:	e7e9      	b.n	800e4fa <__mdiff+0x8e>
	...

0800e528 <__ulp>:
 800e528:	4b12      	ldr	r3, [pc, #72]	; (800e574 <__ulp+0x4c>)
 800e52a:	ee10 2a90 	vmov	r2, s1
 800e52e:	401a      	ands	r2, r3
 800e530:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e534:	2b00      	cmp	r3, #0
 800e536:	dd04      	ble.n	800e542 <__ulp+0x1a>
 800e538:	2000      	movs	r0, #0
 800e53a:	4619      	mov	r1, r3
 800e53c:	ec41 0b10 	vmov	d0, r0, r1
 800e540:	4770      	bx	lr
 800e542:	425b      	negs	r3, r3
 800e544:	151b      	asrs	r3, r3, #20
 800e546:	2b13      	cmp	r3, #19
 800e548:	f04f 0000 	mov.w	r0, #0
 800e54c:	f04f 0100 	mov.w	r1, #0
 800e550:	dc04      	bgt.n	800e55c <__ulp+0x34>
 800e552:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e556:	fa42 f103 	asr.w	r1, r2, r3
 800e55a:	e7ef      	b.n	800e53c <__ulp+0x14>
 800e55c:	3b14      	subs	r3, #20
 800e55e:	2b1e      	cmp	r3, #30
 800e560:	f04f 0201 	mov.w	r2, #1
 800e564:	bfda      	itte	le
 800e566:	f1c3 031f 	rsble	r3, r3, #31
 800e56a:	fa02 f303 	lslle.w	r3, r2, r3
 800e56e:	4613      	movgt	r3, r2
 800e570:	4618      	mov	r0, r3
 800e572:	e7e3      	b.n	800e53c <__ulp+0x14>
 800e574:	7ff00000 	.word	0x7ff00000

0800e578 <__b2d>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	6905      	ldr	r5, [r0, #16]
 800e57c:	f100 0714 	add.w	r7, r0, #20
 800e580:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e584:	1f2e      	subs	r6, r5, #4
 800e586:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e58a:	4620      	mov	r0, r4
 800e58c:	f7ff fdc4 	bl	800e118 <__hi0bits>
 800e590:	f1c0 0320 	rsb	r3, r0, #32
 800e594:	280a      	cmp	r0, #10
 800e596:	600b      	str	r3, [r1, #0]
 800e598:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e610 <__b2d+0x98>
 800e59c:	dc14      	bgt.n	800e5c8 <__b2d+0x50>
 800e59e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e5a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e5a6:	42b7      	cmp	r7, r6
 800e5a8:	ea41 030c 	orr.w	r3, r1, ip
 800e5ac:	bf34      	ite	cc
 800e5ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5b2:	2100      	movcs	r1, #0
 800e5b4:	3015      	adds	r0, #21
 800e5b6:	fa04 f000 	lsl.w	r0, r4, r0
 800e5ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800e5be:	ea40 0201 	orr.w	r2, r0, r1
 800e5c2:	ec43 2b10 	vmov	d0, r2, r3
 800e5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c8:	42b7      	cmp	r7, r6
 800e5ca:	bf3a      	itte	cc
 800e5cc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e5d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5d4:	2100      	movcs	r1, #0
 800e5d6:	380b      	subs	r0, #11
 800e5d8:	d015      	beq.n	800e606 <__b2d+0x8e>
 800e5da:	4084      	lsls	r4, r0
 800e5dc:	f1c0 0520 	rsb	r5, r0, #32
 800e5e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e5e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e5e8:	42be      	cmp	r6, r7
 800e5ea:	fa21 fc05 	lsr.w	ip, r1, r5
 800e5ee:	ea44 030c 	orr.w	r3, r4, ip
 800e5f2:	bf8c      	ite	hi
 800e5f4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e5f8:	2400      	movls	r4, #0
 800e5fa:	fa01 f000 	lsl.w	r0, r1, r0
 800e5fe:	40ec      	lsrs	r4, r5
 800e600:	ea40 0204 	orr.w	r2, r0, r4
 800e604:	e7dd      	b.n	800e5c2 <__b2d+0x4a>
 800e606:	ea44 030c 	orr.w	r3, r4, ip
 800e60a:	460a      	mov	r2, r1
 800e60c:	e7d9      	b.n	800e5c2 <__b2d+0x4a>
 800e60e:	bf00      	nop
 800e610:	3ff00000 	.word	0x3ff00000

0800e614 <__d2b>:
 800e614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e618:	460e      	mov	r6, r1
 800e61a:	2101      	movs	r1, #1
 800e61c:	ec59 8b10 	vmov	r8, r9, d0
 800e620:	4615      	mov	r5, r2
 800e622:	f7ff fcb5 	bl	800df90 <_Balloc>
 800e626:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e62a:	4607      	mov	r7, r0
 800e62c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e630:	bb34      	cbnz	r4, 800e680 <__d2b+0x6c>
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	f1b8 0300 	subs.w	r3, r8, #0
 800e638:	d027      	beq.n	800e68a <__d2b+0x76>
 800e63a:	a802      	add	r0, sp, #8
 800e63c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e640:	f7ff fd89 	bl	800e156 <__lo0bits>
 800e644:	9900      	ldr	r1, [sp, #0]
 800e646:	b1f0      	cbz	r0, 800e686 <__d2b+0x72>
 800e648:	9a01      	ldr	r2, [sp, #4]
 800e64a:	f1c0 0320 	rsb	r3, r0, #32
 800e64e:	fa02 f303 	lsl.w	r3, r2, r3
 800e652:	430b      	orrs	r3, r1
 800e654:	40c2      	lsrs	r2, r0
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	9201      	str	r2, [sp, #4]
 800e65a:	9b01      	ldr	r3, [sp, #4]
 800e65c:	61bb      	str	r3, [r7, #24]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	bf14      	ite	ne
 800e662:	2102      	movne	r1, #2
 800e664:	2101      	moveq	r1, #1
 800e666:	6139      	str	r1, [r7, #16]
 800e668:	b1c4      	cbz	r4, 800e69c <__d2b+0x88>
 800e66a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e66e:	4404      	add	r4, r0
 800e670:	6034      	str	r4, [r6, #0]
 800e672:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e676:	6028      	str	r0, [r5, #0]
 800e678:	4638      	mov	r0, r7
 800e67a:	b003      	add	sp, #12
 800e67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e684:	e7d5      	b.n	800e632 <__d2b+0x1e>
 800e686:	6179      	str	r1, [r7, #20]
 800e688:	e7e7      	b.n	800e65a <__d2b+0x46>
 800e68a:	a801      	add	r0, sp, #4
 800e68c:	f7ff fd63 	bl	800e156 <__lo0bits>
 800e690:	9b01      	ldr	r3, [sp, #4]
 800e692:	617b      	str	r3, [r7, #20]
 800e694:	2101      	movs	r1, #1
 800e696:	6139      	str	r1, [r7, #16]
 800e698:	3020      	adds	r0, #32
 800e69a:	e7e5      	b.n	800e668 <__d2b+0x54>
 800e69c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e6a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6a4:	6030      	str	r0, [r6, #0]
 800e6a6:	6918      	ldr	r0, [r3, #16]
 800e6a8:	f7ff fd36 	bl	800e118 <__hi0bits>
 800e6ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e6b0:	e7e1      	b.n	800e676 <__d2b+0x62>

0800e6b2 <__ratio>:
 800e6b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b6:	4688      	mov	r8, r1
 800e6b8:	4669      	mov	r1, sp
 800e6ba:	4681      	mov	r9, r0
 800e6bc:	f7ff ff5c 	bl	800e578 <__b2d>
 800e6c0:	a901      	add	r1, sp, #4
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	ec57 6b10 	vmov	r6, r7, d0
 800e6c8:	f7ff ff56 	bl	800e578 <__b2d>
 800e6cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e6d4:	eba3 0c02 	sub.w	ip, r3, r2
 800e6d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e6dc:	1a9b      	subs	r3, r3, r2
 800e6de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e6e2:	ec5b ab10 	vmov	sl, fp, d0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	bfce      	itee	gt
 800e6ea:	463a      	movgt	r2, r7
 800e6ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e6f0:	465a      	movle	r2, fp
 800e6f2:	4659      	mov	r1, fp
 800e6f4:	463d      	mov	r5, r7
 800e6f6:	bfd4      	ite	le
 800e6f8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e6fc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e700:	4630      	mov	r0, r6
 800e702:	ee10 2a10 	vmov	r2, s0
 800e706:	460b      	mov	r3, r1
 800e708:	4629      	mov	r1, r5
 800e70a:	f7f2 f89f 	bl	800084c <__aeabi_ddiv>
 800e70e:	ec41 0b10 	vmov	d0, r0, r1
 800e712:	b003      	add	sp, #12
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e718 <__copybits>:
 800e718:	3901      	subs	r1, #1
 800e71a:	b510      	push	{r4, lr}
 800e71c:	1149      	asrs	r1, r1, #5
 800e71e:	6914      	ldr	r4, [r2, #16]
 800e720:	3101      	adds	r1, #1
 800e722:	f102 0314 	add.w	r3, r2, #20
 800e726:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e72a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e72e:	42a3      	cmp	r3, r4
 800e730:	4602      	mov	r2, r0
 800e732:	d303      	bcc.n	800e73c <__copybits+0x24>
 800e734:	2300      	movs	r3, #0
 800e736:	428a      	cmp	r2, r1
 800e738:	d305      	bcc.n	800e746 <__copybits+0x2e>
 800e73a:	bd10      	pop	{r4, pc}
 800e73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e740:	f840 2b04 	str.w	r2, [r0], #4
 800e744:	e7f3      	b.n	800e72e <__copybits+0x16>
 800e746:	f842 3b04 	str.w	r3, [r2], #4
 800e74a:	e7f4      	b.n	800e736 <__copybits+0x1e>

0800e74c <__any_on>:
 800e74c:	f100 0214 	add.w	r2, r0, #20
 800e750:	6900      	ldr	r0, [r0, #16]
 800e752:	114b      	asrs	r3, r1, #5
 800e754:	4298      	cmp	r0, r3
 800e756:	b510      	push	{r4, lr}
 800e758:	db11      	blt.n	800e77e <__any_on+0x32>
 800e75a:	dd0a      	ble.n	800e772 <__any_on+0x26>
 800e75c:	f011 011f 	ands.w	r1, r1, #31
 800e760:	d007      	beq.n	800e772 <__any_on+0x26>
 800e762:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e766:	fa24 f001 	lsr.w	r0, r4, r1
 800e76a:	fa00 f101 	lsl.w	r1, r0, r1
 800e76e:	428c      	cmp	r4, r1
 800e770:	d10b      	bne.n	800e78a <__any_on+0x3e>
 800e772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e776:	4293      	cmp	r3, r2
 800e778:	d803      	bhi.n	800e782 <__any_on+0x36>
 800e77a:	2000      	movs	r0, #0
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	4603      	mov	r3, r0
 800e780:	e7f7      	b.n	800e772 <__any_on+0x26>
 800e782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e786:	2900      	cmp	r1, #0
 800e788:	d0f5      	beq.n	800e776 <__any_on+0x2a>
 800e78a:	2001      	movs	r0, #1
 800e78c:	e7f6      	b.n	800e77c <__any_on+0x30>

0800e78e <_calloc_r>:
 800e78e:	b538      	push	{r3, r4, r5, lr}
 800e790:	fb02 f401 	mul.w	r4, r2, r1
 800e794:	4621      	mov	r1, r4
 800e796:	f000 f857 	bl	800e848 <_malloc_r>
 800e79a:	4605      	mov	r5, r0
 800e79c:	b118      	cbz	r0, 800e7a6 <_calloc_r+0x18>
 800e79e:	4622      	mov	r2, r4
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	f7fc ff66 	bl	800b672 <memset>
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e7ac <_free_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	2900      	cmp	r1, #0
 800e7b2:	d045      	beq.n	800e840 <_free_r+0x94>
 800e7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7b8:	1f0c      	subs	r4, r1, #4
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	bfb8      	it	lt
 800e7be:	18e4      	addlt	r4, r4, r3
 800e7c0:	f000 fa2a 	bl	800ec18 <__malloc_lock>
 800e7c4:	4a1f      	ldr	r2, [pc, #124]	; (800e844 <_free_r+0x98>)
 800e7c6:	6813      	ldr	r3, [r2, #0]
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	b933      	cbnz	r3, 800e7da <_free_r+0x2e>
 800e7cc:	6063      	str	r3, [r4, #4]
 800e7ce:	6014      	str	r4, [r2, #0]
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7d6:	f000 ba20 	b.w	800ec1a <__malloc_unlock>
 800e7da:	42a3      	cmp	r3, r4
 800e7dc:	d90c      	bls.n	800e7f8 <_free_r+0x4c>
 800e7de:	6821      	ldr	r1, [r4, #0]
 800e7e0:	1862      	adds	r2, r4, r1
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	bf04      	itt	eq
 800e7e6:	681a      	ldreq	r2, [r3, #0]
 800e7e8:	685b      	ldreq	r3, [r3, #4]
 800e7ea:	6063      	str	r3, [r4, #4]
 800e7ec:	bf04      	itt	eq
 800e7ee:	1852      	addeq	r2, r2, r1
 800e7f0:	6022      	streq	r2, [r4, #0]
 800e7f2:	6004      	str	r4, [r0, #0]
 800e7f4:	e7ec      	b.n	800e7d0 <_free_r+0x24>
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	b10a      	cbz	r2, 800e800 <_free_r+0x54>
 800e7fc:	42a2      	cmp	r2, r4
 800e7fe:	d9fa      	bls.n	800e7f6 <_free_r+0x4a>
 800e800:	6819      	ldr	r1, [r3, #0]
 800e802:	1858      	adds	r0, r3, r1
 800e804:	42a0      	cmp	r0, r4
 800e806:	d10b      	bne.n	800e820 <_free_r+0x74>
 800e808:	6820      	ldr	r0, [r4, #0]
 800e80a:	4401      	add	r1, r0
 800e80c:	1858      	adds	r0, r3, r1
 800e80e:	4282      	cmp	r2, r0
 800e810:	6019      	str	r1, [r3, #0]
 800e812:	d1dd      	bne.n	800e7d0 <_free_r+0x24>
 800e814:	6810      	ldr	r0, [r2, #0]
 800e816:	6852      	ldr	r2, [r2, #4]
 800e818:	605a      	str	r2, [r3, #4]
 800e81a:	4401      	add	r1, r0
 800e81c:	6019      	str	r1, [r3, #0]
 800e81e:	e7d7      	b.n	800e7d0 <_free_r+0x24>
 800e820:	d902      	bls.n	800e828 <_free_r+0x7c>
 800e822:	230c      	movs	r3, #12
 800e824:	602b      	str	r3, [r5, #0]
 800e826:	e7d3      	b.n	800e7d0 <_free_r+0x24>
 800e828:	6820      	ldr	r0, [r4, #0]
 800e82a:	1821      	adds	r1, r4, r0
 800e82c:	428a      	cmp	r2, r1
 800e82e:	bf04      	itt	eq
 800e830:	6811      	ldreq	r1, [r2, #0]
 800e832:	6852      	ldreq	r2, [r2, #4]
 800e834:	6062      	str	r2, [r4, #4]
 800e836:	bf04      	itt	eq
 800e838:	1809      	addeq	r1, r1, r0
 800e83a:	6021      	streq	r1, [r4, #0]
 800e83c:	605c      	str	r4, [r3, #4]
 800e83e:	e7c7      	b.n	800e7d0 <_free_r+0x24>
 800e840:	bd38      	pop	{r3, r4, r5, pc}
 800e842:	bf00      	nop
 800e844:	20000220 	.word	0x20000220

0800e848 <_malloc_r>:
 800e848:	b570      	push	{r4, r5, r6, lr}
 800e84a:	1ccd      	adds	r5, r1, #3
 800e84c:	f025 0503 	bic.w	r5, r5, #3
 800e850:	3508      	adds	r5, #8
 800e852:	2d0c      	cmp	r5, #12
 800e854:	bf38      	it	cc
 800e856:	250c      	movcc	r5, #12
 800e858:	2d00      	cmp	r5, #0
 800e85a:	4606      	mov	r6, r0
 800e85c:	db01      	blt.n	800e862 <_malloc_r+0x1a>
 800e85e:	42a9      	cmp	r1, r5
 800e860:	d903      	bls.n	800e86a <_malloc_r+0x22>
 800e862:	230c      	movs	r3, #12
 800e864:	6033      	str	r3, [r6, #0]
 800e866:	2000      	movs	r0, #0
 800e868:	bd70      	pop	{r4, r5, r6, pc}
 800e86a:	f000 f9d5 	bl	800ec18 <__malloc_lock>
 800e86e:	4a21      	ldr	r2, [pc, #132]	; (800e8f4 <_malloc_r+0xac>)
 800e870:	6814      	ldr	r4, [r2, #0]
 800e872:	4621      	mov	r1, r4
 800e874:	b991      	cbnz	r1, 800e89c <_malloc_r+0x54>
 800e876:	4c20      	ldr	r4, [pc, #128]	; (800e8f8 <_malloc_r+0xb0>)
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	b91b      	cbnz	r3, 800e884 <_malloc_r+0x3c>
 800e87c:	4630      	mov	r0, r6
 800e87e:	f000 f98f 	bl	800eba0 <_sbrk_r>
 800e882:	6020      	str	r0, [r4, #0]
 800e884:	4629      	mov	r1, r5
 800e886:	4630      	mov	r0, r6
 800e888:	f000 f98a 	bl	800eba0 <_sbrk_r>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d124      	bne.n	800e8da <_malloc_r+0x92>
 800e890:	230c      	movs	r3, #12
 800e892:	6033      	str	r3, [r6, #0]
 800e894:	4630      	mov	r0, r6
 800e896:	f000 f9c0 	bl	800ec1a <__malloc_unlock>
 800e89a:	e7e4      	b.n	800e866 <_malloc_r+0x1e>
 800e89c:	680b      	ldr	r3, [r1, #0]
 800e89e:	1b5b      	subs	r3, r3, r5
 800e8a0:	d418      	bmi.n	800e8d4 <_malloc_r+0x8c>
 800e8a2:	2b0b      	cmp	r3, #11
 800e8a4:	d90f      	bls.n	800e8c6 <_malloc_r+0x7e>
 800e8a6:	600b      	str	r3, [r1, #0]
 800e8a8:	50cd      	str	r5, [r1, r3]
 800e8aa:	18cc      	adds	r4, r1, r3
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f000 f9b4 	bl	800ec1a <__malloc_unlock>
 800e8b2:	f104 000b 	add.w	r0, r4, #11
 800e8b6:	1d23      	adds	r3, r4, #4
 800e8b8:	f020 0007 	bic.w	r0, r0, #7
 800e8bc:	1ac3      	subs	r3, r0, r3
 800e8be:	d0d3      	beq.n	800e868 <_malloc_r+0x20>
 800e8c0:	425a      	negs	r2, r3
 800e8c2:	50e2      	str	r2, [r4, r3]
 800e8c4:	e7d0      	b.n	800e868 <_malloc_r+0x20>
 800e8c6:	428c      	cmp	r4, r1
 800e8c8:	684b      	ldr	r3, [r1, #4]
 800e8ca:	bf16      	itet	ne
 800e8cc:	6063      	strne	r3, [r4, #4]
 800e8ce:	6013      	streq	r3, [r2, #0]
 800e8d0:	460c      	movne	r4, r1
 800e8d2:	e7eb      	b.n	800e8ac <_malloc_r+0x64>
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	6849      	ldr	r1, [r1, #4]
 800e8d8:	e7cc      	b.n	800e874 <_malloc_r+0x2c>
 800e8da:	1cc4      	adds	r4, r0, #3
 800e8dc:	f024 0403 	bic.w	r4, r4, #3
 800e8e0:	42a0      	cmp	r0, r4
 800e8e2:	d005      	beq.n	800e8f0 <_malloc_r+0xa8>
 800e8e4:	1a21      	subs	r1, r4, r0
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f000 f95a 	bl	800eba0 <_sbrk_r>
 800e8ec:	3001      	adds	r0, #1
 800e8ee:	d0cf      	beq.n	800e890 <_malloc_r+0x48>
 800e8f0:	6025      	str	r5, [r4, #0]
 800e8f2:	e7db      	b.n	800e8ac <_malloc_r+0x64>
 800e8f4:	20000220 	.word	0x20000220
 800e8f8:	20000224 	.word	0x20000224

0800e8fc <__ssputs_r>:
 800e8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e900:	688e      	ldr	r6, [r1, #8]
 800e902:	429e      	cmp	r6, r3
 800e904:	4682      	mov	sl, r0
 800e906:	460c      	mov	r4, r1
 800e908:	4690      	mov	r8, r2
 800e90a:	4699      	mov	r9, r3
 800e90c:	d837      	bhi.n	800e97e <__ssputs_r+0x82>
 800e90e:	898a      	ldrh	r2, [r1, #12]
 800e910:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e914:	d031      	beq.n	800e97a <__ssputs_r+0x7e>
 800e916:	6825      	ldr	r5, [r4, #0]
 800e918:	6909      	ldr	r1, [r1, #16]
 800e91a:	1a6f      	subs	r7, r5, r1
 800e91c:	6965      	ldr	r5, [r4, #20]
 800e91e:	2302      	movs	r3, #2
 800e920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e924:	fb95 f5f3 	sdiv	r5, r5, r3
 800e928:	f109 0301 	add.w	r3, r9, #1
 800e92c:	443b      	add	r3, r7
 800e92e:	429d      	cmp	r5, r3
 800e930:	bf38      	it	cc
 800e932:	461d      	movcc	r5, r3
 800e934:	0553      	lsls	r3, r2, #21
 800e936:	d530      	bpl.n	800e99a <__ssputs_r+0x9e>
 800e938:	4629      	mov	r1, r5
 800e93a:	f7ff ff85 	bl	800e848 <_malloc_r>
 800e93e:	4606      	mov	r6, r0
 800e940:	b950      	cbnz	r0, 800e958 <__ssputs_r+0x5c>
 800e942:	230c      	movs	r3, #12
 800e944:	f8ca 3000 	str.w	r3, [sl]
 800e948:	89a3      	ldrh	r3, [r4, #12]
 800e94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e94e:	81a3      	strh	r3, [r4, #12]
 800e950:	f04f 30ff 	mov.w	r0, #4294967295
 800e954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e958:	463a      	mov	r2, r7
 800e95a:	6921      	ldr	r1, [r4, #16]
 800e95c:	f7fc fe7e 	bl	800b65c <memcpy>
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e96a:	81a3      	strh	r3, [r4, #12]
 800e96c:	6126      	str	r6, [r4, #16]
 800e96e:	6165      	str	r5, [r4, #20]
 800e970:	443e      	add	r6, r7
 800e972:	1bed      	subs	r5, r5, r7
 800e974:	6026      	str	r6, [r4, #0]
 800e976:	60a5      	str	r5, [r4, #8]
 800e978:	464e      	mov	r6, r9
 800e97a:	454e      	cmp	r6, r9
 800e97c:	d900      	bls.n	800e980 <__ssputs_r+0x84>
 800e97e:	464e      	mov	r6, r9
 800e980:	4632      	mov	r2, r6
 800e982:	4641      	mov	r1, r8
 800e984:	6820      	ldr	r0, [r4, #0]
 800e986:	f000 f92e 	bl	800ebe6 <memmove>
 800e98a:	68a3      	ldr	r3, [r4, #8]
 800e98c:	1b9b      	subs	r3, r3, r6
 800e98e:	60a3      	str	r3, [r4, #8]
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	441e      	add	r6, r3
 800e994:	6026      	str	r6, [r4, #0]
 800e996:	2000      	movs	r0, #0
 800e998:	e7dc      	b.n	800e954 <__ssputs_r+0x58>
 800e99a:	462a      	mov	r2, r5
 800e99c:	f000 f93e 	bl	800ec1c <_realloc_r>
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d1e2      	bne.n	800e96c <__ssputs_r+0x70>
 800e9a6:	6921      	ldr	r1, [r4, #16]
 800e9a8:	4650      	mov	r0, sl
 800e9aa:	f7ff feff 	bl	800e7ac <_free_r>
 800e9ae:	e7c8      	b.n	800e942 <__ssputs_r+0x46>

0800e9b0 <_svfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	898b      	ldrh	r3, [r1, #12]
 800e9b8:	061f      	lsls	r7, r3, #24
 800e9ba:	b09d      	sub	sp, #116	; 0x74
 800e9bc:	4680      	mov	r8, r0
 800e9be:	460c      	mov	r4, r1
 800e9c0:	4616      	mov	r6, r2
 800e9c2:	d50f      	bpl.n	800e9e4 <_svfiprintf_r+0x34>
 800e9c4:	690b      	ldr	r3, [r1, #16]
 800e9c6:	b96b      	cbnz	r3, 800e9e4 <_svfiprintf_r+0x34>
 800e9c8:	2140      	movs	r1, #64	; 0x40
 800e9ca:	f7ff ff3d 	bl	800e848 <_malloc_r>
 800e9ce:	6020      	str	r0, [r4, #0]
 800e9d0:	6120      	str	r0, [r4, #16]
 800e9d2:	b928      	cbnz	r0, 800e9e0 <_svfiprintf_r+0x30>
 800e9d4:	230c      	movs	r3, #12
 800e9d6:	f8c8 3000 	str.w	r3, [r8]
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
 800e9de:	e0c8      	b.n	800eb72 <_svfiprintf_r+0x1c2>
 800e9e0:	2340      	movs	r3, #64	; 0x40
 800e9e2:	6163      	str	r3, [r4, #20]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e8:	2320      	movs	r3, #32
 800e9ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9ee:	2330      	movs	r3, #48	; 0x30
 800e9f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9f4:	9503      	str	r5, [sp, #12]
 800e9f6:	f04f 0b01 	mov.w	fp, #1
 800e9fa:	4637      	mov	r7, r6
 800e9fc:	463d      	mov	r5, r7
 800e9fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ea02:	b10b      	cbz	r3, 800ea08 <_svfiprintf_r+0x58>
 800ea04:	2b25      	cmp	r3, #37	; 0x25
 800ea06:	d13e      	bne.n	800ea86 <_svfiprintf_r+0xd6>
 800ea08:	ebb7 0a06 	subs.w	sl, r7, r6
 800ea0c:	d00b      	beq.n	800ea26 <_svfiprintf_r+0x76>
 800ea0e:	4653      	mov	r3, sl
 800ea10:	4632      	mov	r2, r6
 800ea12:	4621      	mov	r1, r4
 800ea14:	4640      	mov	r0, r8
 800ea16:	f7ff ff71 	bl	800e8fc <__ssputs_r>
 800ea1a:	3001      	adds	r0, #1
 800ea1c:	f000 80a4 	beq.w	800eb68 <_svfiprintf_r+0x1b8>
 800ea20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea22:	4453      	add	r3, sl
 800ea24:	9309      	str	r3, [sp, #36]	; 0x24
 800ea26:	783b      	ldrb	r3, [r7, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f000 809d 	beq.w	800eb68 <_svfiprintf_r+0x1b8>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f04f 32ff 	mov.w	r2, #4294967295
 800ea34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea38:	9304      	str	r3, [sp, #16]
 800ea3a:	9307      	str	r3, [sp, #28]
 800ea3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea40:	931a      	str	r3, [sp, #104]	; 0x68
 800ea42:	462f      	mov	r7, r5
 800ea44:	2205      	movs	r2, #5
 800ea46:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ea4a:	4850      	ldr	r0, [pc, #320]	; (800eb8c <_svfiprintf_r+0x1dc>)
 800ea4c:	f7f1 fbc0 	bl	80001d0 <memchr>
 800ea50:	9b04      	ldr	r3, [sp, #16]
 800ea52:	b9d0      	cbnz	r0, 800ea8a <_svfiprintf_r+0xda>
 800ea54:	06d9      	lsls	r1, r3, #27
 800ea56:	bf44      	itt	mi
 800ea58:	2220      	movmi	r2, #32
 800ea5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea5e:	071a      	lsls	r2, r3, #28
 800ea60:	bf44      	itt	mi
 800ea62:	222b      	movmi	r2, #43	; 0x2b
 800ea64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea68:	782a      	ldrb	r2, [r5, #0]
 800ea6a:	2a2a      	cmp	r2, #42	; 0x2a
 800ea6c:	d015      	beq.n	800ea9a <_svfiprintf_r+0xea>
 800ea6e:	9a07      	ldr	r2, [sp, #28]
 800ea70:	462f      	mov	r7, r5
 800ea72:	2000      	movs	r0, #0
 800ea74:	250a      	movs	r5, #10
 800ea76:	4639      	mov	r1, r7
 800ea78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea7c:	3b30      	subs	r3, #48	; 0x30
 800ea7e:	2b09      	cmp	r3, #9
 800ea80:	d94d      	bls.n	800eb1e <_svfiprintf_r+0x16e>
 800ea82:	b1b8      	cbz	r0, 800eab4 <_svfiprintf_r+0x104>
 800ea84:	e00f      	b.n	800eaa6 <_svfiprintf_r+0xf6>
 800ea86:	462f      	mov	r7, r5
 800ea88:	e7b8      	b.n	800e9fc <_svfiprintf_r+0x4c>
 800ea8a:	4a40      	ldr	r2, [pc, #256]	; (800eb8c <_svfiprintf_r+0x1dc>)
 800ea8c:	1a80      	subs	r0, r0, r2
 800ea8e:	fa0b f000 	lsl.w	r0, fp, r0
 800ea92:	4318      	orrs	r0, r3
 800ea94:	9004      	str	r0, [sp, #16]
 800ea96:	463d      	mov	r5, r7
 800ea98:	e7d3      	b.n	800ea42 <_svfiprintf_r+0x92>
 800ea9a:	9a03      	ldr	r2, [sp, #12]
 800ea9c:	1d11      	adds	r1, r2, #4
 800ea9e:	6812      	ldr	r2, [r2, #0]
 800eaa0:	9103      	str	r1, [sp, #12]
 800eaa2:	2a00      	cmp	r2, #0
 800eaa4:	db01      	blt.n	800eaaa <_svfiprintf_r+0xfa>
 800eaa6:	9207      	str	r2, [sp, #28]
 800eaa8:	e004      	b.n	800eab4 <_svfiprintf_r+0x104>
 800eaaa:	4252      	negs	r2, r2
 800eaac:	f043 0302 	orr.w	r3, r3, #2
 800eab0:	9207      	str	r2, [sp, #28]
 800eab2:	9304      	str	r3, [sp, #16]
 800eab4:	783b      	ldrb	r3, [r7, #0]
 800eab6:	2b2e      	cmp	r3, #46	; 0x2e
 800eab8:	d10c      	bne.n	800ead4 <_svfiprintf_r+0x124>
 800eaba:	787b      	ldrb	r3, [r7, #1]
 800eabc:	2b2a      	cmp	r3, #42	; 0x2a
 800eabe:	d133      	bne.n	800eb28 <_svfiprintf_r+0x178>
 800eac0:	9b03      	ldr	r3, [sp, #12]
 800eac2:	1d1a      	adds	r2, r3, #4
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	9203      	str	r2, [sp, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	bfb8      	it	lt
 800eacc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ead0:	3702      	adds	r7, #2
 800ead2:	9305      	str	r3, [sp, #20]
 800ead4:	4d2e      	ldr	r5, [pc, #184]	; (800eb90 <_svfiprintf_r+0x1e0>)
 800ead6:	7839      	ldrb	r1, [r7, #0]
 800ead8:	2203      	movs	r2, #3
 800eada:	4628      	mov	r0, r5
 800eadc:	f7f1 fb78 	bl	80001d0 <memchr>
 800eae0:	b138      	cbz	r0, 800eaf2 <_svfiprintf_r+0x142>
 800eae2:	2340      	movs	r3, #64	; 0x40
 800eae4:	1b40      	subs	r0, r0, r5
 800eae6:	fa03 f000 	lsl.w	r0, r3, r0
 800eaea:	9b04      	ldr	r3, [sp, #16]
 800eaec:	4303      	orrs	r3, r0
 800eaee:	3701      	adds	r7, #1
 800eaf0:	9304      	str	r3, [sp, #16]
 800eaf2:	7839      	ldrb	r1, [r7, #0]
 800eaf4:	4827      	ldr	r0, [pc, #156]	; (800eb94 <_svfiprintf_r+0x1e4>)
 800eaf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eafa:	2206      	movs	r2, #6
 800eafc:	1c7e      	adds	r6, r7, #1
 800eafe:	f7f1 fb67 	bl	80001d0 <memchr>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d038      	beq.n	800eb78 <_svfiprintf_r+0x1c8>
 800eb06:	4b24      	ldr	r3, [pc, #144]	; (800eb98 <_svfiprintf_r+0x1e8>)
 800eb08:	bb13      	cbnz	r3, 800eb50 <_svfiprintf_r+0x1a0>
 800eb0a:	9b03      	ldr	r3, [sp, #12]
 800eb0c:	3307      	adds	r3, #7
 800eb0e:	f023 0307 	bic.w	r3, r3, #7
 800eb12:	3308      	adds	r3, #8
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb18:	444b      	add	r3, r9
 800eb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb1c:	e76d      	b.n	800e9fa <_svfiprintf_r+0x4a>
 800eb1e:	fb05 3202 	mla	r2, r5, r2, r3
 800eb22:	2001      	movs	r0, #1
 800eb24:	460f      	mov	r7, r1
 800eb26:	e7a6      	b.n	800ea76 <_svfiprintf_r+0xc6>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	3701      	adds	r7, #1
 800eb2c:	9305      	str	r3, [sp, #20]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	250a      	movs	r5, #10
 800eb32:	4638      	mov	r0, r7
 800eb34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb38:	3a30      	subs	r2, #48	; 0x30
 800eb3a:	2a09      	cmp	r2, #9
 800eb3c:	d903      	bls.n	800eb46 <_svfiprintf_r+0x196>
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d0c8      	beq.n	800ead4 <_svfiprintf_r+0x124>
 800eb42:	9105      	str	r1, [sp, #20]
 800eb44:	e7c6      	b.n	800ead4 <_svfiprintf_r+0x124>
 800eb46:	fb05 2101 	mla	r1, r5, r1, r2
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	e7f0      	b.n	800eb32 <_svfiprintf_r+0x182>
 800eb50:	ab03      	add	r3, sp, #12
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	4622      	mov	r2, r4
 800eb56:	4b11      	ldr	r3, [pc, #68]	; (800eb9c <_svfiprintf_r+0x1ec>)
 800eb58:	a904      	add	r1, sp, #16
 800eb5a:	4640      	mov	r0, r8
 800eb5c:	f7fc fe26 	bl	800b7ac <_printf_float>
 800eb60:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eb64:	4681      	mov	r9, r0
 800eb66:	d1d6      	bne.n	800eb16 <_svfiprintf_r+0x166>
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	065b      	lsls	r3, r3, #25
 800eb6c:	f53f af35 	bmi.w	800e9da <_svfiprintf_r+0x2a>
 800eb70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb72:	b01d      	add	sp, #116	; 0x74
 800eb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb78:	ab03      	add	r3, sp, #12
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	4622      	mov	r2, r4
 800eb7e:	4b07      	ldr	r3, [pc, #28]	; (800eb9c <_svfiprintf_r+0x1ec>)
 800eb80:	a904      	add	r1, sp, #16
 800eb82:	4640      	mov	r0, r8
 800eb84:	f7fd f8c8 	bl	800bd18 <_printf_i>
 800eb88:	e7ea      	b.n	800eb60 <_svfiprintf_r+0x1b0>
 800eb8a:	bf00      	nop
 800eb8c:	080102bc 	.word	0x080102bc
 800eb90:	080102c2 	.word	0x080102c2
 800eb94:	080102c6 	.word	0x080102c6
 800eb98:	0800b7ad 	.word	0x0800b7ad
 800eb9c:	0800e8fd 	.word	0x0800e8fd

0800eba0 <_sbrk_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4c06      	ldr	r4, [pc, #24]	; (800ebbc <_sbrk_r+0x1c>)
 800eba4:	2300      	movs	r3, #0
 800eba6:	4605      	mov	r5, r0
 800eba8:	4608      	mov	r0, r1
 800ebaa:	6023      	str	r3, [r4, #0]
 800ebac:	f7f7 f8be 	bl	8005d2c <_sbrk>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_sbrk_r+0x1a>
 800ebb4:	6823      	ldr	r3, [r4, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_sbrk_r+0x1a>
 800ebb8:	602b      	str	r3, [r5, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	20000f2c 	.word	0x20000f2c

0800ebc0 <nanf>:
 800ebc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ebc8 <nanf+0x8>
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	7fc00000 	.word	0x7fc00000

0800ebcc <__ascii_wctomb>:
 800ebcc:	b149      	cbz	r1, 800ebe2 <__ascii_wctomb+0x16>
 800ebce:	2aff      	cmp	r2, #255	; 0xff
 800ebd0:	bf85      	ittet	hi
 800ebd2:	238a      	movhi	r3, #138	; 0x8a
 800ebd4:	6003      	strhi	r3, [r0, #0]
 800ebd6:	700a      	strbls	r2, [r1, #0]
 800ebd8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ebdc:	bf98      	it	ls
 800ebde:	2001      	movls	r0, #1
 800ebe0:	4770      	bx	lr
 800ebe2:	4608      	mov	r0, r1
 800ebe4:	4770      	bx	lr

0800ebe6 <memmove>:
 800ebe6:	4288      	cmp	r0, r1
 800ebe8:	b510      	push	{r4, lr}
 800ebea:	eb01 0302 	add.w	r3, r1, r2
 800ebee:	d807      	bhi.n	800ec00 <memmove+0x1a>
 800ebf0:	1e42      	subs	r2, r0, #1
 800ebf2:	4299      	cmp	r1, r3
 800ebf4:	d00a      	beq.n	800ec0c <memmove+0x26>
 800ebf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebfa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ebfe:	e7f8      	b.n	800ebf2 <memmove+0xc>
 800ec00:	4283      	cmp	r3, r0
 800ec02:	d9f5      	bls.n	800ebf0 <memmove+0xa>
 800ec04:	1881      	adds	r1, r0, r2
 800ec06:	1ad2      	subs	r2, r2, r3
 800ec08:	42d3      	cmn	r3, r2
 800ec0a:	d100      	bne.n	800ec0e <memmove+0x28>
 800ec0c:	bd10      	pop	{r4, pc}
 800ec0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ec16:	e7f7      	b.n	800ec08 <memmove+0x22>

0800ec18 <__malloc_lock>:
 800ec18:	4770      	bx	lr

0800ec1a <__malloc_unlock>:
 800ec1a:	4770      	bx	lr

0800ec1c <_realloc_r>:
 800ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1e:	4607      	mov	r7, r0
 800ec20:	4614      	mov	r4, r2
 800ec22:	460e      	mov	r6, r1
 800ec24:	b921      	cbnz	r1, 800ec30 <_realloc_r+0x14>
 800ec26:	4611      	mov	r1, r2
 800ec28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec2c:	f7ff be0c 	b.w	800e848 <_malloc_r>
 800ec30:	b922      	cbnz	r2, 800ec3c <_realloc_r+0x20>
 800ec32:	f7ff fdbb 	bl	800e7ac <_free_r>
 800ec36:	4625      	mov	r5, r4
 800ec38:	4628      	mov	r0, r5
 800ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec3c:	f000 f814 	bl	800ec68 <_malloc_usable_size_r>
 800ec40:	42a0      	cmp	r0, r4
 800ec42:	d20f      	bcs.n	800ec64 <_realloc_r+0x48>
 800ec44:	4621      	mov	r1, r4
 800ec46:	4638      	mov	r0, r7
 800ec48:	f7ff fdfe 	bl	800e848 <_malloc_r>
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d0f2      	beq.n	800ec38 <_realloc_r+0x1c>
 800ec52:	4631      	mov	r1, r6
 800ec54:	4622      	mov	r2, r4
 800ec56:	f7fc fd01 	bl	800b65c <memcpy>
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7ff fda5 	bl	800e7ac <_free_r>
 800ec62:	e7e9      	b.n	800ec38 <_realloc_r+0x1c>
 800ec64:	4635      	mov	r5, r6
 800ec66:	e7e7      	b.n	800ec38 <_realloc_r+0x1c>

0800ec68 <_malloc_usable_size_r>:
 800ec68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec6c:	1f18      	subs	r0, r3, #4
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	bfbc      	itt	lt
 800ec72:	580b      	ldrlt	r3, [r1, r0]
 800ec74:	18c0      	addlt	r0, r0, r3
 800ec76:	4770      	bx	lr

0800ec78 <cos>:
 800ec78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec7a:	ec51 0b10 	vmov	r0, r1, d0
 800ec7e:	4a1e      	ldr	r2, [pc, #120]	; (800ecf8 <cos+0x80>)
 800ec80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec84:	4293      	cmp	r3, r2
 800ec86:	dc06      	bgt.n	800ec96 <cos+0x1e>
 800ec88:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ecf0 <cos+0x78>
 800ec8c:	f000 fb80 	bl	800f390 <__kernel_cos>
 800ec90:	ec51 0b10 	vmov	r0, r1, d0
 800ec94:	e007      	b.n	800eca6 <cos+0x2e>
 800ec96:	4a19      	ldr	r2, [pc, #100]	; (800ecfc <cos+0x84>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	dd09      	ble.n	800ecb0 <cos+0x38>
 800ec9c:	ee10 2a10 	vmov	r2, s0
 800eca0:	460b      	mov	r3, r1
 800eca2:	f7f1 faf1 	bl	8000288 <__aeabi_dsub>
 800eca6:	ec41 0b10 	vmov	d0, r0, r1
 800ecaa:	b005      	add	sp, #20
 800ecac:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecb0:	4668      	mov	r0, sp
 800ecb2:	f000 f8c9 	bl	800ee48 <__ieee754_rem_pio2>
 800ecb6:	f000 0003 	and.w	r0, r0, #3
 800ecba:	2801      	cmp	r0, #1
 800ecbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecc0:	ed9d 0b00 	vldr	d0, [sp]
 800ecc4:	d007      	beq.n	800ecd6 <cos+0x5e>
 800ecc6:	2802      	cmp	r0, #2
 800ecc8:	d00e      	beq.n	800ece8 <cos+0x70>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0de      	beq.n	800ec8c <cos+0x14>
 800ecce:	2001      	movs	r0, #1
 800ecd0:	f000 ff66 	bl	800fba0 <__kernel_sin>
 800ecd4:	e7dc      	b.n	800ec90 <cos+0x18>
 800ecd6:	f000 ff63 	bl	800fba0 <__kernel_sin>
 800ecda:	ec53 2b10 	vmov	r2, r3, d0
 800ecde:	ee10 0a10 	vmov	r0, s0
 800ece2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ece6:	e7de      	b.n	800eca6 <cos+0x2e>
 800ece8:	f000 fb52 	bl	800f390 <__kernel_cos>
 800ecec:	e7f5      	b.n	800ecda <cos+0x62>
 800ecee:	bf00      	nop
	...
 800ecf8:	3fe921fb 	.word	0x3fe921fb
 800ecfc:	7fefffff 	.word	0x7fefffff

0800ed00 <sin>:
 800ed00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed02:	ec51 0b10 	vmov	r0, r1, d0
 800ed06:	4a20      	ldr	r2, [pc, #128]	; (800ed88 <sin+0x88>)
 800ed08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	dc07      	bgt.n	800ed20 <sin+0x20>
 800ed10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ed80 <sin+0x80>
 800ed14:	2000      	movs	r0, #0
 800ed16:	f000 ff43 	bl	800fba0 <__kernel_sin>
 800ed1a:	ec51 0b10 	vmov	r0, r1, d0
 800ed1e:	e007      	b.n	800ed30 <sin+0x30>
 800ed20:	4a1a      	ldr	r2, [pc, #104]	; (800ed8c <sin+0x8c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	dd09      	ble.n	800ed3a <sin+0x3a>
 800ed26:	ee10 2a10 	vmov	r2, s0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	f7f1 faac 	bl	8000288 <__aeabi_dsub>
 800ed30:	ec41 0b10 	vmov	d0, r0, r1
 800ed34:	b005      	add	sp, #20
 800ed36:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed3a:	4668      	mov	r0, sp
 800ed3c:	f000 f884 	bl	800ee48 <__ieee754_rem_pio2>
 800ed40:	f000 0003 	and.w	r0, r0, #3
 800ed44:	2801      	cmp	r0, #1
 800ed46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed4a:	ed9d 0b00 	vldr	d0, [sp]
 800ed4e:	d004      	beq.n	800ed5a <sin+0x5a>
 800ed50:	2802      	cmp	r0, #2
 800ed52:	d005      	beq.n	800ed60 <sin+0x60>
 800ed54:	b970      	cbnz	r0, 800ed74 <sin+0x74>
 800ed56:	2001      	movs	r0, #1
 800ed58:	e7dd      	b.n	800ed16 <sin+0x16>
 800ed5a:	f000 fb19 	bl	800f390 <__kernel_cos>
 800ed5e:	e7dc      	b.n	800ed1a <sin+0x1a>
 800ed60:	2001      	movs	r0, #1
 800ed62:	f000 ff1d 	bl	800fba0 <__kernel_sin>
 800ed66:	ec53 2b10 	vmov	r2, r3, d0
 800ed6a:	ee10 0a10 	vmov	r0, s0
 800ed6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ed72:	e7dd      	b.n	800ed30 <sin+0x30>
 800ed74:	f000 fb0c 	bl	800f390 <__kernel_cos>
 800ed78:	e7f5      	b.n	800ed66 <sin+0x66>
 800ed7a:	bf00      	nop
 800ed7c:	f3af 8000 	nop.w
	...
 800ed88:	3fe921fb 	.word	0x3fe921fb
 800ed8c:	7fefffff 	.word	0x7fefffff

0800ed90 <sqrt>:
 800ed90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed94:	ed2d 8b02 	vpush	{d8}
 800ed98:	b08b      	sub	sp, #44	; 0x2c
 800ed9a:	ec55 4b10 	vmov	r4, r5, d0
 800ed9e:	f000 fa45 	bl	800f22c <__ieee754_sqrt>
 800eda2:	4b26      	ldr	r3, [pc, #152]	; (800ee3c <sqrt+0xac>)
 800eda4:	eeb0 8a40 	vmov.f32	s16, s0
 800eda8:	eef0 8a60 	vmov.f32	s17, s1
 800edac:	f993 6000 	ldrsb.w	r6, [r3]
 800edb0:	1c73      	adds	r3, r6, #1
 800edb2:	d02a      	beq.n	800ee0a <sqrt+0x7a>
 800edb4:	4622      	mov	r2, r4
 800edb6:	462b      	mov	r3, r5
 800edb8:	4620      	mov	r0, r4
 800edba:	4629      	mov	r1, r5
 800edbc:	f7f1 feb6 	bl	8000b2c <__aeabi_dcmpun>
 800edc0:	4607      	mov	r7, r0
 800edc2:	bb10      	cbnz	r0, 800ee0a <sqrt+0x7a>
 800edc4:	f04f 0800 	mov.w	r8, #0
 800edc8:	f04f 0900 	mov.w	r9, #0
 800edcc:	4642      	mov	r2, r8
 800edce:	464b      	mov	r3, r9
 800edd0:	4620      	mov	r0, r4
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7f1 fe82 	bl	8000adc <__aeabi_dcmplt>
 800edd8:	b1b8      	cbz	r0, 800ee0a <sqrt+0x7a>
 800edda:	2301      	movs	r3, #1
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	4b18      	ldr	r3, [pc, #96]	; (800ee40 <sqrt+0xb0>)
 800ede0:	9301      	str	r3, [sp, #4]
 800ede2:	9708      	str	r7, [sp, #32]
 800ede4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ede8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800edec:	b9b6      	cbnz	r6, 800ee1c <sqrt+0x8c>
 800edee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800edf2:	4668      	mov	r0, sp
 800edf4:	f001 f81c 	bl	800fe30 <matherr>
 800edf8:	b1d0      	cbz	r0, 800ee30 <sqrt+0xa0>
 800edfa:	9b08      	ldr	r3, [sp, #32]
 800edfc:	b11b      	cbz	r3, 800ee06 <sqrt+0x76>
 800edfe:	f7fc fc03 	bl	800b608 <__errno>
 800ee02:	9b08      	ldr	r3, [sp, #32]
 800ee04:	6003      	str	r3, [r0, #0]
 800ee06:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ee0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee0e:	eef0 0a68 	vmov.f32	s1, s17
 800ee12:	b00b      	add	sp, #44	; 0x2c
 800ee14:	ecbd 8b02 	vpop	{d8}
 800ee18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee1c:	4642      	mov	r2, r8
 800ee1e:	464b      	mov	r3, r9
 800ee20:	4640      	mov	r0, r8
 800ee22:	4649      	mov	r1, r9
 800ee24:	f7f1 fd12 	bl	800084c <__aeabi_ddiv>
 800ee28:	2e02      	cmp	r6, #2
 800ee2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee2e:	d1e0      	bne.n	800edf2 <sqrt+0x62>
 800ee30:	f7fc fbea 	bl	800b608 <__errno>
 800ee34:	2321      	movs	r3, #33	; 0x21
 800ee36:	6003      	str	r3, [r0, #0]
 800ee38:	e7df      	b.n	800edfa <sqrt+0x6a>
 800ee3a:	bf00      	nop
 800ee3c:	200001dc 	.word	0x200001dc
 800ee40:	080103ce 	.word	0x080103ce
 800ee44:	00000000 	.word	0x00000000

0800ee48 <__ieee754_rem_pio2>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	ec57 6b10 	vmov	r6, r7, d0
 800ee50:	4bc3      	ldr	r3, [pc, #780]	; (800f160 <__ieee754_rem_pio2+0x318>)
 800ee52:	b08d      	sub	sp, #52	; 0x34
 800ee54:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ee58:	4598      	cmp	r8, r3
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	9704      	str	r7, [sp, #16]
 800ee5e:	dc07      	bgt.n	800ee70 <__ieee754_rem_pio2+0x28>
 800ee60:	2200      	movs	r2, #0
 800ee62:	2300      	movs	r3, #0
 800ee64:	ed84 0b00 	vstr	d0, [r4]
 800ee68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ee6c:	2500      	movs	r5, #0
 800ee6e:	e027      	b.n	800eec0 <__ieee754_rem_pio2+0x78>
 800ee70:	4bbc      	ldr	r3, [pc, #752]	; (800f164 <__ieee754_rem_pio2+0x31c>)
 800ee72:	4598      	cmp	r8, r3
 800ee74:	dc75      	bgt.n	800ef62 <__ieee754_rem_pio2+0x11a>
 800ee76:	9b04      	ldr	r3, [sp, #16]
 800ee78:	4dbb      	ldr	r5, [pc, #748]	; (800f168 <__ieee754_rem_pio2+0x320>)
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	ee10 0a10 	vmov	r0, s0
 800ee80:	a3a9      	add	r3, pc, #676	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2e0>)
 800ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee86:	4639      	mov	r1, r7
 800ee88:	dd36      	ble.n	800eef8 <__ieee754_rem_pio2+0xb0>
 800ee8a:	f7f1 f9fd 	bl	8000288 <__aeabi_dsub>
 800ee8e:	45a8      	cmp	r8, r5
 800ee90:	4606      	mov	r6, r0
 800ee92:	460f      	mov	r7, r1
 800ee94:	d018      	beq.n	800eec8 <__ieee754_rem_pio2+0x80>
 800ee96:	a3a6      	add	r3, pc, #664	; (adr r3, 800f130 <__ieee754_rem_pio2+0x2e8>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	f7f1 f9f4 	bl	8000288 <__aeabi_dsub>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	e9c4 2300 	strd	r2, r3, [r4]
 800eea8:	4630      	mov	r0, r6
 800eeaa:	4639      	mov	r1, r7
 800eeac:	f7f1 f9ec 	bl	8000288 <__aeabi_dsub>
 800eeb0:	a39f      	add	r3, pc, #636	; (adr r3, 800f130 <__ieee754_rem_pio2+0x2e8>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 f9e7 	bl	8000288 <__aeabi_dsub>
 800eeba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eebe:	2501      	movs	r5, #1
 800eec0:	4628      	mov	r0, r5
 800eec2:	b00d      	add	sp, #52	; 0x34
 800eec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec8:	a39b      	add	r3, pc, #620	; (adr r3, 800f138 <__ieee754_rem_pio2+0x2f0>)
 800eeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eece:	f7f1 f9db 	bl	8000288 <__aeabi_dsub>
 800eed2:	a39b      	add	r3, pc, #620	; (adr r3, 800f140 <__ieee754_rem_pio2+0x2f8>)
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	4606      	mov	r6, r0
 800eeda:	460f      	mov	r7, r1
 800eedc:	f7f1 f9d4 	bl	8000288 <__aeabi_dsub>
 800eee0:	4602      	mov	r2, r0
 800eee2:	460b      	mov	r3, r1
 800eee4:	e9c4 2300 	strd	r2, r3, [r4]
 800eee8:	4630      	mov	r0, r6
 800eeea:	4639      	mov	r1, r7
 800eeec:	f7f1 f9cc 	bl	8000288 <__aeabi_dsub>
 800eef0:	a393      	add	r3, pc, #588	; (adr r3, 800f140 <__ieee754_rem_pio2+0x2f8>)
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	e7de      	b.n	800eeb6 <__ieee754_rem_pio2+0x6e>
 800eef8:	f7f1 f9c8 	bl	800028c <__adddf3>
 800eefc:	45a8      	cmp	r8, r5
 800eefe:	4606      	mov	r6, r0
 800ef00:	460f      	mov	r7, r1
 800ef02:	d016      	beq.n	800ef32 <__ieee754_rem_pio2+0xea>
 800ef04:	a38a      	add	r3, pc, #552	; (adr r3, 800f130 <__ieee754_rem_pio2+0x2e8>)
 800ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0a:	f7f1 f9bf 	bl	800028c <__adddf3>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	e9c4 2300 	strd	r2, r3, [r4]
 800ef16:	4630      	mov	r0, r6
 800ef18:	4639      	mov	r1, r7
 800ef1a:	f7f1 f9b5 	bl	8000288 <__aeabi_dsub>
 800ef1e:	a384      	add	r3, pc, #528	; (adr r3, 800f130 <__ieee754_rem_pio2+0x2e8>)
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	f7f1 f9b2 	bl	800028c <__adddf3>
 800ef28:	f04f 35ff 	mov.w	r5, #4294967295
 800ef2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef30:	e7c6      	b.n	800eec0 <__ieee754_rem_pio2+0x78>
 800ef32:	a381      	add	r3, pc, #516	; (adr r3, 800f138 <__ieee754_rem_pio2+0x2f0>)
 800ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef38:	f7f1 f9a8 	bl	800028c <__adddf3>
 800ef3c:	a380      	add	r3, pc, #512	; (adr r3, 800f140 <__ieee754_rem_pio2+0x2f8>)
 800ef3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef42:	4606      	mov	r6, r0
 800ef44:	460f      	mov	r7, r1
 800ef46:	f7f1 f9a1 	bl	800028c <__adddf3>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	e9c4 2300 	strd	r2, r3, [r4]
 800ef52:	4630      	mov	r0, r6
 800ef54:	4639      	mov	r1, r7
 800ef56:	f7f1 f997 	bl	8000288 <__aeabi_dsub>
 800ef5a:	a379      	add	r3, pc, #484	; (adr r3, 800f140 <__ieee754_rem_pio2+0x2f8>)
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	e7e0      	b.n	800ef24 <__ieee754_rem_pio2+0xdc>
 800ef62:	4b82      	ldr	r3, [pc, #520]	; (800f16c <__ieee754_rem_pio2+0x324>)
 800ef64:	4598      	cmp	r8, r3
 800ef66:	f300 80d0 	bgt.w	800f10a <__ieee754_rem_pio2+0x2c2>
 800ef6a:	f000 fed3 	bl	800fd14 <fabs>
 800ef6e:	ec57 6b10 	vmov	r6, r7, d0
 800ef72:	ee10 0a10 	vmov	r0, s0
 800ef76:	a374      	add	r3, pc, #464	; (adr r3, 800f148 <__ieee754_rem_pio2+0x300>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	4639      	mov	r1, r7
 800ef7e:	f7f1 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ef82:	2200      	movs	r2, #0
 800ef84:	4b7a      	ldr	r3, [pc, #488]	; (800f170 <__ieee754_rem_pio2+0x328>)
 800ef86:	f7f1 f981 	bl	800028c <__adddf3>
 800ef8a:	f7f1 fde5 	bl	8000b58 <__aeabi_d2iz>
 800ef8e:	4605      	mov	r5, r0
 800ef90:	f7f1 fac8 	bl	8000524 <__aeabi_i2d>
 800ef94:	a364      	add	r3, pc, #400	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2e0>)
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef9e:	f7f1 fb2b 	bl	80005f8 <__aeabi_dmul>
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
 800efa6:	4630      	mov	r0, r6
 800efa8:	4639      	mov	r1, r7
 800efaa:	f7f1 f96d 	bl	8000288 <__aeabi_dsub>
 800efae:	a360      	add	r3, pc, #384	; (adr r3, 800f130 <__ieee754_rem_pio2+0x2e8>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	4682      	mov	sl, r0
 800efb6:	468b      	mov	fp, r1
 800efb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efbc:	f7f1 fb1c 	bl	80005f8 <__aeabi_dmul>
 800efc0:	2d1f      	cmp	r5, #31
 800efc2:	4606      	mov	r6, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	dc0c      	bgt.n	800efe2 <__ieee754_rem_pio2+0x19a>
 800efc8:	1e6a      	subs	r2, r5, #1
 800efca:	4b6a      	ldr	r3, [pc, #424]	; (800f174 <__ieee754_rem_pio2+0x32c>)
 800efcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efd0:	4543      	cmp	r3, r8
 800efd2:	d006      	beq.n	800efe2 <__ieee754_rem_pio2+0x19a>
 800efd4:	4632      	mov	r2, r6
 800efd6:	463b      	mov	r3, r7
 800efd8:	4650      	mov	r0, sl
 800efda:	4659      	mov	r1, fp
 800efdc:	f7f1 f954 	bl	8000288 <__aeabi_dsub>
 800efe0:	e00e      	b.n	800f000 <__ieee754_rem_pio2+0x1b8>
 800efe2:	4632      	mov	r2, r6
 800efe4:	463b      	mov	r3, r7
 800efe6:	4650      	mov	r0, sl
 800efe8:	4659      	mov	r1, fp
 800efea:	f7f1 f94d 	bl	8000288 <__aeabi_dsub>
 800efee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eff2:	9305      	str	r3, [sp, #20]
 800eff4:	9a05      	ldr	r2, [sp, #20]
 800eff6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	2b10      	cmp	r3, #16
 800effe:	dc02      	bgt.n	800f006 <__ieee754_rem_pio2+0x1be>
 800f000:	e9c4 0100 	strd	r0, r1, [r4]
 800f004:	e039      	b.n	800f07a <__ieee754_rem_pio2+0x232>
 800f006:	a34c      	add	r3, pc, #304	; (adr r3, 800f138 <__ieee754_rem_pio2+0x2f0>)
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f010:	f7f1 faf2 	bl	80005f8 <__aeabi_dmul>
 800f014:	4606      	mov	r6, r0
 800f016:	460f      	mov	r7, r1
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	4650      	mov	r0, sl
 800f01e:	4659      	mov	r1, fp
 800f020:	f7f1 f932 	bl	8000288 <__aeabi_dsub>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	4680      	mov	r8, r0
 800f02a:	4689      	mov	r9, r1
 800f02c:	4650      	mov	r0, sl
 800f02e:	4659      	mov	r1, fp
 800f030:	f7f1 f92a 	bl	8000288 <__aeabi_dsub>
 800f034:	4632      	mov	r2, r6
 800f036:	463b      	mov	r3, r7
 800f038:	f7f1 f926 	bl	8000288 <__aeabi_dsub>
 800f03c:	a340      	add	r3, pc, #256	; (adr r3, 800f140 <__ieee754_rem_pio2+0x2f8>)
 800f03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f042:	4606      	mov	r6, r0
 800f044:	460f      	mov	r7, r1
 800f046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f04a:	f7f1 fad5 	bl	80005f8 <__aeabi_dmul>
 800f04e:	4632      	mov	r2, r6
 800f050:	463b      	mov	r3, r7
 800f052:	f7f1 f919 	bl	8000288 <__aeabi_dsub>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4606      	mov	r6, r0
 800f05c:	460f      	mov	r7, r1
 800f05e:	4640      	mov	r0, r8
 800f060:	4649      	mov	r1, r9
 800f062:	f7f1 f911 	bl	8000288 <__aeabi_dsub>
 800f066:	9a05      	ldr	r2, [sp, #20]
 800f068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	2b31      	cmp	r3, #49	; 0x31
 800f070:	dc20      	bgt.n	800f0b4 <__ieee754_rem_pio2+0x26c>
 800f072:	e9c4 0100 	strd	r0, r1, [r4]
 800f076:	46c2      	mov	sl, r8
 800f078:	46cb      	mov	fp, r9
 800f07a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f07e:	4650      	mov	r0, sl
 800f080:	4642      	mov	r2, r8
 800f082:	464b      	mov	r3, r9
 800f084:	4659      	mov	r1, fp
 800f086:	f7f1 f8ff 	bl	8000288 <__aeabi_dsub>
 800f08a:	463b      	mov	r3, r7
 800f08c:	4632      	mov	r2, r6
 800f08e:	f7f1 f8fb 	bl	8000288 <__aeabi_dsub>
 800f092:	9b04      	ldr	r3, [sp, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f09a:	f6bf af11 	bge.w	800eec0 <__ieee754_rem_pio2+0x78>
 800f09e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f0a2:	6063      	str	r3, [r4, #4]
 800f0a4:	f8c4 8000 	str.w	r8, [r4]
 800f0a8:	60a0      	str	r0, [r4, #8]
 800f0aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0ae:	60e3      	str	r3, [r4, #12]
 800f0b0:	426d      	negs	r5, r5
 800f0b2:	e705      	b.n	800eec0 <__ieee754_rem_pio2+0x78>
 800f0b4:	a326      	add	r3, pc, #152	; (adr r3, 800f150 <__ieee754_rem_pio2+0x308>)
 800f0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0be:	f7f1 fa9b 	bl	80005f8 <__aeabi_dmul>
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	460f      	mov	r7, r1
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7f1 f8db 	bl	8000288 <__aeabi_dsub>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	4682      	mov	sl, r0
 800f0d8:	468b      	mov	fp, r1
 800f0da:	4640      	mov	r0, r8
 800f0dc:	4649      	mov	r1, r9
 800f0de:	f7f1 f8d3 	bl	8000288 <__aeabi_dsub>
 800f0e2:	4632      	mov	r2, r6
 800f0e4:	463b      	mov	r3, r7
 800f0e6:	f7f1 f8cf 	bl	8000288 <__aeabi_dsub>
 800f0ea:	a31b      	add	r3, pc, #108	; (adr r3, 800f158 <__ieee754_rem_pio2+0x310>)
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	460f      	mov	r7, r1
 800f0f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0f8:	f7f1 fa7e 	bl	80005f8 <__aeabi_dmul>
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	463b      	mov	r3, r7
 800f100:	f7f1 f8c2 	bl	8000288 <__aeabi_dsub>
 800f104:	4606      	mov	r6, r0
 800f106:	460f      	mov	r7, r1
 800f108:	e764      	b.n	800efd4 <__ieee754_rem_pio2+0x18c>
 800f10a:	4b1b      	ldr	r3, [pc, #108]	; (800f178 <__ieee754_rem_pio2+0x330>)
 800f10c:	4598      	cmp	r8, r3
 800f10e:	dd35      	ble.n	800f17c <__ieee754_rem_pio2+0x334>
 800f110:	ee10 2a10 	vmov	r2, s0
 800f114:	463b      	mov	r3, r7
 800f116:	4630      	mov	r0, r6
 800f118:	4639      	mov	r1, r7
 800f11a:	f7f1 f8b5 	bl	8000288 <__aeabi_dsub>
 800f11e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f122:	e9c4 0100 	strd	r0, r1, [r4]
 800f126:	e6a1      	b.n	800ee6c <__ieee754_rem_pio2+0x24>
 800f128:	54400000 	.word	0x54400000
 800f12c:	3ff921fb 	.word	0x3ff921fb
 800f130:	1a626331 	.word	0x1a626331
 800f134:	3dd0b461 	.word	0x3dd0b461
 800f138:	1a600000 	.word	0x1a600000
 800f13c:	3dd0b461 	.word	0x3dd0b461
 800f140:	2e037073 	.word	0x2e037073
 800f144:	3ba3198a 	.word	0x3ba3198a
 800f148:	6dc9c883 	.word	0x6dc9c883
 800f14c:	3fe45f30 	.word	0x3fe45f30
 800f150:	2e000000 	.word	0x2e000000
 800f154:	3ba3198a 	.word	0x3ba3198a
 800f158:	252049c1 	.word	0x252049c1
 800f15c:	397b839a 	.word	0x397b839a
 800f160:	3fe921fb 	.word	0x3fe921fb
 800f164:	4002d97b 	.word	0x4002d97b
 800f168:	3ff921fb 	.word	0x3ff921fb
 800f16c:	413921fb 	.word	0x413921fb
 800f170:	3fe00000 	.word	0x3fe00000
 800f174:	080103d4 	.word	0x080103d4
 800f178:	7fefffff 	.word	0x7fefffff
 800f17c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f180:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800f184:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f188:	4630      	mov	r0, r6
 800f18a:	460f      	mov	r7, r1
 800f18c:	f7f1 fce4 	bl	8000b58 <__aeabi_d2iz>
 800f190:	f7f1 f9c8 	bl	8000524 <__aeabi_i2d>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	4630      	mov	r0, r6
 800f19a:	4639      	mov	r1, r7
 800f19c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f1a0:	f7f1 f872 	bl	8000288 <__aeabi_dsub>
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	4b1f      	ldr	r3, [pc, #124]	; (800f224 <__ieee754_rem_pio2+0x3dc>)
 800f1a8:	f7f1 fa26 	bl	80005f8 <__aeabi_dmul>
 800f1ac:	460f      	mov	r7, r1
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	f7f1 fcd2 	bl	8000b58 <__aeabi_d2iz>
 800f1b4:	f7f1 f9b6 	bl	8000524 <__aeabi_i2d>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	460b      	mov	r3, r1
 800f1bc:	4630      	mov	r0, r6
 800f1be:	4639      	mov	r1, r7
 800f1c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f1c4:	f7f1 f860 	bl	8000288 <__aeabi_dsub>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	4b16      	ldr	r3, [pc, #88]	; (800f224 <__ieee754_rem_pio2+0x3dc>)
 800f1cc:	f7f1 fa14 	bl	80005f8 <__aeabi_dmul>
 800f1d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f1d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800f1d8:	f04f 0803 	mov.w	r8, #3
 800f1dc:	2600      	movs	r6, #0
 800f1de:	2700      	movs	r7, #0
 800f1e0:	4632      	mov	r2, r6
 800f1e2:	463b      	mov	r3, r7
 800f1e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f1e8:	f108 3aff 	add.w	sl, r8, #4294967295
 800f1ec:	f7f1 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1f0:	b9b0      	cbnz	r0, 800f220 <__ieee754_rem_pio2+0x3d8>
 800f1f2:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <__ieee754_rem_pio2+0x3e0>)
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	2302      	movs	r3, #2
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	4643      	mov	r3, r8
 800f1fe:	4621      	mov	r1, r4
 800f200:	a806      	add	r0, sp, #24
 800f202:	f000 f98d 	bl	800f520 <__kernel_rem_pio2>
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	4605      	mov	r5, r0
 800f20c:	f6bf ae58 	bge.w	800eec0 <__ieee754_rem_pio2+0x78>
 800f210:	6863      	ldr	r3, [r4, #4]
 800f212:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f216:	6063      	str	r3, [r4, #4]
 800f218:	68e3      	ldr	r3, [r4, #12]
 800f21a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f21e:	e746      	b.n	800f0ae <__ieee754_rem_pio2+0x266>
 800f220:	46d0      	mov	r8, sl
 800f222:	e7dd      	b.n	800f1e0 <__ieee754_rem_pio2+0x398>
 800f224:	41700000 	.word	0x41700000
 800f228:	08010454 	.word	0x08010454

0800f22c <__ieee754_sqrt>:
 800f22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f230:	4955      	ldr	r1, [pc, #340]	; (800f388 <__ieee754_sqrt+0x15c>)
 800f232:	ec55 4b10 	vmov	r4, r5, d0
 800f236:	43a9      	bics	r1, r5
 800f238:	462b      	mov	r3, r5
 800f23a:	462a      	mov	r2, r5
 800f23c:	d112      	bne.n	800f264 <__ieee754_sqrt+0x38>
 800f23e:	ee10 2a10 	vmov	r2, s0
 800f242:	ee10 0a10 	vmov	r0, s0
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 f9d6 	bl	80005f8 <__aeabi_dmul>
 800f24c:	4602      	mov	r2, r0
 800f24e:	460b      	mov	r3, r1
 800f250:	4620      	mov	r0, r4
 800f252:	4629      	mov	r1, r5
 800f254:	f7f1 f81a 	bl	800028c <__adddf3>
 800f258:	4604      	mov	r4, r0
 800f25a:	460d      	mov	r5, r1
 800f25c:	ec45 4b10 	vmov	d0, r4, r5
 800f260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f264:	2d00      	cmp	r5, #0
 800f266:	ee10 0a10 	vmov	r0, s0
 800f26a:	4621      	mov	r1, r4
 800f26c:	dc0f      	bgt.n	800f28e <__ieee754_sqrt+0x62>
 800f26e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f272:	4330      	orrs	r0, r6
 800f274:	d0f2      	beq.n	800f25c <__ieee754_sqrt+0x30>
 800f276:	b155      	cbz	r5, 800f28e <__ieee754_sqrt+0x62>
 800f278:	ee10 2a10 	vmov	r2, s0
 800f27c:	4620      	mov	r0, r4
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 f802 	bl	8000288 <__aeabi_dsub>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	f7f1 fae0 	bl	800084c <__aeabi_ddiv>
 800f28c:	e7e4      	b.n	800f258 <__ieee754_sqrt+0x2c>
 800f28e:	151b      	asrs	r3, r3, #20
 800f290:	d073      	beq.n	800f37a <__ieee754_sqrt+0x14e>
 800f292:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f296:	07dd      	lsls	r5, r3, #31
 800f298:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f29c:	bf48      	it	mi
 800f29e:	0fc8      	lsrmi	r0, r1, #31
 800f2a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f2a4:	bf44      	itt	mi
 800f2a6:	0049      	lslmi	r1, r1, #1
 800f2a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f2ac:	2500      	movs	r5, #0
 800f2ae:	1058      	asrs	r0, r3, #1
 800f2b0:	0fcb      	lsrs	r3, r1, #31
 800f2b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f2b6:	0049      	lsls	r1, r1, #1
 800f2b8:	2316      	movs	r3, #22
 800f2ba:	462c      	mov	r4, r5
 800f2bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f2c0:	19a7      	adds	r7, r4, r6
 800f2c2:	4297      	cmp	r7, r2
 800f2c4:	bfde      	ittt	le
 800f2c6:	19bc      	addle	r4, r7, r6
 800f2c8:	1bd2      	suble	r2, r2, r7
 800f2ca:	19ad      	addle	r5, r5, r6
 800f2cc:	0fcf      	lsrs	r7, r1, #31
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f2d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f2d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f2dc:	d1f0      	bne.n	800f2c0 <__ieee754_sqrt+0x94>
 800f2de:	f04f 0c20 	mov.w	ip, #32
 800f2e2:	469e      	mov	lr, r3
 800f2e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f2e8:	42a2      	cmp	r2, r4
 800f2ea:	eb06 070e 	add.w	r7, r6, lr
 800f2ee:	dc02      	bgt.n	800f2f6 <__ieee754_sqrt+0xca>
 800f2f0:	d112      	bne.n	800f318 <__ieee754_sqrt+0xec>
 800f2f2:	428f      	cmp	r7, r1
 800f2f4:	d810      	bhi.n	800f318 <__ieee754_sqrt+0xec>
 800f2f6:	2f00      	cmp	r7, #0
 800f2f8:	eb07 0e06 	add.w	lr, r7, r6
 800f2fc:	da42      	bge.n	800f384 <__ieee754_sqrt+0x158>
 800f2fe:	f1be 0f00 	cmp.w	lr, #0
 800f302:	db3f      	blt.n	800f384 <__ieee754_sqrt+0x158>
 800f304:	f104 0801 	add.w	r8, r4, #1
 800f308:	1b12      	subs	r2, r2, r4
 800f30a:	428f      	cmp	r7, r1
 800f30c:	bf88      	it	hi
 800f30e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f312:	1bc9      	subs	r1, r1, r7
 800f314:	4433      	add	r3, r6
 800f316:	4644      	mov	r4, r8
 800f318:	0052      	lsls	r2, r2, #1
 800f31a:	f1bc 0c01 	subs.w	ip, ip, #1
 800f31e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f322:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f326:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f32a:	d1dd      	bne.n	800f2e8 <__ieee754_sqrt+0xbc>
 800f32c:	430a      	orrs	r2, r1
 800f32e:	d006      	beq.n	800f33e <__ieee754_sqrt+0x112>
 800f330:	1c5c      	adds	r4, r3, #1
 800f332:	bf13      	iteet	ne
 800f334:	3301      	addne	r3, #1
 800f336:	3501      	addeq	r5, #1
 800f338:	4663      	moveq	r3, ip
 800f33a:	f023 0301 	bicne.w	r3, r3, #1
 800f33e:	106a      	asrs	r2, r5, #1
 800f340:	085b      	lsrs	r3, r3, #1
 800f342:	07e9      	lsls	r1, r5, #31
 800f344:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f348:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f34c:	bf48      	it	mi
 800f34e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f352:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f356:	461c      	mov	r4, r3
 800f358:	e780      	b.n	800f25c <__ieee754_sqrt+0x30>
 800f35a:	0aca      	lsrs	r2, r1, #11
 800f35c:	3815      	subs	r0, #21
 800f35e:	0549      	lsls	r1, r1, #21
 800f360:	2a00      	cmp	r2, #0
 800f362:	d0fa      	beq.n	800f35a <__ieee754_sqrt+0x12e>
 800f364:	02d6      	lsls	r6, r2, #11
 800f366:	d50a      	bpl.n	800f37e <__ieee754_sqrt+0x152>
 800f368:	f1c3 0420 	rsb	r4, r3, #32
 800f36c:	fa21 f404 	lsr.w	r4, r1, r4
 800f370:	1e5d      	subs	r5, r3, #1
 800f372:	4099      	lsls	r1, r3
 800f374:	4322      	orrs	r2, r4
 800f376:	1b43      	subs	r3, r0, r5
 800f378:	e78b      	b.n	800f292 <__ieee754_sqrt+0x66>
 800f37a:	4618      	mov	r0, r3
 800f37c:	e7f0      	b.n	800f360 <__ieee754_sqrt+0x134>
 800f37e:	0052      	lsls	r2, r2, #1
 800f380:	3301      	adds	r3, #1
 800f382:	e7ef      	b.n	800f364 <__ieee754_sqrt+0x138>
 800f384:	46a0      	mov	r8, r4
 800f386:	e7bf      	b.n	800f308 <__ieee754_sqrt+0xdc>
 800f388:	7ff00000 	.word	0x7ff00000
 800f38c:	00000000 	.word	0x00000000

0800f390 <__kernel_cos>:
 800f390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	ec59 8b10 	vmov	r8, r9, d0
 800f398:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800f39c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800f3a0:	ed2d 8b02 	vpush	{d8}
 800f3a4:	eeb0 8a41 	vmov.f32	s16, s2
 800f3a8:	eef0 8a61 	vmov.f32	s17, s3
 800f3ac:	da07      	bge.n	800f3be <__kernel_cos+0x2e>
 800f3ae:	ee10 0a10 	vmov	r0, s0
 800f3b2:	4649      	mov	r1, r9
 800f3b4:	f7f1 fbd0 	bl	8000b58 <__aeabi_d2iz>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f000 8089 	beq.w	800f4d0 <__kernel_cos+0x140>
 800f3be:	4642      	mov	r2, r8
 800f3c0:	464b      	mov	r3, r9
 800f3c2:	4640      	mov	r0, r8
 800f3c4:	4649      	mov	r1, r9
 800f3c6:	f7f1 f917 	bl	80005f8 <__aeabi_dmul>
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	4b4e      	ldr	r3, [pc, #312]	; (800f508 <__kernel_cos+0x178>)
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	f7f1 f911 	bl	80005f8 <__aeabi_dmul>
 800f3d6:	a340      	add	r3, pc, #256	; (adr r3, 800f4d8 <__kernel_cos+0x148>)
 800f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3dc:	4682      	mov	sl, r0
 800f3de:	468b      	mov	fp, r1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7f1 f908 	bl	80005f8 <__aeabi_dmul>
 800f3e8:	a33d      	add	r3, pc, #244	; (adr r3, 800f4e0 <__kernel_cos+0x150>)
 800f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ee:	f7f0 ff4d 	bl	800028c <__adddf3>
 800f3f2:	4622      	mov	r2, r4
 800f3f4:	462b      	mov	r3, r5
 800f3f6:	f7f1 f8ff 	bl	80005f8 <__aeabi_dmul>
 800f3fa:	a33b      	add	r3, pc, #236	; (adr r3, 800f4e8 <__kernel_cos+0x158>)
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	f7f0 ff42 	bl	8000288 <__aeabi_dsub>
 800f404:	4622      	mov	r2, r4
 800f406:	462b      	mov	r3, r5
 800f408:	f7f1 f8f6 	bl	80005f8 <__aeabi_dmul>
 800f40c:	a338      	add	r3, pc, #224	; (adr r3, 800f4f0 <__kernel_cos+0x160>)
 800f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f412:	f7f0 ff3b 	bl	800028c <__adddf3>
 800f416:	4622      	mov	r2, r4
 800f418:	462b      	mov	r3, r5
 800f41a:	f7f1 f8ed 	bl	80005f8 <__aeabi_dmul>
 800f41e:	a336      	add	r3, pc, #216	; (adr r3, 800f4f8 <__kernel_cos+0x168>)
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	f7f0 ff30 	bl	8000288 <__aeabi_dsub>
 800f428:	4622      	mov	r2, r4
 800f42a:	462b      	mov	r3, r5
 800f42c:	f7f1 f8e4 	bl	80005f8 <__aeabi_dmul>
 800f430:	a333      	add	r3, pc, #204	; (adr r3, 800f500 <__kernel_cos+0x170>)
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f7f0 ff29 	bl	800028c <__adddf3>
 800f43a:	4622      	mov	r2, r4
 800f43c:	462b      	mov	r3, r5
 800f43e:	f7f1 f8db 	bl	80005f8 <__aeabi_dmul>
 800f442:	4622      	mov	r2, r4
 800f444:	462b      	mov	r3, r5
 800f446:	f7f1 f8d7 	bl	80005f8 <__aeabi_dmul>
 800f44a:	ec53 2b18 	vmov	r2, r3, d8
 800f44e:	4604      	mov	r4, r0
 800f450:	460d      	mov	r5, r1
 800f452:	4640      	mov	r0, r8
 800f454:	4649      	mov	r1, r9
 800f456:	f7f1 f8cf 	bl	80005f8 <__aeabi_dmul>
 800f45a:	460b      	mov	r3, r1
 800f45c:	4602      	mov	r2, r0
 800f45e:	4629      	mov	r1, r5
 800f460:	4620      	mov	r0, r4
 800f462:	f7f0 ff11 	bl	8000288 <__aeabi_dsub>
 800f466:	4b29      	ldr	r3, [pc, #164]	; (800f50c <__kernel_cos+0x17c>)
 800f468:	429e      	cmp	r6, r3
 800f46a:	4680      	mov	r8, r0
 800f46c:	4689      	mov	r9, r1
 800f46e:	dc11      	bgt.n	800f494 <__kernel_cos+0x104>
 800f470:	4602      	mov	r2, r0
 800f472:	460b      	mov	r3, r1
 800f474:	4650      	mov	r0, sl
 800f476:	4659      	mov	r1, fp
 800f478:	f7f0 ff06 	bl	8000288 <__aeabi_dsub>
 800f47c:	460b      	mov	r3, r1
 800f47e:	4924      	ldr	r1, [pc, #144]	; (800f510 <__kernel_cos+0x180>)
 800f480:	4602      	mov	r2, r0
 800f482:	2000      	movs	r0, #0
 800f484:	f7f0 ff00 	bl	8000288 <__aeabi_dsub>
 800f488:	ecbd 8b02 	vpop	{d8}
 800f48c:	ec41 0b10 	vmov	d0, r0, r1
 800f490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f494:	4b1f      	ldr	r3, [pc, #124]	; (800f514 <__kernel_cos+0x184>)
 800f496:	491e      	ldr	r1, [pc, #120]	; (800f510 <__kernel_cos+0x180>)
 800f498:	429e      	cmp	r6, r3
 800f49a:	bfcc      	ite	gt
 800f49c:	4d1e      	ldrgt	r5, [pc, #120]	; (800f518 <__kernel_cos+0x188>)
 800f49e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800f4a2:	2400      	movs	r4, #0
 800f4a4:	4622      	mov	r2, r4
 800f4a6:	462b      	mov	r3, r5
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	f7f0 feed 	bl	8000288 <__aeabi_dsub>
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	460f      	mov	r7, r1
 800f4b4:	462b      	mov	r3, r5
 800f4b6:	4650      	mov	r0, sl
 800f4b8:	4659      	mov	r1, fp
 800f4ba:	f7f0 fee5 	bl	8000288 <__aeabi_dsub>
 800f4be:	4642      	mov	r2, r8
 800f4c0:	464b      	mov	r3, r9
 800f4c2:	f7f0 fee1 	bl	8000288 <__aeabi_dsub>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	4639      	mov	r1, r7
 800f4ce:	e7d9      	b.n	800f484 <__kernel_cos+0xf4>
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	490f      	ldr	r1, [pc, #60]	; (800f510 <__kernel_cos+0x180>)
 800f4d4:	e7d8      	b.n	800f488 <__kernel_cos+0xf8>
 800f4d6:	bf00      	nop
 800f4d8:	be8838d4 	.word	0xbe8838d4
 800f4dc:	bda8fae9 	.word	0xbda8fae9
 800f4e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f4e4:	3e21ee9e 	.word	0x3e21ee9e
 800f4e8:	809c52ad 	.word	0x809c52ad
 800f4ec:	3e927e4f 	.word	0x3e927e4f
 800f4f0:	19cb1590 	.word	0x19cb1590
 800f4f4:	3efa01a0 	.word	0x3efa01a0
 800f4f8:	16c15177 	.word	0x16c15177
 800f4fc:	3f56c16c 	.word	0x3f56c16c
 800f500:	5555554c 	.word	0x5555554c
 800f504:	3fa55555 	.word	0x3fa55555
 800f508:	3fe00000 	.word	0x3fe00000
 800f50c:	3fd33332 	.word	0x3fd33332
 800f510:	3ff00000 	.word	0x3ff00000
 800f514:	3fe90000 	.word	0x3fe90000
 800f518:	3fd20000 	.word	0x3fd20000
 800f51c:	00000000 	.word	0x00000000

0800f520 <__kernel_rem_pio2>:
 800f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f524:	ed2d 8b02 	vpush	{d8}
 800f528:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f52c:	1ed4      	subs	r4, r2, #3
 800f52e:	9308      	str	r3, [sp, #32]
 800f530:	9101      	str	r1, [sp, #4]
 800f532:	4bc5      	ldr	r3, [pc, #788]	; (800f848 <__kernel_rem_pio2+0x328>)
 800f534:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f536:	9009      	str	r0, [sp, #36]	; 0x24
 800f538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f53c:	9304      	str	r3, [sp, #16]
 800f53e:	9b08      	ldr	r3, [sp, #32]
 800f540:	3b01      	subs	r3, #1
 800f542:	9307      	str	r3, [sp, #28]
 800f544:	2318      	movs	r3, #24
 800f546:	fb94 f4f3 	sdiv	r4, r4, r3
 800f54a:	f06f 0317 	mvn.w	r3, #23
 800f54e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f552:	fb04 3303 	mla	r3, r4, r3, r3
 800f556:	eb03 0a02 	add.w	sl, r3, r2
 800f55a:	9b04      	ldr	r3, [sp, #16]
 800f55c:	9a07      	ldr	r2, [sp, #28]
 800f55e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f838 <__kernel_rem_pio2+0x318>
 800f562:	eb03 0802 	add.w	r8, r3, r2
 800f566:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f568:	1aa7      	subs	r7, r4, r2
 800f56a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f56e:	ae22      	add	r6, sp, #136	; 0x88
 800f570:	2500      	movs	r5, #0
 800f572:	4545      	cmp	r5, r8
 800f574:	dd13      	ble.n	800f59e <__kernel_rem_pio2+0x7e>
 800f576:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f838 <__kernel_rem_pio2+0x318>
 800f57a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f57e:	2600      	movs	r6, #0
 800f580:	9b04      	ldr	r3, [sp, #16]
 800f582:	429e      	cmp	r6, r3
 800f584:	dc32      	bgt.n	800f5ec <__kernel_rem_pio2+0xcc>
 800f586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f588:	9302      	str	r3, [sp, #8]
 800f58a:	9b08      	ldr	r3, [sp, #32]
 800f58c:	199d      	adds	r5, r3, r6
 800f58e:	ab22      	add	r3, sp, #136	; 0x88
 800f590:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f594:	9306      	str	r3, [sp, #24]
 800f596:	ec59 8b18 	vmov	r8, r9, d8
 800f59a:	2700      	movs	r7, #0
 800f59c:	e01f      	b.n	800f5de <__kernel_rem_pio2+0xbe>
 800f59e:	42ef      	cmn	r7, r5
 800f5a0:	d407      	bmi.n	800f5b2 <__kernel_rem_pio2+0x92>
 800f5a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f5a6:	f7f0 ffbd 	bl	8000524 <__aeabi_i2d>
 800f5aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f5ae:	3501      	adds	r5, #1
 800f5b0:	e7df      	b.n	800f572 <__kernel_rem_pio2+0x52>
 800f5b2:	ec51 0b18 	vmov	r0, r1, d8
 800f5b6:	e7f8      	b.n	800f5aa <__kernel_rem_pio2+0x8a>
 800f5b8:	9906      	ldr	r1, [sp, #24]
 800f5ba:	9d02      	ldr	r5, [sp, #8]
 800f5bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f5c0:	9106      	str	r1, [sp, #24]
 800f5c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f5c6:	9502      	str	r5, [sp, #8]
 800f5c8:	f7f1 f816 	bl	80005f8 <__aeabi_dmul>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	4649      	mov	r1, r9
 800f5d4:	f7f0 fe5a 	bl	800028c <__adddf3>
 800f5d8:	3701      	adds	r7, #1
 800f5da:	4680      	mov	r8, r0
 800f5dc:	4689      	mov	r9, r1
 800f5de:	9b07      	ldr	r3, [sp, #28]
 800f5e0:	429f      	cmp	r7, r3
 800f5e2:	dde9      	ble.n	800f5b8 <__kernel_rem_pio2+0x98>
 800f5e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800f5e8:	3601      	adds	r6, #1
 800f5ea:	e7c9      	b.n	800f580 <__kernel_rem_pio2+0x60>
 800f5ec:	9b04      	ldr	r3, [sp, #16]
 800f5ee:	aa0e      	add	r2, sp, #56	; 0x38
 800f5f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5f4:	930c      	str	r3, [sp, #48]	; 0x30
 800f5f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f5f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f5fc:	9c04      	ldr	r4, [sp, #16]
 800f5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800f600:	ab9a      	add	r3, sp, #616	; 0x268
 800f602:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800f606:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f60a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f60e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800f612:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f616:	ab9a      	add	r3, sp, #616	; 0x268
 800f618:	445b      	add	r3, fp
 800f61a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800f61e:	2500      	movs	r5, #0
 800f620:	1b63      	subs	r3, r4, r5
 800f622:	2b00      	cmp	r3, #0
 800f624:	dc78      	bgt.n	800f718 <__kernel_rem_pio2+0x1f8>
 800f626:	4650      	mov	r0, sl
 800f628:	ec49 8b10 	vmov	d0, r8, r9
 800f62c:	f000 fc04 	bl	800fe38 <scalbn>
 800f630:	ec57 6b10 	vmov	r6, r7, d0
 800f634:	2200      	movs	r2, #0
 800f636:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f63a:	ee10 0a10 	vmov	r0, s0
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f0 ffda 	bl	80005f8 <__aeabi_dmul>
 800f644:	ec41 0b10 	vmov	d0, r0, r1
 800f648:	f000 fb6e 	bl	800fd28 <floor>
 800f64c:	2200      	movs	r2, #0
 800f64e:	ec51 0b10 	vmov	r0, r1, d0
 800f652:	4b7e      	ldr	r3, [pc, #504]	; (800f84c <__kernel_rem_pio2+0x32c>)
 800f654:	f7f0 ffd0 	bl	80005f8 <__aeabi_dmul>
 800f658:	4602      	mov	r2, r0
 800f65a:	460b      	mov	r3, r1
 800f65c:	4630      	mov	r0, r6
 800f65e:	4639      	mov	r1, r7
 800f660:	f7f0 fe12 	bl	8000288 <__aeabi_dsub>
 800f664:	460f      	mov	r7, r1
 800f666:	4606      	mov	r6, r0
 800f668:	f7f1 fa76 	bl	8000b58 <__aeabi_d2iz>
 800f66c:	9006      	str	r0, [sp, #24]
 800f66e:	f7f0 ff59 	bl	8000524 <__aeabi_i2d>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	f7f0 fe05 	bl	8000288 <__aeabi_dsub>
 800f67e:	f1ba 0f00 	cmp.w	sl, #0
 800f682:	4606      	mov	r6, r0
 800f684:	460f      	mov	r7, r1
 800f686:	dd6c      	ble.n	800f762 <__kernel_rem_pio2+0x242>
 800f688:	1e62      	subs	r2, r4, #1
 800f68a:	ab0e      	add	r3, sp, #56	; 0x38
 800f68c:	f1ca 0118 	rsb	r1, sl, #24
 800f690:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f694:	9d06      	ldr	r5, [sp, #24]
 800f696:	fa40 f301 	asr.w	r3, r0, r1
 800f69a:	441d      	add	r5, r3
 800f69c:	408b      	lsls	r3, r1
 800f69e:	1ac0      	subs	r0, r0, r3
 800f6a0:	ab0e      	add	r3, sp, #56	; 0x38
 800f6a2:	9506      	str	r5, [sp, #24]
 800f6a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f6a8:	f1ca 0317 	rsb	r3, sl, #23
 800f6ac:	fa40 f303 	asr.w	r3, r0, r3
 800f6b0:	9302      	str	r3, [sp, #8]
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dd62      	ble.n	800f77e <__kernel_rem_pio2+0x25e>
 800f6b8:	9b06      	ldr	r3, [sp, #24]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	3301      	adds	r3, #1
 800f6be:	9306      	str	r3, [sp, #24]
 800f6c0:	4615      	mov	r5, r2
 800f6c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f6c6:	4294      	cmp	r4, r2
 800f6c8:	f300 8095 	bgt.w	800f7f6 <__kernel_rem_pio2+0x2d6>
 800f6cc:	f1ba 0f00 	cmp.w	sl, #0
 800f6d0:	dd07      	ble.n	800f6e2 <__kernel_rem_pio2+0x1c2>
 800f6d2:	f1ba 0f01 	cmp.w	sl, #1
 800f6d6:	f000 80a2 	beq.w	800f81e <__kernel_rem_pio2+0x2fe>
 800f6da:	f1ba 0f02 	cmp.w	sl, #2
 800f6de:	f000 80c1 	beq.w	800f864 <__kernel_rem_pio2+0x344>
 800f6e2:	9b02      	ldr	r3, [sp, #8]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d14a      	bne.n	800f77e <__kernel_rem_pio2+0x25e>
 800f6e8:	4632      	mov	r2, r6
 800f6ea:	463b      	mov	r3, r7
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	4958      	ldr	r1, [pc, #352]	; (800f850 <__kernel_rem_pio2+0x330>)
 800f6f0:	f7f0 fdca 	bl	8000288 <__aeabi_dsub>
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	460f      	mov	r7, r1
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	d040      	beq.n	800f77e <__kernel_rem_pio2+0x25e>
 800f6fc:	4650      	mov	r0, sl
 800f6fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f840 <__kernel_rem_pio2+0x320>
 800f702:	f000 fb99 	bl	800fe38 <scalbn>
 800f706:	4630      	mov	r0, r6
 800f708:	4639      	mov	r1, r7
 800f70a:	ec53 2b10 	vmov	r2, r3, d0
 800f70e:	f7f0 fdbb 	bl	8000288 <__aeabi_dsub>
 800f712:	4606      	mov	r6, r0
 800f714:	460f      	mov	r7, r1
 800f716:	e032      	b.n	800f77e <__kernel_rem_pio2+0x25e>
 800f718:	2200      	movs	r2, #0
 800f71a:	4b4e      	ldr	r3, [pc, #312]	; (800f854 <__kernel_rem_pio2+0x334>)
 800f71c:	4640      	mov	r0, r8
 800f71e:	4649      	mov	r1, r9
 800f720:	f7f0 ff6a 	bl	80005f8 <__aeabi_dmul>
 800f724:	f7f1 fa18 	bl	8000b58 <__aeabi_d2iz>
 800f728:	f7f0 fefc 	bl	8000524 <__aeabi_i2d>
 800f72c:	2200      	movs	r2, #0
 800f72e:	4b4a      	ldr	r3, [pc, #296]	; (800f858 <__kernel_rem_pio2+0x338>)
 800f730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f734:	f7f0 ff60 	bl	80005f8 <__aeabi_dmul>
 800f738:	4602      	mov	r2, r0
 800f73a:	460b      	mov	r3, r1
 800f73c:	4640      	mov	r0, r8
 800f73e:	4649      	mov	r1, r9
 800f740:	f7f0 fda2 	bl	8000288 <__aeabi_dsub>
 800f744:	f7f1 fa08 	bl	8000b58 <__aeabi_d2iz>
 800f748:	ab0e      	add	r3, sp, #56	; 0x38
 800f74a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f74e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f756:	f7f0 fd99 	bl	800028c <__adddf3>
 800f75a:	3501      	adds	r5, #1
 800f75c:	4680      	mov	r8, r0
 800f75e:	4689      	mov	r9, r1
 800f760:	e75e      	b.n	800f620 <__kernel_rem_pio2+0x100>
 800f762:	d105      	bne.n	800f770 <__kernel_rem_pio2+0x250>
 800f764:	1e63      	subs	r3, r4, #1
 800f766:	aa0e      	add	r2, sp, #56	; 0x38
 800f768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f76c:	15c3      	asrs	r3, r0, #23
 800f76e:	e79f      	b.n	800f6b0 <__kernel_rem_pio2+0x190>
 800f770:	2200      	movs	r2, #0
 800f772:	4b3a      	ldr	r3, [pc, #232]	; (800f85c <__kernel_rem_pio2+0x33c>)
 800f774:	f7f1 f9c6 	bl	8000b04 <__aeabi_dcmpge>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d139      	bne.n	800f7f0 <__kernel_rem_pio2+0x2d0>
 800f77c:	9002      	str	r0, [sp, #8]
 800f77e:	2200      	movs	r2, #0
 800f780:	2300      	movs	r3, #0
 800f782:	4630      	mov	r0, r6
 800f784:	4639      	mov	r1, r7
 800f786:	f7f1 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	f000 80c7 	beq.w	800f91e <__kernel_rem_pio2+0x3fe>
 800f790:	1e65      	subs	r5, r4, #1
 800f792:	462b      	mov	r3, r5
 800f794:	2200      	movs	r2, #0
 800f796:	9904      	ldr	r1, [sp, #16]
 800f798:	428b      	cmp	r3, r1
 800f79a:	da6a      	bge.n	800f872 <__kernel_rem_pio2+0x352>
 800f79c:	2a00      	cmp	r2, #0
 800f79e:	f000 8088 	beq.w	800f8b2 <__kernel_rem_pio2+0x392>
 800f7a2:	ab0e      	add	r3, sp, #56	; 0x38
 800f7a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f7a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f000 80b4 	beq.w	800f91a <__kernel_rem_pio2+0x3fa>
 800f7b2:	4650      	mov	r0, sl
 800f7b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800f840 <__kernel_rem_pio2+0x320>
 800f7b8:	f000 fb3e 	bl	800fe38 <scalbn>
 800f7bc:	00ec      	lsls	r4, r5, #3
 800f7be:	ab72      	add	r3, sp, #456	; 0x1c8
 800f7c0:	191e      	adds	r6, r3, r4
 800f7c2:	ec59 8b10 	vmov	r8, r9, d0
 800f7c6:	f106 0a08 	add.w	sl, r6, #8
 800f7ca:	462f      	mov	r7, r5
 800f7cc:	2f00      	cmp	r7, #0
 800f7ce:	f280 80df 	bge.w	800f990 <__kernel_rem_pio2+0x470>
 800f7d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800f838 <__kernel_rem_pio2+0x318>
 800f7d6:	f04f 0a00 	mov.w	sl, #0
 800f7da:	eba5 030a 	sub.w	r3, r5, sl
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f2c0 810a 	blt.w	800f9f8 <__kernel_rem_pio2+0x4d8>
 800f7e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800f860 <__kernel_rem_pio2+0x340>
 800f7e8:	ec59 8b18 	vmov	r8, r9, d8
 800f7ec:	2700      	movs	r7, #0
 800f7ee:	e0f5      	b.n	800f9dc <__kernel_rem_pio2+0x4bc>
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	9302      	str	r3, [sp, #8]
 800f7f4:	e760      	b.n	800f6b8 <__kernel_rem_pio2+0x198>
 800f7f6:	ab0e      	add	r3, sp, #56	; 0x38
 800f7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7fc:	b94d      	cbnz	r5, 800f812 <__kernel_rem_pio2+0x2f2>
 800f7fe:	b12b      	cbz	r3, 800f80c <__kernel_rem_pio2+0x2ec>
 800f800:	a80e      	add	r0, sp, #56	; 0x38
 800f802:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f806:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f80a:	2301      	movs	r3, #1
 800f80c:	3201      	adds	r2, #1
 800f80e:	461d      	mov	r5, r3
 800f810:	e759      	b.n	800f6c6 <__kernel_rem_pio2+0x1a6>
 800f812:	a80e      	add	r0, sp, #56	; 0x38
 800f814:	1acb      	subs	r3, r1, r3
 800f816:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f81a:	462b      	mov	r3, r5
 800f81c:	e7f6      	b.n	800f80c <__kernel_rem_pio2+0x2ec>
 800f81e:	1e62      	subs	r2, r4, #1
 800f820:	ab0e      	add	r3, sp, #56	; 0x38
 800f822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f826:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f82a:	a90e      	add	r1, sp, #56	; 0x38
 800f82c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f830:	e757      	b.n	800f6e2 <__kernel_rem_pio2+0x1c2>
 800f832:	bf00      	nop
 800f834:	f3af 8000 	nop.w
	...
 800f844:	3ff00000 	.word	0x3ff00000
 800f848:	080105a0 	.word	0x080105a0
 800f84c:	40200000 	.word	0x40200000
 800f850:	3ff00000 	.word	0x3ff00000
 800f854:	3e700000 	.word	0x3e700000
 800f858:	41700000 	.word	0x41700000
 800f85c:	3fe00000 	.word	0x3fe00000
 800f860:	08010560 	.word	0x08010560
 800f864:	1e62      	subs	r2, r4, #1
 800f866:	ab0e      	add	r3, sp, #56	; 0x38
 800f868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f86c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f870:	e7db      	b.n	800f82a <__kernel_rem_pio2+0x30a>
 800f872:	a90e      	add	r1, sp, #56	; 0x38
 800f874:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f878:	3b01      	subs	r3, #1
 800f87a:	430a      	orrs	r2, r1
 800f87c:	e78b      	b.n	800f796 <__kernel_rem_pio2+0x276>
 800f87e:	3301      	adds	r3, #1
 800f880:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f884:	2900      	cmp	r1, #0
 800f886:	d0fa      	beq.n	800f87e <__kernel_rem_pio2+0x35e>
 800f888:	9a08      	ldr	r2, [sp, #32]
 800f88a:	4422      	add	r2, r4
 800f88c:	00d2      	lsls	r2, r2, #3
 800f88e:	a922      	add	r1, sp, #136	; 0x88
 800f890:	18e3      	adds	r3, r4, r3
 800f892:	9206      	str	r2, [sp, #24]
 800f894:	440a      	add	r2, r1
 800f896:	9302      	str	r3, [sp, #8]
 800f898:	f10b 0108 	add.w	r1, fp, #8
 800f89c:	f102 0308 	add.w	r3, r2, #8
 800f8a0:	1c66      	adds	r6, r4, #1
 800f8a2:	910a      	str	r1, [sp, #40]	; 0x28
 800f8a4:	2500      	movs	r5, #0
 800f8a6:	930d      	str	r3, [sp, #52]	; 0x34
 800f8a8:	9b02      	ldr	r3, [sp, #8]
 800f8aa:	42b3      	cmp	r3, r6
 800f8ac:	da04      	bge.n	800f8b8 <__kernel_rem_pio2+0x398>
 800f8ae:	461c      	mov	r4, r3
 800f8b0:	e6a6      	b.n	800f600 <__kernel_rem_pio2+0xe0>
 800f8b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e7e3      	b.n	800f880 <__kernel_rem_pio2+0x360>
 800f8b8:	9b06      	ldr	r3, [sp, #24]
 800f8ba:	18ef      	adds	r7, r5, r3
 800f8bc:	ab22      	add	r3, sp, #136	; 0x88
 800f8be:	441f      	add	r7, r3
 800f8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f8c6:	f7f0 fe2d 	bl	8000524 <__aeabi_i2d>
 800f8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8cc:	461c      	mov	r4, r3
 800f8ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8d0:	e9c7 0100 	strd	r0, r1, [r7]
 800f8d4:	eb03 0b05 	add.w	fp, r3, r5
 800f8d8:	2700      	movs	r7, #0
 800f8da:	f04f 0800 	mov.w	r8, #0
 800f8de:	f04f 0900 	mov.w	r9, #0
 800f8e2:	9b07      	ldr	r3, [sp, #28]
 800f8e4:	429f      	cmp	r7, r3
 800f8e6:	dd08      	ble.n	800f8fa <__kernel_rem_pio2+0x3da>
 800f8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ea:	aa72      	add	r2, sp, #456	; 0x1c8
 800f8ec:	18eb      	adds	r3, r5, r3
 800f8ee:	4413      	add	r3, r2
 800f8f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800f8f4:	3601      	adds	r6, #1
 800f8f6:	3508      	adds	r5, #8
 800f8f8:	e7d6      	b.n	800f8a8 <__kernel_rem_pio2+0x388>
 800f8fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f8fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f902:	f7f0 fe79 	bl	80005f8 <__aeabi_dmul>
 800f906:	4602      	mov	r2, r0
 800f908:	460b      	mov	r3, r1
 800f90a:	4640      	mov	r0, r8
 800f90c:	4649      	mov	r1, r9
 800f90e:	f7f0 fcbd 	bl	800028c <__adddf3>
 800f912:	3701      	adds	r7, #1
 800f914:	4680      	mov	r8, r0
 800f916:	4689      	mov	r9, r1
 800f918:	e7e3      	b.n	800f8e2 <__kernel_rem_pio2+0x3c2>
 800f91a:	3d01      	subs	r5, #1
 800f91c:	e741      	b.n	800f7a2 <__kernel_rem_pio2+0x282>
 800f91e:	f1ca 0000 	rsb	r0, sl, #0
 800f922:	ec47 6b10 	vmov	d0, r6, r7
 800f926:	f000 fa87 	bl	800fe38 <scalbn>
 800f92a:	ec57 6b10 	vmov	r6, r7, d0
 800f92e:	2200      	movs	r2, #0
 800f930:	4b99      	ldr	r3, [pc, #612]	; (800fb98 <__kernel_rem_pio2+0x678>)
 800f932:	ee10 0a10 	vmov	r0, s0
 800f936:	4639      	mov	r1, r7
 800f938:	f7f1 f8e4 	bl	8000b04 <__aeabi_dcmpge>
 800f93c:	b1f8      	cbz	r0, 800f97e <__kernel_rem_pio2+0x45e>
 800f93e:	2200      	movs	r2, #0
 800f940:	4b96      	ldr	r3, [pc, #600]	; (800fb9c <__kernel_rem_pio2+0x67c>)
 800f942:	4630      	mov	r0, r6
 800f944:	4639      	mov	r1, r7
 800f946:	f7f0 fe57 	bl	80005f8 <__aeabi_dmul>
 800f94a:	f7f1 f905 	bl	8000b58 <__aeabi_d2iz>
 800f94e:	4680      	mov	r8, r0
 800f950:	f7f0 fde8 	bl	8000524 <__aeabi_i2d>
 800f954:	2200      	movs	r2, #0
 800f956:	4b90      	ldr	r3, [pc, #576]	; (800fb98 <__kernel_rem_pio2+0x678>)
 800f958:	f7f0 fe4e 	bl	80005f8 <__aeabi_dmul>
 800f95c:	460b      	mov	r3, r1
 800f95e:	4602      	mov	r2, r0
 800f960:	4639      	mov	r1, r7
 800f962:	4630      	mov	r0, r6
 800f964:	f7f0 fc90 	bl	8000288 <__aeabi_dsub>
 800f968:	f7f1 f8f6 	bl	8000b58 <__aeabi_d2iz>
 800f96c:	1c65      	adds	r5, r4, #1
 800f96e:	ab0e      	add	r3, sp, #56	; 0x38
 800f970:	f10a 0a18 	add.w	sl, sl, #24
 800f974:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f978:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f97c:	e719      	b.n	800f7b2 <__kernel_rem_pio2+0x292>
 800f97e:	4630      	mov	r0, r6
 800f980:	4639      	mov	r1, r7
 800f982:	f7f1 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800f986:	ab0e      	add	r3, sp, #56	; 0x38
 800f988:	4625      	mov	r5, r4
 800f98a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f98e:	e710      	b.n	800f7b2 <__kernel_rem_pio2+0x292>
 800f990:	ab0e      	add	r3, sp, #56	; 0x38
 800f992:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f996:	f7f0 fdc5 	bl	8000524 <__aeabi_i2d>
 800f99a:	4642      	mov	r2, r8
 800f99c:	464b      	mov	r3, r9
 800f99e:	f7f0 fe2b 	bl	80005f8 <__aeabi_dmul>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f9a8:	4b7c      	ldr	r3, [pc, #496]	; (800fb9c <__kernel_rem_pio2+0x67c>)
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	f7f0 fe23 	bl	80005f8 <__aeabi_dmul>
 800f9b2:	3f01      	subs	r7, #1
 800f9b4:	4680      	mov	r8, r0
 800f9b6:	4689      	mov	r9, r1
 800f9b8:	e708      	b.n	800f7cc <__kernel_rem_pio2+0x2ac>
 800f9ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f9c6:	f7f0 fe17 	bl	80005f8 <__aeabi_dmul>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	4640      	mov	r0, r8
 800f9d0:	4649      	mov	r1, r9
 800f9d2:	f7f0 fc5b 	bl	800028c <__adddf3>
 800f9d6:	3701      	adds	r7, #1
 800f9d8:	4680      	mov	r8, r0
 800f9da:	4689      	mov	r9, r1
 800f9dc:	9b04      	ldr	r3, [sp, #16]
 800f9de:	429f      	cmp	r7, r3
 800f9e0:	dc01      	bgt.n	800f9e6 <__kernel_rem_pio2+0x4c6>
 800f9e2:	45ba      	cmp	sl, r7
 800f9e4:	dae9      	bge.n	800f9ba <__kernel_rem_pio2+0x49a>
 800f9e6:	ab4a      	add	r3, sp, #296	; 0x128
 800f9e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9ec:	e9c3 8900 	strd	r8, r9, [r3]
 800f9f0:	f10a 0a01 	add.w	sl, sl, #1
 800f9f4:	3e08      	subs	r6, #8
 800f9f6:	e6f0      	b.n	800f7da <__kernel_rem_pio2+0x2ba>
 800f9f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f9fa:	2b03      	cmp	r3, #3
 800f9fc:	d85b      	bhi.n	800fab6 <__kernel_rem_pio2+0x596>
 800f9fe:	e8df f003 	tbb	[pc, r3]
 800fa02:	264a      	.short	0x264a
 800fa04:	0226      	.short	0x0226
 800fa06:	ab9a      	add	r3, sp, #616	; 0x268
 800fa08:	441c      	add	r4, r3
 800fa0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fa0e:	46a2      	mov	sl, r4
 800fa10:	46ab      	mov	fp, r5
 800fa12:	f1bb 0f00 	cmp.w	fp, #0
 800fa16:	dc6c      	bgt.n	800faf2 <__kernel_rem_pio2+0x5d2>
 800fa18:	46a2      	mov	sl, r4
 800fa1a:	46ab      	mov	fp, r5
 800fa1c:	f1bb 0f01 	cmp.w	fp, #1
 800fa20:	f300 8086 	bgt.w	800fb30 <__kernel_rem_pio2+0x610>
 800fa24:	2000      	movs	r0, #0
 800fa26:	2100      	movs	r1, #0
 800fa28:	2d01      	cmp	r5, #1
 800fa2a:	f300 80a0 	bgt.w	800fb6e <__kernel_rem_pio2+0x64e>
 800fa2e:	9b02      	ldr	r3, [sp, #8]
 800fa30:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800fa34:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f040 809e 	bne.w	800fb7a <__kernel_rem_pio2+0x65a>
 800fa3e:	9b01      	ldr	r3, [sp, #4]
 800fa40:	e9c3 7800 	strd	r7, r8, [r3]
 800fa44:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fa48:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fa4c:	e033      	b.n	800fab6 <__kernel_rem_pio2+0x596>
 800fa4e:	3408      	adds	r4, #8
 800fa50:	ab4a      	add	r3, sp, #296	; 0x128
 800fa52:	441c      	add	r4, r3
 800fa54:	462e      	mov	r6, r5
 800fa56:	2000      	movs	r0, #0
 800fa58:	2100      	movs	r1, #0
 800fa5a:	2e00      	cmp	r6, #0
 800fa5c:	da3a      	bge.n	800fad4 <__kernel_rem_pio2+0x5b4>
 800fa5e:	9b02      	ldr	r3, [sp, #8]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d03d      	beq.n	800fae0 <__kernel_rem_pio2+0x5c0>
 800fa64:	4602      	mov	r2, r0
 800fa66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa6a:	9c01      	ldr	r4, [sp, #4]
 800fa6c:	e9c4 2300 	strd	r2, r3, [r4]
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fa78:	f7f0 fc06 	bl	8000288 <__aeabi_dsub>
 800fa7c:	ae4c      	add	r6, sp, #304	; 0x130
 800fa7e:	2401      	movs	r4, #1
 800fa80:	42a5      	cmp	r5, r4
 800fa82:	da30      	bge.n	800fae6 <__kernel_rem_pio2+0x5c6>
 800fa84:	9b02      	ldr	r3, [sp, #8]
 800fa86:	b113      	cbz	r3, 800fa8e <__kernel_rem_pio2+0x56e>
 800fa88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	9b01      	ldr	r3, [sp, #4]
 800fa90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fa94:	e00f      	b.n	800fab6 <__kernel_rem_pio2+0x596>
 800fa96:	ab9a      	add	r3, sp, #616	; 0x268
 800fa98:	441c      	add	r4, r3
 800fa9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fa9e:	2000      	movs	r0, #0
 800faa0:	2100      	movs	r1, #0
 800faa2:	2d00      	cmp	r5, #0
 800faa4:	da10      	bge.n	800fac8 <__kernel_rem_pio2+0x5a8>
 800faa6:	9b02      	ldr	r3, [sp, #8]
 800faa8:	b113      	cbz	r3, 800fab0 <__kernel_rem_pio2+0x590>
 800faaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800faae:	4619      	mov	r1, r3
 800fab0:	9b01      	ldr	r3, [sp, #4]
 800fab2:	e9c3 0100 	strd	r0, r1, [r3]
 800fab6:	9b06      	ldr	r3, [sp, #24]
 800fab8:	f003 0007 	and.w	r0, r3, #7
 800fabc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fac0:	ecbd 8b02 	vpop	{d8}
 800fac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800facc:	f7f0 fbde 	bl	800028c <__adddf3>
 800fad0:	3d01      	subs	r5, #1
 800fad2:	e7e6      	b.n	800faa2 <__kernel_rem_pio2+0x582>
 800fad4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fad8:	f7f0 fbd8 	bl	800028c <__adddf3>
 800fadc:	3e01      	subs	r6, #1
 800fade:	e7bc      	b.n	800fa5a <__kernel_rem_pio2+0x53a>
 800fae0:	4602      	mov	r2, r0
 800fae2:	460b      	mov	r3, r1
 800fae4:	e7c1      	b.n	800fa6a <__kernel_rem_pio2+0x54a>
 800fae6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800faea:	f7f0 fbcf 	bl	800028c <__adddf3>
 800faee:	3401      	adds	r4, #1
 800faf0:	e7c6      	b.n	800fa80 <__kernel_rem_pio2+0x560>
 800faf2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800faf6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800fafa:	4640      	mov	r0, r8
 800fafc:	ec53 2b17 	vmov	r2, r3, d7
 800fb00:	4649      	mov	r1, r9
 800fb02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb06:	f7f0 fbc1 	bl	800028c <__adddf3>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460f      	mov	r7, r1
 800fb12:	4640      	mov	r0, r8
 800fb14:	4649      	mov	r1, r9
 800fb16:	f7f0 fbb7 	bl	8000288 <__aeabi_dsub>
 800fb1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb1e:	f7f0 fbb5 	bl	800028c <__adddf3>
 800fb22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb26:	e9ca 0100 	strd	r0, r1, [sl]
 800fb2a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800fb2e:	e770      	b.n	800fa12 <__kernel_rem_pio2+0x4f2>
 800fb30:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800fb34:	ed3a 7b02 	vldmdb	sl!, {d7}
 800fb38:	4630      	mov	r0, r6
 800fb3a:	ec53 2b17 	vmov	r2, r3, d7
 800fb3e:	4639      	mov	r1, r7
 800fb40:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb44:	f7f0 fba2 	bl	800028c <__adddf3>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	4689      	mov	r9, r1
 800fb50:	4630      	mov	r0, r6
 800fb52:	4639      	mov	r1, r7
 800fb54:	f7f0 fb98 	bl	8000288 <__aeabi_dsub>
 800fb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb5c:	f7f0 fb96 	bl	800028c <__adddf3>
 800fb60:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb64:	e9ca 0100 	strd	r0, r1, [sl]
 800fb68:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800fb6c:	e756      	b.n	800fa1c <__kernel_rem_pio2+0x4fc>
 800fb6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fb72:	f7f0 fb8b 	bl	800028c <__adddf3>
 800fb76:	3d01      	subs	r5, #1
 800fb78:	e756      	b.n	800fa28 <__kernel_rem_pio2+0x508>
 800fb7a:	9b01      	ldr	r3, [sp, #4]
 800fb7c:	9a01      	ldr	r2, [sp, #4]
 800fb7e:	601f      	str	r7, [r3, #0]
 800fb80:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800fb84:	605c      	str	r4, [r3, #4]
 800fb86:	609d      	str	r5, [r3, #8]
 800fb88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fb8c:	60d3      	str	r3, [r2, #12]
 800fb8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb92:	6110      	str	r0, [r2, #16]
 800fb94:	6153      	str	r3, [r2, #20]
 800fb96:	e78e      	b.n	800fab6 <__kernel_rem_pio2+0x596>
 800fb98:	41700000 	.word	0x41700000
 800fb9c:	3e700000 	.word	0x3e700000

0800fba0 <__kernel_sin>:
 800fba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba4:	ec55 4b10 	vmov	r4, r5, d0
 800fba8:	b085      	sub	sp, #20
 800fbaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fbae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fbb2:	ed8d 1b00 	vstr	d1, [sp]
 800fbb6:	9002      	str	r0, [sp, #8]
 800fbb8:	da06      	bge.n	800fbc8 <__kernel_sin+0x28>
 800fbba:	ee10 0a10 	vmov	r0, s0
 800fbbe:	4629      	mov	r1, r5
 800fbc0:	f7f0 ffca 	bl	8000b58 <__aeabi_d2iz>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d051      	beq.n	800fc6c <__kernel_sin+0xcc>
 800fbc8:	4622      	mov	r2, r4
 800fbca:	462b      	mov	r3, r5
 800fbcc:	4620      	mov	r0, r4
 800fbce:	4629      	mov	r1, r5
 800fbd0:	f7f0 fd12 	bl	80005f8 <__aeabi_dmul>
 800fbd4:	4682      	mov	sl, r0
 800fbd6:	468b      	mov	fp, r1
 800fbd8:	4602      	mov	r2, r0
 800fbda:	460b      	mov	r3, r1
 800fbdc:	4620      	mov	r0, r4
 800fbde:	4629      	mov	r1, r5
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	a341      	add	r3, pc, #260	; (adr r3, 800fcec <__kernel_sin+0x14c>)
 800fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbea:	4680      	mov	r8, r0
 800fbec:	4689      	mov	r9, r1
 800fbee:	4650      	mov	r0, sl
 800fbf0:	4659      	mov	r1, fp
 800fbf2:	f7f0 fd01 	bl	80005f8 <__aeabi_dmul>
 800fbf6:	a33f      	add	r3, pc, #252	; (adr r3, 800fcf4 <__kernel_sin+0x154>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	f7f0 fb44 	bl	8000288 <__aeabi_dsub>
 800fc00:	4652      	mov	r2, sl
 800fc02:	465b      	mov	r3, fp
 800fc04:	f7f0 fcf8 	bl	80005f8 <__aeabi_dmul>
 800fc08:	a33c      	add	r3, pc, #240	; (adr r3, 800fcfc <__kernel_sin+0x15c>)
 800fc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0e:	f7f0 fb3d 	bl	800028c <__adddf3>
 800fc12:	4652      	mov	r2, sl
 800fc14:	465b      	mov	r3, fp
 800fc16:	f7f0 fcef 	bl	80005f8 <__aeabi_dmul>
 800fc1a:	a33a      	add	r3, pc, #232	; (adr r3, 800fd04 <__kernel_sin+0x164>)
 800fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc20:	f7f0 fb32 	bl	8000288 <__aeabi_dsub>
 800fc24:	4652      	mov	r2, sl
 800fc26:	465b      	mov	r3, fp
 800fc28:	f7f0 fce6 	bl	80005f8 <__aeabi_dmul>
 800fc2c:	a337      	add	r3, pc, #220	; (adr r3, 800fd0c <__kernel_sin+0x16c>)
 800fc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc32:	f7f0 fb2b 	bl	800028c <__adddf3>
 800fc36:	9b02      	ldr	r3, [sp, #8]
 800fc38:	4606      	mov	r6, r0
 800fc3a:	460f      	mov	r7, r1
 800fc3c:	b9db      	cbnz	r3, 800fc76 <__kernel_sin+0xd6>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	460b      	mov	r3, r1
 800fc42:	4650      	mov	r0, sl
 800fc44:	4659      	mov	r1, fp
 800fc46:	f7f0 fcd7 	bl	80005f8 <__aeabi_dmul>
 800fc4a:	a325      	add	r3, pc, #148	; (adr r3, 800fce0 <__kernel_sin+0x140>)
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	f7f0 fb1a 	bl	8000288 <__aeabi_dsub>
 800fc54:	4642      	mov	r2, r8
 800fc56:	464b      	mov	r3, r9
 800fc58:	f7f0 fcce 	bl	80005f8 <__aeabi_dmul>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4620      	mov	r0, r4
 800fc62:	4629      	mov	r1, r5
 800fc64:	f7f0 fb12 	bl	800028c <__adddf3>
 800fc68:	4604      	mov	r4, r0
 800fc6a:	460d      	mov	r5, r1
 800fc6c:	ec45 4b10 	vmov	d0, r4, r5
 800fc70:	b005      	add	sp, #20
 800fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc76:	2200      	movs	r2, #0
 800fc78:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <__kernel_sin+0x148>)
 800fc7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc7e:	f7f0 fcbb 	bl	80005f8 <__aeabi_dmul>
 800fc82:	4632      	mov	r2, r6
 800fc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc88:	463b      	mov	r3, r7
 800fc8a:	4640      	mov	r0, r8
 800fc8c:	4649      	mov	r1, r9
 800fc8e:	f7f0 fcb3 	bl	80005f8 <__aeabi_dmul>
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc9a:	f7f0 faf5 	bl	8000288 <__aeabi_dsub>
 800fc9e:	4652      	mov	r2, sl
 800fca0:	465b      	mov	r3, fp
 800fca2:	f7f0 fca9 	bl	80005f8 <__aeabi_dmul>
 800fca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fcaa:	f7f0 faed 	bl	8000288 <__aeabi_dsub>
 800fcae:	a30c      	add	r3, pc, #48	; (adr r3, 800fce0 <__kernel_sin+0x140>)
 800fcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	460f      	mov	r7, r1
 800fcb8:	4640      	mov	r0, r8
 800fcba:	4649      	mov	r1, r9
 800fcbc:	f7f0 fc9c 	bl	80005f8 <__aeabi_dmul>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	4639      	mov	r1, r7
 800fcc8:	f7f0 fae0 	bl	800028c <__adddf3>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	f7f0 fad8 	bl	8000288 <__aeabi_dsub>
 800fcd8:	e7c6      	b.n	800fc68 <__kernel_sin+0xc8>
 800fcda:	bf00      	nop
 800fcdc:	f3af 8000 	nop.w
 800fce0:	55555549 	.word	0x55555549
 800fce4:	3fc55555 	.word	0x3fc55555
 800fce8:	3fe00000 	.word	0x3fe00000
 800fcec:	5acfd57c 	.word	0x5acfd57c
 800fcf0:	3de5d93a 	.word	0x3de5d93a
 800fcf4:	8a2b9ceb 	.word	0x8a2b9ceb
 800fcf8:	3e5ae5e6 	.word	0x3e5ae5e6
 800fcfc:	57b1fe7d 	.word	0x57b1fe7d
 800fd00:	3ec71de3 	.word	0x3ec71de3
 800fd04:	19c161d5 	.word	0x19c161d5
 800fd08:	3f2a01a0 	.word	0x3f2a01a0
 800fd0c:	1110f8a6 	.word	0x1110f8a6
 800fd10:	3f811111 	.word	0x3f811111

0800fd14 <fabs>:
 800fd14:	ec51 0b10 	vmov	r0, r1, d0
 800fd18:	ee10 2a10 	vmov	r2, s0
 800fd1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd20:	ec43 2b10 	vmov	d0, r2, r3
 800fd24:	4770      	bx	lr
	...

0800fd28 <floor>:
 800fd28:	ec51 0b10 	vmov	r0, r1, d0
 800fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fd34:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fd38:	2e13      	cmp	r6, #19
 800fd3a:	460c      	mov	r4, r1
 800fd3c:	ee10 5a10 	vmov	r5, s0
 800fd40:	4680      	mov	r8, r0
 800fd42:	dc34      	bgt.n	800fdae <floor+0x86>
 800fd44:	2e00      	cmp	r6, #0
 800fd46:	da16      	bge.n	800fd76 <floor+0x4e>
 800fd48:	a335      	add	r3, pc, #212	; (adr r3, 800fe20 <floor+0xf8>)
 800fd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4e:	f7f0 fa9d 	bl	800028c <__adddf3>
 800fd52:	2200      	movs	r2, #0
 800fd54:	2300      	movs	r3, #0
 800fd56:	f7f0 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 800fd5a:	b148      	cbz	r0, 800fd70 <floor+0x48>
 800fd5c:	2c00      	cmp	r4, #0
 800fd5e:	da59      	bge.n	800fe14 <floor+0xec>
 800fd60:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fd64:	4a30      	ldr	r2, [pc, #192]	; (800fe28 <floor+0x100>)
 800fd66:	432b      	orrs	r3, r5
 800fd68:	2500      	movs	r5, #0
 800fd6a:	42ab      	cmp	r3, r5
 800fd6c:	bf18      	it	ne
 800fd6e:	4614      	movne	r4, r2
 800fd70:	4621      	mov	r1, r4
 800fd72:	4628      	mov	r0, r5
 800fd74:	e025      	b.n	800fdc2 <floor+0x9a>
 800fd76:	4f2d      	ldr	r7, [pc, #180]	; (800fe2c <floor+0x104>)
 800fd78:	4137      	asrs	r7, r6
 800fd7a:	ea01 0307 	and.w	r3, r1, r7
 800fd7e:	4303      	orrs	r3, r0
 800fd80:	d01f      	beq.n	800fdc2 <floor+0x9a>
 800fd82:	a327      	add	r3, pc, #156	; (adr r3, 800fe20 <floor+0xf8>)
 800fd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd88:	f7f0 fa80 	bl	800028c <__adddf3>
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f7f0 fec2 	bl	8000b18 <__aeabi_dcmpgt>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	d0eb      	beq.n	800fd70 <floor+0x48>
 800fd98:	2c00      	cmp	r4, #0
 800fd9a:	bfbe      	ittt	lt
 800fd9c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fda0:	fa43 f606 	asrlt.w	r6, r3, r6
 800fda4:	19a4      	addlt	r4, r4, r6
 800fda6:	ea24 0407 	bic.w	r4, r4, r7
 800fdaa:	2500      	movs	r5, #0
 800fdac:	e7e0      	b.n	800fd70 <floor+0x48>
 800fdae:	2e33      	cmp	r6, #51	; 0x33
 800fdb0:	dd0b      	ble.n	800fdca <floor+0xa2>
 800fdb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fdb6:	d104      	bne.n	800fdc2 <floor+0x9a>
 800fdb8:	ee10 2a10 	vmov	r2, s0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	f7f0 fa65 	bl	800028c <__adddf3>
 800fdc2:	ec41 0b10 	vmov	d0, r0, r1
 800fdc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fdce:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd2:	fa23 f707 	lsr.w	r7, r3, r7
 800fdd6:	4207      	tst	r7, r0
 800fdd8:	d0f3      	beq.n	800fdc2 <floor+0x9a>
 800fdda:	a311      	add	r3, pc, #68	; (adr r3, 800fe20 <floor+0xf8>)
 800fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde0:	f7f0 fa54 	bl	800028c <__adddf3>
 800fde4:	2200      	movs	r2, #0
 800fde6:	2300      	movs	r3, #0
 800fde8:	f7f0 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d0bf      	beq.n	800fd70 <floor+0x48>
 800fdf0:	2c00      	cmp	r4, #0
 800fdf2:	da02      	bge.n	800fdfa <floor+0xd2>
 800fdf4:	2e14      	cmp	r6, #20
 800fdf6:	d103      	bne.n	800fe00 <floor+0xd8>
 800fdf8:	3401      	adds	r4, #1
 800fdfa:	ea25 0507 	bic.w	r5, r5, r7
 800fdfe:	e7b7      	b.n	800fd70 <floor+0x48>
 800fe00:	2301      	movs	r3, #1
 800fe02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fe06:	fa03 f606 	lsl.w	r6, r3, r6
 800fe0a:	4435      	add	r5, r6
 800fe0c:	4545      	cmp	r5, r8
 800fe0e:	bf38      	it	cc
 800fe10:	18e4      	addcc	r4, r4, r3
 800fe12:	e7f2      	b.n	800fdfa <floor+0xd2>
 800fe14:	2500      	movs	r5, #0
 800fe16:	462c      	mov	r4, r5
 800fe18:	e7aa      	b.n	800fd70 <floor+0x48>
 800fe1a:	bf00      	nop
 800fe1c:	f3af 8000 	nop.w
 800fe20:	8800759c 	.word	0x8800759c
 800fe24:	7e37e43c 	.word	0x7e37e43c
 800fe28:	bff00000 	.word	0xbff00000
 800fe2c:	000fffff 	.word	0x000fffff

0800fe30 <matherr>:
 800fe30:	2000      	movs	r0, #0
 800fe32:	4770      	bx	lr
 800fe34:	0000      	movs	r0, r0
	...

0800fe38 <scalbn>:
 800fe38:	b570      	push	{r4, r5, r6, lr}
 800fe3a:	ec55 4b10 	vmov	r4, r5, d0
 800fe3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fe42:	4606      	mov	r6, r0
 800fe44:	462b      	mov	r3, r5
 800fe46:	b9aa      	cbnz	r2, 800fe74 <scalbn+0x3c>
 800fe48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fe4c:	4323      	orrs	r3, r4
 800fe4e:	d03b      	beq.n	800fec8 <scalbn+0x90>
 800fe50:	4b31      	ldr	r3, [pc, #196]	; (800ff18 <scalbn+0xe0>)
 800fe52:	4629      	mov	r1, r5
 800fe54:	2200      	movs	r2, #0
 800fe56:	ee10 0a10 	vmov	r0, s0
 800fe5a:	f7f0 fbcd 	bl	80005f8 <__aeabi_dmul>
 800fe5e:	4b2f      	ldr	r3, [pc, #188]	; (800ff1c <scalbn+0xe4>)
 800fe60:	429e      	cmp	r6, r3
 800fe62:	4604      	mov	r4, r0
 800fe64:	460d      	mov	r5, r1
 800fe66:	da12      	bge.n	800fe8e <scalbn+0x56>
 800fe68:	a327      	add	r3, pc, #156	; (adr r3, 800ff08 <scalbn+0xd0>)
 800fe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6e:	f7f0 fbc3 	bl	80005f8 <__aeabi_dmul>
 800fe72:	e009      	b.n	800fe88 <scalbn+0x50>
 800fe74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fe78:	428a      	cmp	r2, r1
 800fe7a:	d10c      	bne.n	800fe96 <scalbn+0x5e>
 800fe7c:	ee10 2a10 	vmov	r2, s0
 800fe80:	4620      	mov	r0, r4
 800fe82:	4629      	mov	r1, r5
 800fe84:	f7f0 fa02 	bl	800028c <__adddf3>
 800fe88:	4604      	mov	r4, r0
 800fe8a:	460d      	mov	r5, r1
 800fe8c:	e01c      	b.n	800fec8 <scalbn+0x90>
 800fe8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fe92:	460b      	mov	r3, r1
 800fe94:	3a36      	subs	r2, #54	; 0x36
 800fe96:	4432      	add	r2, r6
 800fe98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fe9c:	428a      	cmp	r2, r1
 800fe9e:	dd0b      	ble.n	800feb8 <scalbn+0x80>
 800fea0:	ec45 4b11 	vmov	d1, r4, r5
 800fea4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ff10 <scalbn+0xd8>
 800fea8:	f000 f83c 	bl	800ff24 <copysign>
 800feac:	a318      	add	r3, pc, #96	; (adr r3, 800ff10 <scalbn+0xd8>)
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	ec51 0b10 	vmov	r0, r1, d0
 800feb6:	e7da      	b.n	800fe6e <scalbn+0x36>
 800feb8:	2a00      	cmp	r2, #0
 800feba:	dd08      	ble.n	800fece <scalbn+0x96>
 800febc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fec0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fec4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fec8:	ec45 4b10 	vmov	d0, r4, r5
 800fecc:	bd70      	pop	{r4, r5, r6, pc}
 800fece:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fed2:	da0d      	bge.n	800fef0 <scalbn+0xb8>
 800fed4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fed8:	429e      	cmp	r6, r3
 800feda:	ec45 4b11 	vmov	d1, r4, r5
 800fede:	dce1      	bgt.n	800fea4 <scalbn+0x6c>
 800fee0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ff08 <scalbn+0xd0>
 800fee4:	f000 f81e 	bl	800ff24 <copysign>
 800fee8:	a307      	add	r3, pc, #28	; (adr r3, 800ff08 <scalbn+0xd0>)
 800feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feee:	e7e0      	b.n	800feb2 <scalbn+0x7a>
 800fef0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fef4:	3236      	adds	r2, #54	; 0x36
 800fef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fefa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fefe:	4620      	mov	r0, r4
 800ff00:	4629      	mov	r1, r5
 800ff02:	2200      	movs	r2, #0
 800ff04:	4b06      	ldr	r3, [pc, #24]	; (800ff20 <scalbn+0xe8>)
 800ff06:	e7b2      	b.n	800fe6e <scalbn+0x36>
 800ff08:	c2f8f359 	.word	0xc2f8f359
 800ff0c:	01a56e1f 	.word	0x01a56e1f
 800ff10:	8800759c 	.word	0x8800759c
 800ff14:	7e37e43c 	.word	0x7e37e43c
 800ff18:	43500000 	.word	0x43500000
 800ff1c:	ffff3cb0 	.word	0xffff3cb0
 800ff20:	3c900000 	.word	0x3c900000

0800ff24 <copysign>:
 800ff24:	ec51 0b10 	vmov	r0, r1, d0
 800ff28:	ee11 0a90 	vmov	r0, s3
 800ff2c:	ee10 2a10 	vmov	r2, s0
 800ff30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ff34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ff38:	ea41 0300 	orr.w	r3, r1, r0
 800ff3c:	ec43 2b10 	vmov	d0, r2, r3
 800ff40:	4770      	bx	lr
	...

0800ff44 <_init>:
 800ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff46:	bf00      	nop
 800ff48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff4a:	bc08      	pop	{r3}
 800ff4c:	469e      	mov	lr, r3
 800ff4e:	4770      	bx	lr

0800ff50 <_fini>:
 800ff50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff52:	bf00      	nop
 800ff54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff56:	bc08      	pop	{r3}
 800ff58:	469e      	mov	lr, r3
 800ff5a:	4770      	bx	lr
